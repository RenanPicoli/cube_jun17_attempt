
cube_jun17_attempt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a14  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08003c0c  08003c0c  00013c0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003dac  08003dac  00013dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08003db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001858  200001d4  08003f88  000201d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001a2c  08003f88  00021a2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bc1d  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003b8b  00000000  00000000  0003be1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005c0b  00000000  00000000  0003f9aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a88  00000000  00000000  000455b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bf0  00000000  00000000  00046040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006967  00000000  00000000  00046c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003dcb  00000000  00000000  0004d597  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00051362  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b98  00000000  00000000  000513e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001d4 	.word	0x200001d4
 8000214:	00000000 	.word	0x00000000
 8000218:	08003bf4 	.word	0x08003bf4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001d8 	.word	0x200001d8
 8000234:	08003bf4 	.word	0x08003bf4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <HAL_InitTick+0x3c>)
{
 800054c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800054e:	4a0e      	ldr	r2, [pc, #56]	; (8000588 <HAL_InitTick+0x40>)
 8000550:	7818      	ldrb	r0, [r3, #0]
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f0 	udiv	r3, r3, r0
 800055a:	6810      	ldr	r0, [r2, #0]
 800055c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000560:	f000 f8c2 	bl	80006e8 <HAL_SYSTICK_Config>
 8000564:	4604      	mov	r4, r0
 8000566:	b958      	cbnz	r0, 8000580 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000568:	2d0f      	cmp	r5, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	4602      	mov	r2, r0
 800056e:	4629      	mov	r1, r5
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f85a 	bl	800062c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_InitTick+0x44>)
 800057a:	4620      	mov	r0, r4
 800057c:	601d      	str	r5, [r3, #0]
 800057e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000582:	bd38      	pop	{r3, r4, r5, pc}
 8000584:	20000000 	.word	0x20000000
 8000588:	20000118 	.word	0x20000118
 800058c:	20000004 	.word	0x20000004

08000590 <HAL_Init>:
{
 8000590:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000592:	2003      	movs	r0, #3
 8000594:	f000 f82c 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff ffd5 	bl	8000548 <HAL_InitTick>
  HAL_MspInit();
 800059e:	f002 ff6d 	bl	800347c <HAL_MspInit>
}
 80005a2:	2000      	movs	r0, #0
 80005a4:	bd08      	pop	{r3, pc}
	...

080005a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <HAL_IncTick+0x10>)
 80005aa:	4b04      	ldr	r3, [pc, #16]	; (80005bc <HAL_IncTick+0x14>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000200 	.word	0x20000200
 80005bc:	20000000 	.word	0x20000000

080005c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c0:	4b01      	ldr	r3, [pc, #4]	; (80005c8 <HAL_GetTick+0x8>)
 80005c2:	6818      	ldr	r0, [r3, #0]
}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000200 	.word	0x20000200

080005cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005cc:	b538      	push	{r3, r4, r5, lr}
 80005ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff fff6 	bl	80005c0 <HAL_GetTick>
 80005d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005d8:	bf1e      	ittt	ne
 80005da:	4b04      	ldrne	r3, [pc, #16]	; (80005ec <HAL_Delay+0x20>)
 80005dc:	781b      	ldrbne	r3, [r3, #0]
 80005de:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e0:	f7ff ffee 	bl	80005c0 <HAL_GetTick>
 80005e4:	1b40      	subs	r0, r0, r5
 80005e6:	4284      	cmp	r4, r0
 80005e8:	d8fa      	bhi.n	80005e0 <HAL_Delay+0x14>
  {
  }
}
 80005ea:	bd38      	pop	{r3, r4, r5, pc}
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80005f0:	1ec3      	subs	r3, r0, #3
 80005f2:	2b04      	cmp	r3, #4
{
 80005f4:	b510      	push	{r4, lr}
 80005f6:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80005f8:	d903      	bls.n	8000602 <HAL_NVIC_SetPriorityGrouping+0x12>
 80005fa:	21a2      	movs	r1, #162	; 0xa2
 80005fc:	4809      	ldr	r0, [pc, #36]	; (8000624 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80005fe:	f002 ff3c 	bl	800347a <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000604:	0224      	lsls	r4, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000606:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000608:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000610:	041b      	lsls	r3, r3, #16
 8000612:	0c1b      	lsrs	r3, r3, #16
 8000614:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800061c:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 800061e:	60d4      	str	r4, [r2, #12]
 8000620:	bd10      	pop	{r4, pc}
 8000622:	bf00      	nop
 8000624:	08003c0c 	.word	0x08003c0c
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800062c:	2a0f      	cmp	r2, #15
{ 
 800062e:	b570      	push	{r4, r5, r6, lr}
 8000630:	4604      	mov	r4, r0
 8000632:	460e      	mov	r6, r1
 8000634:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000636:	d903      	bls.n	8000640 <HAL_NVIC_SetPriority+0x14>
 8000638:	21ba      	movs	r1, #186	; 0xba
 800063a:	481d      	ldr	r0, [pc, #116]	; (80006b0 <HAL_NVIC_SetPriority+0x84>)
 800063c:	f002 ff1d 	bl	800347a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000640:	2e0f      	cmp	r6, #15
 8000642:	d903      	bls.n	800064c <HAL_NVIC_SetPriority+0x20>
 8000644:	21bb      	movs	r1, #187	; 0xbb
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <HAL_NVIC_SetPriority+0x84>)
 8000648:	f002 ff17 	bl	800347a <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <HAL_NVIC_SetPriority+0x88>)

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064e:	2001      	movs	r0, #1
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	68d9      	ldr	r1, [r3, #12]
 8000652:	f3c1 2102 	ubfx	r1, r1, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000656:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065a:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065c:	2b04      	cmp	r3, #4
 800065e:	bf28      	it	cs
 8000660:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	2a06      	cmp	r2, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	fa00 f203 	lsl.w	r2, r0, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000668:	bf8c      	ite	hi
 800066a:	3903      	subhi	r1, #3
 800066c:	2100      	movls	r1, #0
  if ((int32_t)(IRQn) < 0)
 800066e:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000670:	f102 32ff 	add.w	r2, r2, #4294967295
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000674:	fa00 f001 	lsl.w	r0, r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000678:	ea02 0206 	and.w	r2, r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800067c:	f100 30ff 	add.w	r0, r0, #4294967295
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000680:	fa02 f201 	lsl.w	r2, r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000684:	ea05 0500 	and.w	r5, r5, r0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	ea42 0205 	orr.w	r2, r2, r5
 800068c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000690:	da05      	bge.n	800069e <HAL_NVIC_SetPriority+0x72>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	f004 040f 	and.w	r4, r4, #15
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <HAL_NVIC_SetPriority+0x8c>)
 800069a:	551a      	strb	r2, [r3, r4]
 800069c:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069e:	f104 4460 	add.w	r4, r4, #3758096384	; 0xe0000000
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 80006a8:	f884 2300 	strb.w	r2, [r4, #768]	; 0x300
 80006ac:	bd70      	pop	{r4, r5, r6, pc}
 80006ae:	bf00      	nop
 80006b0:	08003c0c 	.word	0x08003c0c
 80006b4:	e000ed00 	.word	0xe000ed00
 80006b8:	e000ed14 	.word	0xe000ed14

080006bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80006be:	1e04      	subs	r4, r0, #0
 80006c0:	da03      	bge.n	80006ca <HAL_NVIC_EnableIRQ+0xe>
 80006c2:	21ce      	movs	r1, #206	; 0xce
 80006c4:	4806      	ldr	r0, [pc, #24]	; (80006e0 <HAL_NVIC_EnableIRQ+0x24>)
 80006c6:	f002 fed8 	bl	800347a <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006ca:	0962      	lsrs	r2, r4, #5
 80006cc:	2301      	movs	r3, #1
 80006ce:	f004 041f 	and.w	r4, r4, #31
 80006d2:	fa03 f404 	lsl.w	r4, r3, r4
 80006d6:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <HAL_NVIC_EnableIRQ+0x28>)
 80006d8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80006dc:	bd10      	pop	{r4, pc}
 80006de:	bf00      	nop
 80006e0:	08003c0c 	.word	0x08003c0c
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e8:	3801      	subs	r0, #1
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d20a      	bcs.n	8000706 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	21f0      	movs	r1, #240	; 0xf0
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f6:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000714:	2804      	cmp	r0, #4
{
 8000716:	b510      	push	{r4, lr}
 8000718:	4c08      	ldr	r4, [pc, #32]	; (800073c <HAL_SYSTICK_CLKSourceConfig+0x28>)
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 800071a:	d00a      	beq.n	8000732 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 800071c:	b120      	cbz	r0, 8000728 <HAL_SYSTICK_CLKSourceConfig+0x14>
 800071e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8000722:	4807      	ldr	r0, [pc, #28]	; (8000740 <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8000724:	f002 fea9 	bl	800347a <assert_failed>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	f023 0304 	bic.w	r3, r3, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800072e:	6023      	str	r3, [r4, #0]
 8000730:	bd10      	pop	{r4, pc}
 8000732:	6823      	ldr	r3, [r4, #0]
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	e7f9      	b.n	800072e <HAL_SYSTICK_CLKSourceConfig+0x1a>
 800073a:	bf00      	nop
 800073c:	e000e010 	.word	0xe000e010
 8000740:	08003c0c 	.word	0x08003c0c

08000744 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000744:	4770      	bx	lr

08000746 <HAL_SYSTICK_IRQHandler>:
{
 8000746:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000748:	f7ff fffc 	bl	8000744 <HAL_SYSTICK_Callback>
 800074c:	bd08      	pop	{r3, pc}
	...

08000750 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000750:	4ba4      	ldr	r3, [pc, #656]	; (80009e4 <HAL_GPIO_Init+0x294>)
 8000752:	4298      	cmp	r0, r3
{
 8000754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000758:	4604      	mov	r4, r0
 800075a:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800075c:	d02b      	beq.n	80007b6 <HAL_GPIO_Init+0x66>
 800075e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000762:	4298      	cmp	r0, r3
 8000764:	d027      	beq.n	80007b6 <HAL_GPIO_Init+0x66>
 8000766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800076a:	4298      	cmp	r0, r3
 800076c:	d023      	beq.n	80007b6 <HAL_GPIO_Init+0x66>
 800076e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000772:	4298      	cmp	r0, r3
 8000774:	d01f      	beq.n	80007b6 <HAL_GPIO_Init+0x66>
 8000776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800077a:	4298      	cmp	r0, r3
 800077c:	d01b      	beq.n	80007b6 <HAL_GPIO_Init+0x66>
 800077e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000782:	4298      	cmp	r0, r3
 8000784:	d017      	beq.n	80007b6 <HAL_GPIO_Init+0x66>
 8000786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800078a:	4298      	cmp	r0, r3
 800078c:	d013      	beq.n	80007b6 <HAL_GPIO_Init+0x66>
 800078e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000792:	4298      	cmp	r0, r3
 8000794:	d00f      	beq.n	80007b6 <HAL_GPIO_Init+0x66>
 8000796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800079a:	4298      	cmp	r0, r3
 800079c:	d00b      	beq.n	80007b6 <HAL_GPIO_Init+0x66>
 800079e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007a2:	4298      	cmp	r0, r3
 80007a4:	d007      	beq.n	80007b6 <HAL_GPIO_Init+0x66>
 80007a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80007aa:	4298      	cmp	r0, r3
 80007ac:	d003      	beq.n	80007b6 <HAL_GPIO_Init+0x66>
 80007ae:	21c1      	movs	r1, #193	; 0xc1
 80007b0:	488d      	ldr	r0, [pc, #564]	; (80009e8 <HAL_GPIO_Init+0x298>)
 80007b2:	f002 fe62 	bl	800347a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80007b6:	882b      	ldrh	r3, [r5, #0]
 80007b8:	b91b      	cbnz	r3, 80007c2 <HAL_GPIO_Init+0x72>
 80007ba:	21c2      	movs	r1, #194	; 0xc2
 80007bc:	488a      	ldr	r0, [pc, #552]	; (80009e8 <HAL_GPIO_Init+0x298>)
 80007be:	f002 fe5c 	bl	800347a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80007c2:	686b      	ldr	r3, [r5, #4]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d917      	bls.n	80007f8 <HAL_GPIO_Init+0xa8>
 80007c8:	f1a3 0211 	sub.w	r2, r3, #17
 80007cc:	2a01      	cmp	r2, #1
 80007ce:	d913      	bls.n	80007f8 <HAL_GPIO_Init+0xa8>
 80007d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80007d4:	4985      	ldr	r1, [pc, #532]	; (80009ec <HAL_GPIO_Init+0x29c>)
 80007d6:	428a      	cmp	r2, r1
 80007d8:	d00e      	beq.n	80007f8 <HAL_GPIO_Init+0xa8>
 80007da:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80007de:	428b      	cmp	r3, r1
 80007e0:	d00a      	beq.n	80007f8 <HAL_GPIO_Init+0xa8>
 80007e2:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 80007e6:	428a      	cmp	r2, r1
 80007e8:	d006      	beq.n	80007f8 <HAL_GPIO_Init+0xa8>
 80007ea:	4a81      	ldr	r2, [pc, #516]	; (80009f0 <HAL_GPIO_Init+0x2a0>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d003      	beq.n	80007f8 <HAL_GPIO_Init+0xa8>
 80007f0:	21c3      	movs	r1, #195	; 0xc3
 80007f2:	487d      	ldr	r0, [pc, #500]	; (80009e8 <HAL_GPIO_Init+0x298>)
 80007f4:	f002 fe41 	bl	800347a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80007f8:	68ab      	ldr	r3, [r5, #8]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d903      	bls.n	8000806 <HAL_GPIO_Init+0xb6>
 80007fe:	21c4      	movs	r1, #196	; 0xc4
 8000800:	4879      	ldr	r0, [pc, #484]	; (80009e8 <HAL_GPIO_Init+0x298>)
 8000802:	f002 fe3a 	bl	800347a <assert_failed>
{
 8000806:	2600      	movs	r6, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000808:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80009f8 <HAL_GPIO_Init+0x2a8>
    ioposition = ((uint32_t)0x01) << position;
 800080c:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800080e:	682a      	ldr	r2, [r5, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000810:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000814:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 8000818:	454f      	cmp	r7, r9
 800081a:	f040 80c9 	bne.w	80009b0 <HAL_GPIO_Init+0x260>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800081e:	686a      	ldr	r2, [r5, #4]
 8000820:	f022 0210 	bic.w	r2, r2, #16
 8000824:	2a02      	cmp	r2, #2
 8000826:	d118      	bne.n	800085a <HAL_GPIO_Init+0x10a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000828:	692a      	ldr	r2, [r5, #16]
 800082a:	2a0d      	cmp	r2, #13
 800082c:	d905      	bls.n	800083a <HAL_GPIO_Init+0xea>
 800082e:	2a0f      	cmp	r2, #15
 8000830:	d003      	beq.n	800083a <HAL_GPIO_Init+0xea>
 8000832:	21d5      	movs	r1, #213	; 0xd5
 8000834:	486c      	ldr	r0, [pc, #432]	; (80009e8 <HAL_GPIO_Init+0x298>)
 8000836:	f002 fe20 	bl	800347a <assert_failed>
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800083a:	f006 0207 	and.w	r2, r6, #7
        temp = GPIOx->AFR[position >> 3];
 800083e:	08f1      	lsrs	r1, r6, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000840:	0090      	lsls	r0, r2, #2
 8000842:	220f      	movs	r2, #15
 8000844:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8000848:	4082      	lsls	r2, r0
        temp = GPIOx->AFR[position >> 3];
 800084a:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800084c:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000850:	692a      	ldr	r2, [r5, #16]
 8000852:	4082      	lsls	r2, r0
 8000854:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3] = temp;
 8000858:	620a      	str	r2, [r1, #32]
 800085a:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800085e:	f04f 0a03 	mov.w	sl, #3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000862:	686a      	ldr	r2, [r5, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000864:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp = GPIOx->MODER;
 8000868:	6820      	ldr	r0, [r4, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800086a:	f002 0103 	and.w	r1, r2, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086e:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000872:	ea6f 0a0a 	mvn.w	sl, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000876:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087a:	3a01      	subs	r2, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800087c:	ea00 000a 	and.w	r0, r0, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000880:	2a01      	cmp	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000882:	ea41 0100 	orr.w	r1, r1, r0
      GPIOx->MODER = temp;
 8000886:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000888:	d817      	bhi.n	80008ba <HAL_GPIO_Init+0x16a>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800088a:	68ea      	ldr	r2, [r5, #12]
 800088c:	2a03      	cmp	r2, #3
 800088e:	d903      	bls.n	8000898 <HAL_GPIO_Init+0x148>
 8000890:	21e9      	movs	r1, #233	; 0xe9
 8000892:	4855      	ldr	r0, [pc, #340]	; (80009e8 <HAL_GPIO_Init+0x298>)
 8000894:	f002 fdf1 	bl	800347a <assert_failed>
        temp = GPIOx->OSPEEDR; 
 8000898:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2));
 800089a:	68ea      	ldr	r2, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800089c:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008a0:	686b      	ldr	r3, [r5, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 80008a2:	fa02 f20b 	lsl.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2));
 80008aa:	430a      	orrs	r2, r1
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008ac:	40b3      	lsls	r3, r6
        GPIOx->OSPEEDR = temp;
 80008ae:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 80008b0:	6862      	ldr	r2, [r4, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b2:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008b6:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 80008b8:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 80008ba:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008bc:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008be:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008c2:	68ab      	ldr	r3, [r5, #8]
 80008c4:	fa03 f30b 	lsl.w	r3, r3, fp
 80008c8:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 80008cc:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ce:	00c3      	lsls	r3, r0, #3
 80008d0:	d56e      	bpl.n	80009b0 <HAL_GPIO_Init+0x260>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b48      	ldr	r3, [pc, #288]	; (80009f4 <HAL_GPIO_Init+0x2a4>)
 80008d4:	f026 0103 	bic.w	r1, r6, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008d8:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008de:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80008e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008e6:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 80008ea:	645a      	str	r2, [r3, #68]	; 0x44
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008f6:	f006 0303 	and.w	r3, r6, #3
        temp = SYSCFG->EXTICR[position >> 2];
 80008fa:	688a      	ldr	r2, [r1, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008fc:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8000900:	fa0c f30e 	lsl.w	r3, ip, lr
 8000904:	ea22 0c03 	bic.w	ip, r2, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000908:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <HAL_GPIO_Init+0x294>)
 800090a:	429c      	cmp	r4, r3
 800090c:	d057      	beq.n	80009be <HAL_GPIO_Init+0x26e>
 800090e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000912:	429c      	cmp	r4, r3
 8000914:	d055      	beq.n	80009c2 <HAL_GPIO_Init+0x272>
 8000916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800091a:	429c      	cmp	r4, r3
 800091c:	d053      	beq.n	80009c6 <HAL_GPIO_Init+0x276>
 800091e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000922:	429c      	cmp	r4, r3
 8000924:	d051      	beq.n	80009ca <HAL_GPIO_Init+0x27a>
 8000926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800092a:	429c      	cmp	r4, r3
 800092c:	d04f      	beq.n	80009ce <HAL_GPIO_Init+0x27e>
 800092e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000932:	429c      	cmp	r4, r3
 8000934:	d04d      	beq.n	80009d2 <HAL_GPIO_Init+0x282>
 8000936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800093a:	429c      	cmp	r4, r3
 800093c:	d04b      	beq.n	80009d6 <HAL_GPIO_Init+0x286>
 800093e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000942:	429c      	cmp	r4, r3
 8000944:	d049      	beq.n	80009da <HAL_GPIO_Init+0x28a>
 8000946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800094a:	429c      	cmp	r4, r3
 800094c:	d047      	beq.n	80009de <HAL_GPIO_Init+0x28e>
 800094e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000952:	429c      	cmp	r4, r3
 8000954:	bf14      	ite	ne
 8000956:	230a      	movne	r3, #10
 8000958:	2309      	moveq	r3, #9
 800095a:	fa03 f30e 	lsl.w	r3, r3, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800095e:	03c7      	lsls	r7, r0, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000960:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000964:	608b      	str	r3, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
 8000966:	ea6f 0109 	mvn.w	r1, r9
        temp = EXTI->IMR;
 800096a:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 800096e:	bf54      	ite	pl
 8000970:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8000972:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000976:	0383      	lsls	r3, r0, #14
        EXTI->IMR = temp;
 8000978:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->EMR;
 800097c:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
 8000980:	bf54      	ite	pl
 8000982:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8000984:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000988:	02c7      	lsls	r7, r0, #11
        EXTI->EMR = temp;
 800098a:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI->RTSR;
 800098e:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 8000992:	bf54      	ite	pl
 8000994:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8000996:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 800099a:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800099e:	0282      	lsls	r2, r0, #10
        temp = EXTI->FTSR;
 80009a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
 80009a4:	bf54      	ite	pl
 80009a6:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80009a8:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 80009ac:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80009b0:	3601      	adds	r6, #1
 80009b2:	2e10      	cmp	r6, #16
 80009b4:	f47f af2a 	bne.w	800080c <HAL_GPIO_Init+0xbc>
      }
    }
  }
}
 80009b8:	b003      	add	sp, #12
 80009ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009be:	2300      	movs	r3, #0
 80009c0:	e7cb      	b.n	800095a <HAL_GPIO_Init+0x20a>
 80009c2:	2301      	movs	r3, #1
 80009c4:	e7c9      	b.n	800095a <HAL_GPIO_Init+0x20a>
 80009c6:	2302      	movs	r3, #2
 80009c8:	e7c7      	b.n	800095a <HAL_GPIO_Init+0x20a>
 80009ca:	2303      	movs	r3, #3
 80009cc:	e7c5      	b.n	800095a <HAL_GPIO_Init+0x20a>
 80009ce:	2304      	movs	r3, #4
 80009d0:	e7c3      	b.n	800095a <HAL_GPIO_Init+0x20a>
 80009d2:	2305      	movs	r3, #5
 80009d4:	e7c1      	b.n	800095a <HAL_GPIO_Init+0x20a>
 80009d6:	2306      	movs	r3, #6
 80009d8:	e7bf      	b.n	800095a <HAL_GPIO_Init+0x20a>
 80009da:	2307      	movs	r3, #7
 80009dc:	e7bd      	b.n	800095a <HAL_GPIO_Init+0x20a>
 80009de:	2308      	movs	r3, #8
 80009e0:	e7bb      	b.n	800095a <HAL_GPIO_Init+0x20a>
 80009e2:	bf00      	nop
 80009e4:	40020000 	.word	0x40020000
 80009e8:	08003c47 	.word	0x08003c47
 80009ec:	10110000 	.word	0x10110000
 80009f0:	10220000 	.word	0x10220000
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40013c00 	.word	0x40013c00

080009fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80009fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80009fe:	4604      	mov	r4, r0
{
 8000a00:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d073      	beq.n	8000aee <HAL_PCD_Init+0xf2>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8000a06:	6803      	ldr	r3, [r0, #0]
 8000a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a0c:	d006      	beq.n	8000a1c <HAL_PCD_Init+0x20>
 8000a0e:	4a39      	ldr	r2, [pc, #228]	; (8000af4 <HAL_PCD_Init+0xf8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d003      	beq.n	8000a1c <HAL_PCD_Init+0x20>
 8000a14:	2190      	movs	r1, #144	; 0x90
 8000a16:	4838      	ldr	r0, [pc, #224]	; (8000af8 <HAL_PCD_Init+0xfc>)
 8000a18:	f002 fd2f 	bl	800347a <assert_failed>

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a1c:	2303      	movs	r3, #3

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000a1e:	4625      	mov	r5, r4
  HAL_PCD_MspInit(hpcd);
 8000a20:	4620      	mov	r0, r4

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000a22:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000a24:	f884 33b9 	strb.w	r3, [r4, #953]	; 0x3b9
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000a28:	1d27      	adds	r7, r4, #4
  HAL_PCD_MspInit(hpcd);
 8000a2a:	f002 fdd5 	bl	80035d8 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8000a2e:	f855 0b10 	ldr.w	r0, [r5], #16
 8000a32:	f001 fcd2 	bl	80023da <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a42:	f104 0510 	add.w	r5, r4, #16
 8000a46:	e886 0003 	stmia.w	r6, {r0, r1}
 8000a4a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000a4e:	6820      	ldr	r0, [r4, #0]

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8000a50:	2601      	movs	r6, #1
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000a52:	f001 fc81 	bl	8002358 <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000a56:	2100      	movs	r1, #0
 8000a58:	6820      	ldr	r0, [r4, #0]
 8000a5a:	f001 fcc4 	bl	80023e6 <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4623      	mov	r3, r4
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000a62:	4622      	mov	r2, r4
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a64:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8000a66:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8000a6a:	321c      	adds	r2, #28
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000a6c:	8451      	strh	r1, [r2, #34]	; 0x22
 for (i = 0; i < 15 ; i++)
 8000a6e:	3101      	adds	r1, #1
   hpcd->IN_ep[i].is_in = 1;
 8000a70:	7756      	strb	r6, [r2, #29]
 for (i = 0; i < 15 ; i++)
 8000a72:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a74:	77d0      	strb	r0, [r2, #31]
   hpcd->IN_ep[i].maxpacket =  0;
 8000a76:	6250      	str	r0, [r2, #36]	; 0x24
   hpcd->IN_ep[i].xfer_buff = 0;
 8000a78:	6290      	str	r0, [r2, #40]	; 0x28
   hpcd->IN_ep[i].xfer_len = 0;
 8000a7a:	6310      	str	r0, [r2, #48]	; 0x30
 for (i = 0; i < 15 ; i++)
 8000a7c:	d1f3      	bne.n	8000a66 <HAL_PCD_Init+0x6a>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0;
   hpcd->OUT_ep[i].xfer_buff = 0;
   hpcd->OUT_ep[i].xfer_len = 0;

   hpcd->Instance->DIEPTXF[i] = 0;
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f8d4 e000 	ldr.w	lr, [r4]
   hpcd->OUT_ep[i].is_in = 0;
 8000a84:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].num = i;
 8000a86:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->Instance->DIEPTXF[i] = 0;
 8000a8a:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 for (i = 0; i < 15 ; i++)
 8000a90:	3201      	adds	r2, #1
   hpcd->Instance->DIEPTXF[i] = 0;
 8000a92:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->OUT_ep[i].is_in = 0;
 8000a96:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
 for (i = 0; i < 15 ; i++)
 8000a9a:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a9c:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 8000aa0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 8000aa4:	f103 031c 	add.w	r3, r3, #28
   hpcd->OUT_ep[i].xfer_buff = 0;
 8000aa8:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0;
 8000aac:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   hpcd->Instance->DIEPTXF[i] = 0;
 8000ab0:	6041      	str	r1, [r0, #4]
 for (i = 0; i < 15 ; i++)
 8000ab2:	d1e8      	bne.n	8000a86 <HAL_PCD_Init+0x8a>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000ab4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab6:	466e      	mov	r6, sp
 8000ab8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000abc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000abe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ac2:	e886 0003 	stmia.w	r6, {r0, r1}
 8000ac6:	4670      	mov	r0, lr
 8000ac8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000acc:	f001 fccc 	bl	8002468 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	f884 33b9 	strb.w	r3, [r4, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 8000ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d102      	bne.n	8000ae2 <HAL_PCD_Init+0xe6>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8000adc:	4620      	mov	r0, r4
 8000ade:	f000 fc58 	bl	8001392 <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 8000ae2:	6820      	ldr	r0, [r4, #0]
 8000ae4:	f001 ff93 	bl	8002a0e <USB_DevDisconnect>
 return HAL_OK;
 8000ae8:	2000      	movs	r0, #0
}
 8000aea:	b00b      	add	sp, #44	; 0x2c
 8000aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000aee:	2001      	movs	r0, #1
 8000af0:	e7fb      	b.n	8000aea <HAL_PCD_Init+0xee>
 8000af2:	bf00      	nop
 8000af4:	40040000 	.word	0x40040000
 8000af8:	08003c80 	.word	0x08003c80

08000afc <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000afc:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8000b00:	2b01      	cmp	r3, #1
{
 8000b02:	b510      	push	{r4, lr}
 8000b04:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000b06:	d00c      	beq.n	8000b22 <HAL_PCD_Start+0x26>
 8000b08:	2301      	movs	r3, #1
 8000b0a:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 8000b0e:	6800      	ldr	r0, [r0, #0]
 8000b10:	f001 ff71 	bl	80029f6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000b14:	6820      	ldr	r0, [r4, #0]
 8000b16:	f001 fc5a 	bl	80023ce <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8000b20:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000b22:	2002      	movs	r0, #2
}
 8000b24:	bd10      	pop	{r4, pc}
	...

08000b28 <HAL_PCD_IRQHandler>:
  * @brief  Handle PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000b2c:	6807      	ldr	r7, [r0, #0]
{
 8000b2e:	b087      	sub	sp, #28
 8000b30:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0, temp = 0;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 200000000;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000b32:	4638      	mov	r0, r7
 8000b34:	f001 ffa5 	bl	8002a82 <USB_GetMode>
 8000b38:	9002      	str	r0, [sp, #8]
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	f040 8145 	bne.w	8000dca <HAL_PCD_IRQHandler+0x2a2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000b40:	6820      	ldr	r0, [r4, #0]
 8000b42:	f001 ff70 	bl	8002a26 <USB_ReadInterrupts>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	f000 813f 	beq.w	8000dca <HAL_PCD_IRQHandler+0x2a2>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000b4c:	6820      	ldr	r0, [r4, #0]
 8000b4e:	f001 ff6a 	bl	8002a26 <USB_ReadInterrupts>
 8000b52:	0785      	lsls	r5, r0, #30
 8000b54:	d502      	bpl.n	8000b5c <HAL_PCD_IRQHandler+0x34>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	2202      	movs	r2, #2
 8000b5a:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000b5c:	6820      	ldr	r0, [r4, #0]
 8000b5e:	f001 ff62 	bl	8002a26 <USB_ReadInterrupts>
 8000b62:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8000b66:	d00c      	beq.n	8000b82 <HAL_PCD_IRQHandler+0x5a>
 8000b68:	f507 6a30 	add.w	sl, r7, #2816	; 0xb00
    {
      epnum = 0;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000b6c:	6820      	ldr	r0, [r4, #0]
 8000b6e:	f001 ff5e 	bl	8002a2e <USB_ReadDevAllOutEpInterrupt>
 8000b72:	46a3      	mov	fp, r4
 8000b74:	4680      	mov	r8, r0

      while ( ep_intr )
 8000b76:	4656      	mov	r6, sl
      epnum = 0;
 8000b78:	2500      	movs	r5, #0
      while ( ep_intr )
 8000b7a:	f1b8 0f00 	cmp.w	r8, #0
 8000b7e:	f040 8127 	bne.w	8000dd0 <HAL_PCD_IRQHandler+0x2a8>
        epnum++;
        ep_intr >>= 1;
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000b82:	6820      	ldr	r0, [r4, #0]
 8000b84:	f001 ff4f 	bl	8002a26 <USB_ReadInterrupts>
 8000b88:	0342      	lsls	r2, r0, #13
 8000b8a:	d50b      	bpl.n	8000ba4 <HAL_PCD_IRQHandler+0x7c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000b8c:	6820      	ldr	r0, [r4, #0]
 8000b8e:	4626      	mov	r6, r4
 8000b90:	f001 ff55 	bl	8002a3e <USB_ReadDevAllInEpInterrupt>
 8000b94:	f507 6910 	add.w	r9, r7, #2304	; 0x900
 8000b98:	4683      	mov	fp, r0

      epnum = 0;
 8000b9a:	2500      	movs	r5, #0

      while ( ep_intr )
 8000b9c:	f1bb 0f00 	cmp.w	fp, #0
 8000ba0:	f040 8170 	bne.w	8000e84 <HAL_PCD_IRQHandler+0x35c>
        ep_intr >>= 1;
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000ba4:	6820      	ldr	r0, [r4, #0]
 8000ba6:	f001 ff3e 	bl	8002a26 <USB_ReadInterrupts>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	da14      	bge.n	8000bd8 <HAL_PCD_IRQHandler+0xb0>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000bae:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8000bb2:	f023 0301 	bic.w	r3, r3, #1
 8000bb6:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804

      if(hpcd->LPM_State == LPM_L1)
 8000bba:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	f040 81fb 	bne.w	8000fba <HAL_PCD_IRQHandler+0x492>
      {
        hpcd->LPM_State = LPM_L0;
 8000bc4:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000bc6:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8000bc8:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000bcc:	f002 fe5e 	bl	800388c <HAL_PCDEx_LPM_Callback>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8000bd8:	6820      	ldr	r0, [r4, #0]
 8000bda:	f001 ff24 	bl	8002a26 <USB_ReadInterrupts>
 8000bde:	0503      	lsls	r3, r0, #20
 8000be0:	d50a      	bpl.n	8000bf8 <HAL_PCD_IRQHandler+0xd0>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8000be2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000be6:	07de      	lsls	r6, r3, #31
 8000be8:	d502      	bpl.n	8000bf0 <HAL_PCD_IRQHandler+0xc8>
      {

        HAL_PCD_SuspendCallback(hpcd);
 8000bea:	4620      	mov	r0, r4
 8000bec:	f002 fd60 	bl	80036b0 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8000bf8:	6820      	ldr	r0, [r4, #0]
 8000bfa:	f001 ff14 	bl	8002a26 <USB_ReadInterrupts>
 8000bfe:	0100      	lsls	r0, r0, #4
 8000c00:	d513      	bpl.n	8000c2a <HAL_PCD_IRQHandler+0x102>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8000c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8000c0a:	f894 23ec 	ldrb.w	r2, [r4, #1004]	; 0x3ec
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	f040 81d7 	bne.w	8000fc2 <HAL_PCD_IRQHandler+0x49a>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8000c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8000c16:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000c18:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8000c1a:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8000c1e:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8000c22:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000c26:	f002 fe31 	bl	800388c <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8000c2a:	6820      	ldr	r0, [r4, #0]
 8000c2c:	f001 fefb 	bl	8002a26 <USB_ReadInterrupts>
 8000c30:	04c1      	lsls	r1, r0, #19
 8000c32:	d536      	bpl.n	8000ca2 <HAL_PCD_IRQHandler+0x17a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000c34:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 8000c38:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000c3e:	f023 0301 	bic.w	r3, r3, #1
 8000c42:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 8000c44:	f001 fbe6 	bl	8002414 <USB_FlushTxFifo>

      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8000c48:	6860      	ldr	r0, [r4, #4]
 8000c4a:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFF;
 8000c4e:	21ff      	movs	r1, #255	; 0xff
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8000c50:	9a02      	ldr	r2, [sp, #8]
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f040 81b9 	bne.w	8000fca <HAL_PCD_IRQHandler+0x4a2>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFF;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8000c5e:	69f3      	ldr	r3, [r6, #28]
 8000c60:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000c64:	61f3      	str	r3, [r6, #28]

      if(hpcd->Init.use_dedicated_ep1)
 8000c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 81c2 	beq.w	8000ff2 <HAL_PCD_IRQHandler+0x4ca>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8000c6e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 8000c72:	f043 030b 	orr.w	r3, r3, #11
 8000c76:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000c7a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000c7c:	f043 030b 	orr.w	r3, r3, #11
 8000c80:	6473      	str	r3, [r6, #68]	; 0x44
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000c82:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000c86:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000c8a:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000c8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000c90:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8000c92:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8000c96:	f001 ff13 	bl	8002ac0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8000ca2:	6820      	ldr	r0, [r4, #0]
 8000ca4:	f001 febf 	bl	8002a26 <USB_ReadInterrupts>
 8000ca8:	0482      	lsls	r2, r0, #18
 8000caa:	d51c      	bpl.n	8000ce6 <HAL_PCD_IRQHandler+0x1be>
    {
      USB_ActivateSetup(hpcd->Instance);
 8000cac:	6820      	ldr	r0, [r4, #0]
 8000cae:	f001 feec 	bl	8002a8a <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8000cb2:	6820      	ldr	r0, [r4, #0]
 8000cb4:	68c3      	ldr	r3, [r0, #12]
 8000cb6:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000cba:	60c3      	str	r3, [r0, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8000cbc:	f001 fc7a 	bl	80025b4 <USB_GetDevSpeed>
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	f040 819f 	bne.w	8001004 <HAL_PCD_IRQHandler+0x4dc>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 8000cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8000cca:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8000ccc:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 8000cce:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8000cd0:	68d3      	ldr	r3, [r2, #12]
 8000cd2:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8000cd6:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f002 fcd8 	bl	800368e <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000ce6:	6820      	ldr	r0, [r4, #0]
 8000ce8:	f001 fe9d 	bl	8002a26 <USB_ReadInterrupts>
 8000cec:	06c3      	lsls	r3, r0, #27
 8000cee:	d52b      	bpl.n	8000d48 <HAL_PCD_IRQHandler+0x220>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000cf0:	6822      	ldr	r2, [r4, #0]
 8000cf2:	6993      	ldr	r3, [r2, #24]
 8000cf4:	f023 0310 	bic.w	r3, r3, #16
 8000cf8:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8000cfa:	6a3e      	ldr	r6, [r7, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000cfc:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8000d00:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	f040 81de 	bne.w	80010c6 <HAL_PCD_IRQHandler+0x59e>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8000d0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000d0e:	421e      	tst	r6, r3
 8000d10:	d015      	beq.n	8000d3e <HAL_PCD_IRQHandler+0x216>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8000d12:	f04f 081c 	mov.w	r8, #28
 8000d16:	f3c6 160a 	ubfx	r6, r6, #4, #11
 8000d1a:	4638      	mov	r0, r7
 8000d1c:	fb08 4809 	mla	r8, r8, r9, r4
 8000d20:	4632      	mov	r2, r6
 8000d22:	f8d8 1204 	ldr.w	r1, [r8, #516]	; 0x204
 8000d26:	f001 fe13 	bl	8002950 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000d2a:	f8d8 3204 	ldr.w	r3, [r8, #516]	; 0x204
 8000d2e:	4433      	add	r3, r6
 8000d30:	f8c8 3204 	str.w	r3, [r8, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000d34:	f8d8 3210 	ldr.w	r3, [r8, #528]	; 0x210
 8000d38:	441e      	add	r6, r3
 8000d3a:	f8c8 6210 	str.w	r6, [r8, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000d3e:	6822      	ldr	r2, [r4, #0]
 8000d40:	6993      	ldr	r3, [r2, #24]
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8000d48:	6820      	ldr	r0, [r4, #0]
 8000d4a:	f001 fe6c 	bl	8002a26 <USB_ReadInterrupts>
 8000d4e:	0707      	lsls	r7, r0, #28
 8000d50:	d505      	bpl.n	8000d5e <HAL_PCD_IRQHandler+0x236>
    {
      HAL_PCD_SOFCallback(hpcd);
 8000d52:	4620      	mov	r0, r4
 8000d54:	f002 fc97 	bl	8003686 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8000d5e:	6820      	ldr	r0, [r4, #0]
 8000d60:	f001 fe61 	bl	8002a26 <USB_ReadInterrupts>
 8000d64:	02c6      	lsls	r6, r0, #11
 8000d66:	d507      	bpl.n	8000d78 <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8000d68:	b2e9      	uxtb	r1, r5
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	f002 fcc0 	bl	80036f0 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000d78:	6820      	ldr	r0, [r4, #0]
 8000d7a:	f001 fe54 	bl	8002a26 <USB_ReadInterrupts>
 8000d7e:	0280      	lsls	r0, r0, #10
 8000d80:	d507      	bpl.n	8000d92 <HAL_PCD_IRQHandler+0x26a>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8000d82:	b2e9      	uxtb	r1, r5
 8000d84:	4620      	mov	r0, r4
 8000d86:	f002 fcaf 	bl	80036e8 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8000d92:	6820      	ldr	r0, [r4, #0]
 8000d94:	f001 fe47 	bl	8002a26 <USB_ReadInterrupts>
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	d506      	bpl.n	8000daa <HAL_PCD_IRQHandler+0x282>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f002 fcab 	bl	80036f8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8000daa:	6820      	ldr	r0, [r4, #0]
 8000dac:	f001 fe3b 	bl	8002a26 <USB_ReadInterrupts>
 8000db0:	0742      	lsls	r2, r0, #29
 8000db2:	d50a      	bpl.n	8000dca <HAL_PCD_IRQHandler+0x2a2>
    {
      temp = hpcd->Instance->GOTGINT;
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	685d      	ldr	r5, [r3, #4]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8000db8:	076b      	lsls	r3, r5, #29
 8000dba:	d502      	bpl.n	8000dc2 <HAL_PCD_IRQHandler+0x29a>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f002 fc9f 	bl	8003700 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	4315      	orrs	r5, r2
 8000dc8:	605d      	str	r5, [r3, #4]
    }
  }
}
 8000dca:	b007      	add	sp, #28
 8000dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 8000dd0:	f018 0f01 	tst.w	r8, #1
 8000dd4:	d04f      	beq.n	8000e76 <HAL_PCD_IRQHandler+0x34e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000dd6:	b2ea      	uxtb	r2, r5
 8000dd8:	6820      	ldr	r0, [r4, #0]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	9203      	str	r2, [sp, #12]
 8000dde:	f001 fe36 	bl	8002a4e <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000de2:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000de6:	4681      	mov	r9, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000de8:	d029      	beq.n	8000e3e <HAL_PCD_IRQHandler+0x316>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000dea:	2101      	movs	r1, #1
            if (hpcd->Init.dma_enable == 1)
 8000dec:	9a03      	ldr	r2, [sp, #12]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000dee:	60b1      	str	r1, [r6, #8]
            if (hpcd->Init.dma_enable == 1)
 8000df0:	6921      	ldr	r1, [r4, #16]
 8000df2:	2901      	cmp	r1, #1
 8000df4:	d113      	bne.n	8000e1e <HAL_PCD_IRQHandler+0x2f6>
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8000df6:	f8da 1008 	ldr.w	r1, [sl, #8]
 8000dfa:	0408      	lsls	r0, r1, #16
 8000dfc:	d502      	bpl.n	8000e04 <HAL_PCD_IRQHandler+0x2dc>
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8000dfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e02:	60b1      	str	r1, [r6, #8]
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8000e04:	6931      	ldr	r1, [r6, #16]
 8000e06:	f8db 0200 	ldr.w	r0, [fp, #512]	; 0x200
 8000e0a:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8000e0e:	1a41      	subs	r1, r0, r1
 8000e10:	f8cb 1210 	str.w	r1, [fp, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8000e14:	f8db 1204 	ldr.w	r1, [fp, #516]	; 0x204
 8000e18:	4408      	add	r0, r1
 8000e1a:	f8cb 0204 	str.w	r0, [fp, #516]	; 0x204
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4620      	mov	r0, r4
 8000e22:	f002 fc1f 	bl	8003664 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 8000e26:	6921      	ldr	r1, [r4, #16]
 8000e28:	2901      	cmp	r1, #1
 8000e2a:	d108      	bne.n	8000e3e <HAL_PCD_IRQHandler+0x316>
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 8000e2c:	b93d      	cbnz	r5, 8000e3e <HAL_PCD_IRQHandler+0x316>
 8000e2e:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8000e32:	b922      	cbnz	r2, 8000e3e <HAL_PCD_IRQHandler+0x316>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8000e34:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000e38:	6820      	ldr	r0, [r4, #0]
 8000e3a:	f001 fe41 	bl	8002ac0 <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000e3e:	f019 0f08 	tst.w	r9, #8
 8000e42:	d00e      	beq.n	8000e62 <HAL_PCD_IRQHandler+0x33a>
            if (hpcd->Init.dma_enable == 1)
 8000e44:	6922      	ldr	r2, [r4, #16]
 8000e46:	2a01      	cmp	r2, #1
 8000e48:	d106      	bne.n	8000e58 <HAL_PCD_IRQHandler+0x330>
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8000e4a:	f8da 2008 	ldr.w	r2, [sl, #8]
 8000e4e:	0411      	lsls	r1, r2, #16
 8000e50:	d502      	bpl.n	8000e58 <HAL_PCD_IRQHandler+0x330>
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8000e52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e56:	60b2      	str	r2, [r6, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f002 fbfd 	bl	8003658 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000e5e:	2308      	movs	r3, #8
 8000e60:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000e62:	f019 0f10 	tst.w	r9, #16
 8000e66:	d001      	beq.n	8000e6c <HAL_PCD_IRQHandler+0x344>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000e68:	2310      	movs	r3, #16
 8000e6a:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000e6c:	f019 0f20 	tst.w	r9, #32
 8000e70:	d001      	beq.n	8000e76 <HAL_PCD_IRQHandler+0x34e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000e72:	2320      	movs	r3, #32
 8000e74:	60b3      	str	r3, [r6, #8]
        epnum++;
 8000e76:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8000e78:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8000e7c:	3620      	adds	r6, #32
 8000e7e:	f10b 0b1c 	add.w	fp, fp, #28
 8000e82:	e67a      	b.n	8000b7a <HAL_PCD_IRQHandler+0x52>
        if (ep_intr & 0x1) /* In ITR */
 8000e84:	f01b 0f01 	tst.w	fp, #1
 8000e88:	d074      	beq.n	8000f74 <HAL_PCD_IRQHandler+0x44c>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000e8a:	fa5f fa85 	uxtb.w	sl, r5
 8000e8e:	6820      	ldr	r0, [r4, #0]
 8000e90:	4651      	mov	r1, sl
 8000e92:	f001 fde6 	bl	8002a62 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000e96:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000e9a:	4680      	mov	r8, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000e9c:	d020      	beq.n	8000ee0 <HAL_PCD_IRQHandler+0x3b8>
            fifoemptymsk = 0x1 << epnum;
 8000e9e:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000ea0:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000ea4:	4620      	mov	r0, r4
            fifoemptymsk = 0x1 << epnum;
 8000ea6:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000ea8:	ea23 0301 	bic.w	r3, r3, r1
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000eac:	4651      	mov	r1, sl
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000eae:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 8000eb8:	6923      	ldr	r3, [r4, #16]
 8000eba:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8000ebc:	bf01      	itttt	eq
 8000ebe:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8000ec0:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8000ec2:	189b      	addeq	r3, r3, r2
 8000ec4:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8000ec6:	f002 fbd6 	bl	8003676 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8000eca:	6921      	ldr	r1, [r4, #16]
 8000ecc:	2901      	cmp	r1, #1
 8000ece:	d107      	bne.n	8000ee0 <HAL_PCD_IRQHandler+0x3b8>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8000ed0:	b935      	cbnz	r5, 8000ee0 <HAL_PCD_IRQHandler+0x3b8>
 8000ed2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ed4:	b923      	cbnz	r3, 8000ee0 <HAL_PCD_IRQHandler+0x3b8>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8000ed6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8000eda:	6820      	ldr	r0, [r4, #0]
 8000edc:	f001 fdf0 	bl	8002ac0 <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8000ee0:	f018 0f08 	tst.w	r8, #8
 8000ee4:	d002      	beq.n	8000eec <HAL_PCD_IRQHandler+0x3c4>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8000eec:	f018 0f10 	tst.w	r8, #16
 8000ef0:	d002      	beq.n	8000ef8 <HAL_PCD_IRQHandler+0x3d0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8000ef2:	2310      	movs	r3, #16
 8000ef4:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8000ef8:	f018 0f40 	tst.w	r8, #64	; 0x40
 8000efc:	d002      	beq.n	8000f04 <HAL_PCD_IRQHandler+0x3dc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8000efe:	2340      	movs	r3, #64	; 0x40
 8000f00:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8000f04:	f018 0f02 	tst.w	r8, #2
 8000f08:	d002      	beq.n	8000f10 <HAL_PCD_IRQHandler+0x3e8>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8000f10:	f018 0f80 	tst.w	r8, #128	; 0x80
 8000f14:	d02e      	beq.n	8000f74 <HAL_PCD_IRQHandler+0x44c>
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f16:	6823      	ldr	r3, [r4, #0]
  int32_t len = 0;
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8000f18:	6d32      	ldr	r2, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f1a:	9303      	str	r3, [sp, #12]
  len = ep->xfer_len - ep->xfer_count;
 8000f1c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8000f1e:	eba3 0802 	sub.w	r8, r3, r2
 8000f22:	6c33      	ldr	r3, [r6, #64]	; 0x40
  {
    len = ep->maxpacket;
  }


  len32b = (len + 3) / 4;
 8000f24:	2204      	movs	r2, #4
 8000f26:	4598      	cmp	r8, r3
 8000f28:	bf28      	it	cs
 8000f2a:	4698      	movcs	r8, r3
 8000f2c:	f108 0303 	add.w	r3, r8, #3
 8000f30:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f34:	9304      	str	r3, [sp, #16]

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000f36:	9b03      	ldr	r3, [sp, #12]
 8000f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8000f3c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8000f40:	9305      	str	r3, [sp, #20]
 8000f42:	9b05      	ldr	r3, [sp, #20]
 8000f44:	9a04      	ldr	r2, [sp, #16]
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d904      	bls.n	8000f58 <HAL_PCD_IRQHandler+0x430>
          ep->xfer_count < ep->xfer_len &&
 8000f4e:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8000f50:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d900      	bls.n	8000f58 <HAL_PCD_IRQHandler+0x430>
          ep->xfer_count < ep->xfer_len &&
 8000f56:	b9a3      	cbnz	r3, 8000f82 <HAL_PCD_IRQHandler+0x45a>

    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }

  if(len <= 0)
 8000f58:	f1b8 0f00 	cmp.w	r8, #0
 8000f5c:	dc0a      	bgt.n	8000f74 <HAL_PCD_IRQHandler+0x44c>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000f5e:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 8000f60:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000f62:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
    fifoemptymsk = 0x1 << epnum;
 8000f66:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8000f68:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8000f6c:	ea23 0302 	bic.w	r3, r3, r2
 8000f70:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 8000f74:	3501      	adds	r5, #1
        ep_intr >>= 1;
 8000f76:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8000f7a:	361c      	adds	r6, #28
 8000f7c:	f109 0920 	add.w	r9, r9, #32
 8000f80:	e60c      	b.n	8000b9c <HAL_PCD_IRQHandler+0x74>
    len = ep->xfer_len - ep->xfer_count;
 8000f82:	eba3 0802 	sub.w	r8, r3, r2
 8000f86:	6c33      	ldr	r3, [r6, #64]	; 0x40
    len32b = (len + 3) / 4;
 8000f88:	2204      	movs	r2, #4
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 8000f8a:	9803      	ldr	r0, [sp, #12]
 8000f8c:	4598      	cmp	r8, r3
 8000f8e:	bf28      	it	cs
 8000f90:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 8000f92:	f108 0303 	add.w	r3, r8, #3
 8000f96:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f9a:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 8000f9c:	4652      	mov	r2, sl
 8000f9e:	7c23      	ldrb	r3, [r4, #16]
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	fa1f f388 	uxth.w	r3, r8
 8000fa6:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8000fa8:	f001 fbfb 	bl	80027a2 <USB_WritePacket>
    ep->xfer_buff  += len;
 8000fac:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8000fae:	4443      	add	r3, r8
 8000fb0:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8000fb2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000fb4:	4443      	add	r3, r8
 8000fb6:	6533      	str	r3, [r6, #80]	; 0x50
 8000fb8:	e7c3      	b.n	8000f42 <HAL_PCD_IRQHandler+0x41a>
        HAL_PCD_ResumeCallback(hpcd);
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f002 fb90 	bl	80036e0 <HAL_PCD_ResumeCallback>
 8000fc0:	e606      	b.n	8000bd0 <HAL_PCD_IRQHandler+0xa8>
        HAL_PCD_SuspendCallback(hpcd);
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f002 fb74 	bl	80036b0 <HAL_PCD_SuspendCallback>
 8000fc8:	e62f      	b.n	8000c2a <HAL_PCD_IRQHandler+0x102>
        USBx_INEP(i)->DIEPINT = 0xFF;
 8000fca:	6099      	str	r1, [r3, #8]
 8000fcc:	3320      	adds	r3, #32
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8000fce:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8000fd2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000fd6:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 8000fda:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8000fde:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8000fe2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000fe6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8000fea:	9a02      	ldr	r2, [sp, #8]
 8000fec:	3201      	adds	r2, #1
 8000fee:	9202      	str	r2, [sp, #8]
 8000ff0:	e62e      	b.n	8000c50 <HAL_PCD_IRQHandler+0x128>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 8000ff2:	6973      	ldr	r3, [r6, #20]
 8000ff4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8000ff8:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8000ffa:	6933      	ldr	r3, [r6, #16]
 8000ffc:	f043 030b 	orr.w	r3, r3, #11
 8001000:	6133      	str	r3, [r6, #16]
 8001002:	e63e      	b.n	8000c82 <HAL_PCD_IRQHandler+0x15a>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001004:	2303      	movs	r3, #3
 8001006:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 8001008:	2340      	movs	r3, #64	; 0x40
 800100a:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 800100c:	f000 fd4a 	bl	8001aa4 <HAL_RCC_GetHCLKFreq>
		if((hclk >= 14200000)&&(hclk < 15000000))
 8001010:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <HAL_PCD_IRQHandler+0x5c0>)
 8001012:	4a36      	ldr	r2, [pc, #216]	; (80010ec <HAL_PCD_IRQHandler+0x5c4>)
 8001014:	4403      	add	r3, r0
 8001016:	4293      	cmp	r3, r2
 8001018:	6823      	ldr	r3, [r4, #0]
 800101a:	d804      	bhi.n	8001026 <HAL_PCD_IRQHandler+0x4fe>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	e658      	b.n	8000cd8 <HAL_PCD_IRQHandler+0x1b0>
        else if((hclk >= 15000000)&&(hclk < 16000000))
 8001026:	4a32      	ldr	r2, [pc, #200]	; (80010f0 <HAL_PCD_IRQHandler+0x5c8>)
 8001028:	4932      	ldr	r1, [pc, #200]	; (80010f4 <HAL_PCD_IRQHandler+0x5cc>)
 800102a:	4402      	add	r2, r0
 800102c:	428a      	cmp	r2, r1
 800102e:	d803      	bhi.n	8001038 <HAL_PCD_IRQHandler+0x510>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001036:	e7f4      	b.n	8001022 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 16000000)&&(hclk < 17200000))
 8001038:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 800103c:	492e      	ldr	r1, [pc, #184]	; (80010f8 <HAL_PCD_IRQHandler+0x5d0>)
 800103e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8001042:	428a      	cmp	r2, r1
 8001044:	d803      	bhi.n	800104e <HAL_PCD_IRQHandler+0x526>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 800104c:	e7e9      	b.n	8001022 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 17200000)&&(hclk < 18500000))
 800104e:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8001052:	492a      	ldr	r1, [pc, #168]	; (80010fc <HAL_PCD_IRQHandler+0x5d4>)
 8001054:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8001058:	428a      	cmp	r2, r1
 800105a:	d803      	bhi.n	8001064 <HAL_PCD_IRQHandler+0x53c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001062:	e7de      	b.n	8001022 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 18500000)&&(hclk < 20000000))
 8001064:	4a26      	ldr	r2, [pc, #152]	; (8001100 <HAL_PCD_IRQHandler+0x5d8>)
 8001066:	4927      	ldr	r1, [pc, #156]	; (8001104 <HAL_PCD_IRQHandler+0x5dc>)
 8001068:	4402      	add	r2, r0
 800106a:	428a      	cmp	r2, r1
 800106c:	d803      	bhi.n	8001076 <HAL_PCD_IRQHandler+0x54e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 800106e:	68da      	ldr	r2, [r3, #12]
 8001070:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8001074:	e7d5      	b.n	8001022 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 20000000)&&(hclk < 21800000))
 8001076:	4a24      	ldr	r2, [pc, #144]	; (8001108 <HAL_PCD_IRQHandler+0x5e0>)
 8001078:	4924      	ldr	r1, [pc, #144]	; (800110c <HAL_PCD_IRQHandler+0x5e4>)
 800107a:	4402      	add	r2, r0
 800107c:	428a      	cmp	r2, r1
 800107e:	d803      	bhi.n	8001088 <HAL_PCD_IRQHandler+0x560>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001086:	e7cc      	b.n	8001022 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 21800000)&&(hclk < 24000000))
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <HAL_PCD_IRQHandler+0x5e8>)
 800108a:	4922      	ldr	r1, [pc, #136]	; (8001114 <HAL_PCD_IRQHandler+0x5ec>)
 800108c:	4402      	add	r2, r0
 800108e:	428a      	cmp	r2, r1
 8001090:	d803      	bhi.n	800109a <HAL_PCD_IRQHandler+0x572>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001098:	e7c3      	b.n	8001022 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 24000000)&&(hclk < 27700000))
 800109a:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 800109e:	491e      	ldr	r1, [pc, #120]	; (8001118 <HAL_PCD_IRQHandler+0x5f0>)
 80010a0:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80010a4:	428a      	cmp	r2, r1
 80010a6:	d803      	bhi.n	80010b0 <HAL_PCD_IRQHandler+0x588>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010ae:	e7b8      	b.n	8001022 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 27700000)&&(hclk < 32000000))
 80010b0:	4a1a      	ldr	r2, [pc, #104]	; (800111c <HAL_PCD_IRQHandler+0x5f4>)
 80010b2:	491b      	ldr	r1, [pc, #108]	; (8001120 <HAL_PCD_IRQHandler+0x5f8>)
 80010b4:	4402      	add	r2, r0
 80010b6:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	bf94      	ite	ls
 80010bc:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80010c0:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 80010c4:	e7ad      	b.n	8001022 <HAL_PCD_IRQHandler+0x4fa>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	f47f ae39 	bne.w	8000d3e <HAL_PCD_IRQHandler+0x216>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80010cc:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 80010d0:	2208      	movs	r2, #8
 80010d2:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 80010d6:	4638      	mov	r0, r7
 80010d8:	f001 fc3a 	bl	8002950 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80010dc:	fb08 4809 	mla	r8, r8, r9, r4
 80010e0:	f3c6 160a 	ubfx	r6, r6, #4, #11
 80010e4:	e626      	b.n	8000d34 <HAL_PCD_IRQHandler+0x20c>
 80010e6:	bf00      	nop
 80010e8:	ff275340 	.word	0xff275340
 80010ec:	000c34ff 	.word	0x000c34ff
 80010f0:	ff1b1e40 	.word	0xff1b1e40
 80010f4:	000f423f 	.word	0x000f423f
 80010f8:	00124f7f 	.word	0x00124f7f
 80010fc:	0013d61f 	.word	0x0013d61f
 8001100:	fee5b660 	.word	0xfee5b660
 8001104:	0016e35f 	.word	0x0016e35f
 8001108:	feced300 	.word	0xfeced300
 800110c:	001b773f 	.word	0x001b773f
 8001110:	feb35bc0 	.word	0xfeb35bc0
 8001114:	002191bf 	.word	0x002191bf
 8001118:	0038751f 	.word	0x0038751f
 800111c:	fe5954e0 	.word	0xfe5954e0
 8001120:	00419cdf 	.word	0x00419cdf

08001124 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001124:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001128:	2b01      	cmp	r3, #1
{
 800112a:	b510      	push	{r4, lr}
 800112c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800112e:	d009      	beq.n	8001144 <HAL_PCD_SetAddress+0x20>
 8001130:	2301      	movs	r3, #1
 8001132:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8001136:	6800      	ldr	r0, [r0, #0]
 8001138:	f001 fc4d 	bl	80029d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800113c:	2000      	movs	r0, #0
 800113e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001142:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001144:	2002      	movs	r0, #2
}
 8001146:	bd10      	pop	{r4, pc}

08001148 <HAL_PCD_EP_Open>:
{
 8001148:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 800114a:	b24e      	sxtb	r6, r1
{
 800114c:	4604      	mov	r4, r0
 800114e:	251c      	movs	r5, #28
 8001150:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  if ((ep_addr & 0x80) == 0x80)
 8001154:	2e00      	cmp	r6, #0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001156:	bfb8      	it	lt
 8001158:	fb05 4100 	mlalt	r1, r5, r0, r4
  ep->num   = ep_addr & 0x7F;
 800115c:	b2c0      	uxtb	r0, r0
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800115e:	bfa8      	it	ge
 8001160:	fb05 4101 	mlage	r1, r5, r1, r4
  ep->is_in = (0x80 & ep_addr) != 0;
 8001164:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001168:	bfb4      	ite	lt
 800116a:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800116c:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  if (ep->is_in)
 8001170:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 8001172:	bfb8      	it	lt
 8001174:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 8001176:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8001178:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0;
 800117a:	bf08      	it	eq
 800117c:	2300      	moveq	r3, #0
  ep->num   = ep_addr & 0x7F;
 800117e:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001180:	704d      	strb	r5, [r1, #1]
    ep->data_pid_start = 0;
 8001182:	bf08      	it	eq
 8001184:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001186:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 800118a:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd);
 800118c:	2b01      	cmp	r3, #1
 800118e:	d009      	beq.n	80011a4 <HAL_PCD_EP_Open+0x5c>
 8001190:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001192:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001194:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001198:	f001 fa27 	bl	80025ea <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800119c:	2000      	movs	r0, #0
 800119e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 80011a2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80011a4:	2002      	movs	r0, #2
}
 80011a6:	bd70      	pop	{r4, r5, r6, pc}

080011a8 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 80011a8:	b24b      	sxtb	r3, r1
 80011aa:	221c      	movs	r2, #28
 80011ac:	2b00      	cmp	r3, #0
  ep->is_in = (0x80 & ep_addr) != 0;
 80011ae:	ea4f 73d3 	mov.w	r3, r3, lsr #31
{
 80011b2:	b510      	push	{r4, lr}
 80011b4:	4604      	mov	r4, r0
 80011b6:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80011ba:	bfab      	itete	ge
 80011bc:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80011c0:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80011c4:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80011c8:	3138      	addlt	r1, #56	; 0x38
  ep->num   = ep_addr & 0x7F;
 80011ca:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80011cc:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80011ce:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d009      	beq.n	80011ea <HAL_PCD_EP_Close+0x42>
 80011d6:	2301      	movs	r3, #1
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80011d8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80011da:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80011de:	f001 fa42 	bl	8002666 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80011e8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80011ea:	2002      	movs	r0, #2
}
 80011ec:	bd10      	pop	{r4, pc}

080011ee <HAL_PCD_EP_Receive>:
{
 80011ee:	b538      	push	{r3, r4, r5, lr}
 80011f0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80011f4:	241c      	movs	r4, #28
 80011f6:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80011fa:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80011fe:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8001202:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0;
 8001206:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8001208:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0;
 800120c:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0;
 8001210:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8001214:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1)
 8001218:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800121a:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1)
 800121c:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800121e:	bf08      	it	eq
 8001220:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 8001224:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8001226:	b91d      	cbnz	r5, 8001230 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001228:	f001 fa43 	bl	80026b2 <USB_EP0StartXfer>
}
 800122c:	2000      	movs	r0, #0
 800122e:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001230:	f001 faca 	bl	80027c8 <USB_EPStartXfer>
 8001234:	e7fa      	b.n	800122c <HAL_PCD_EP_Receive+0x3e>

08001236 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001236:	231c      	movs	r3, #28
 8001238:	f001 010f 	and.w	r1, r1, #15
 800123c:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001240:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 8001244:	4770      	bx	lr

08001246 <HAL_PCD_EP_Transmit>:
{
 8001246:	b538      	push	{r3, r4, r5, lr}
 8001248:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800124c:	241c      	movs	r4, #28
 800124e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8001252:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001256:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 8001258:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0;
 800125a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800125c:	6462      	str	r2, [r4, #68]	; 0x44
  ep->xfer_count = 0;
 800125e:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1;
 8001260:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7F;
 8001262:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  ep->is_in = 1;
 8001266:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  if (hpcd->Init.dma_enable == 1)
 800126a:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 800126c:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1)
 800126e:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8001270:	bf08      	it	eq
 8001272:	64a2      	streq	r2, [r4, #72]	; 0x48
 8001274:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0)
 8001276:	b91d      	cbnz	r5, 8001280 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001278:	f001 fa1b 	bl	80026b2 <USB_EP0StartXfer>
}
 800127c:	2000      	movs	r0, #0
 800127e:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001280:	f001 faa2 	bl	80027c8 <USB_EPStartXfer>
 8001284:	e7fa      	b.n	800127c <HAL_PCD_EP_Transmit+0x36>

08001286 <HAL_PCD_EP_SetStall>:
{
 8001286:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8001288:	f001 020f 	and.w	r2, r1, #15
 800128c:	6843      	ldr	r3, [r0, #4]
{
 800128e:	4604      	mov	r4, r0
  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8001290:	429a      	cmp	r2, r3
 8001292:	d82a      	bhi.n	80012ea <HAL_PCD_EP_SetStall+0x64>
  if ((0x80 & ep_addr) == 0x80)
 8001294:	b24b      	sxtb	r3, r1
 8001296:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800129a:	221c      	movs	r2, #28
 800129c:	2b00      	cmp	r3, #0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800129e:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80012a2:	bfb8      	it	lt
 80012a4:	fb02 0105 	mlalt	r1, r2, r5, r0
  ep->num   = ep_addr & 0x7F;
 80012a8:	b2ed      	uxtb	r5, r5
    ep = &hpcd->OUT_ep[ep_addr];
 80012aa:	bfa8      	it	ge
 80012ac:	fb02 0101 	mlage	r1, r2, r1, r0
  ep->is_stall = 1;
 80012b0:	f04f 0201 	mov.w	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80012b4:	bfb4      	ite	lt
 80012b6:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 80012b8:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1;
 80012bc:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80012be:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80012c0:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80012c2:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d011      	beq.n	80012ee <HAL_PCD_EP_SetStall+0x68>
 80012ca:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 80012ce:	6800      	ldr	r0, [r0, #0]
 80012d0:	f001 fb4e 	bl	8002970 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80012d4:	b92d      	cbnz	r5, 80012e2 <HAL_PCD_EP_SetStall+0x5c>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80012d6:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80012da:	7c21      	ldrb	r1, [r4, #16]
 80012dc:	6820      	ldr	r0, [r4, #0]
 80012de:	f001 fbef 	bl	8002ac0 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80012e8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80012ea:	2001      	movs	r0, #1
 80012ec:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80012ee:	2002      	movs	r0, #2
}
 80012f0:	bd38      	pop	{r3, r4, r5, pc}

080012f2 <HAL_PCD_EP_ClrStall>:
{
 80012f2:	b538      	push	{r3, r4, r5, lr}
  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 80012f4:	f001 020f 	and.w	r2, r1, #15
 80012f8:	6843      	ldr	r3, [r0, #4]
{
 80012fa:	4605      	mov	r5, r0
  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d820      	bhi.n	8001342 <HAL_PCD_EP_ClrStall+0x50>
  if ((0x80 & ep_addr) == 0x80)
 8001300:	b24b      	sxtb	r3, r1
 8001302:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8001306:	221c      	movs	r2, #28
  ep->is_stall = 0;
 8001308:	2400      	movs	r4, #0
  if ((0x80 & ep_addr) == 0x80)
 800130a:	2b00      	cmp	r3, #0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800130c:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001310:	bfb5      	itete	lt
 8001312:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001316:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800131a:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 800131c:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 0;
 8001320:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001322:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001324:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8001326:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 800132a:	2b01      	cmp	r3, #1
 800132c:	d00b      	beq.n	8001346 <HAL_PCD_EP_ClrStall+0x54>
 800132e:	2301      	movs	r3, #1
  USB_EPClearStall(hpcd->Instance , ep);
 8001330:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8001332:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001336:	f001 fb34 	bl	80029a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800133a:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 800133e:	4620      	mov	r0, r4
 8001340:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001342:	2001      	movs	r0, #1
 8001344:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001346:	2002      	movs	r0, #2
}
 8001348:	bd38      	pop	{r3, r4, r5, pc}

0800134a <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800134a:	6800      	ldr	r0, [r0, #0]
{
 800134c:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800134e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 8001350:	b921      	cbnz	r1, 800135c <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8001352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001356:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
  }
  
  return HAL_OK;
}
 8001358:	2000      	movs	r0, #0
 800135a:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800135c:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 800135e:	2500      	movs	r5, #0
 8001360:	1e4e      	subs	r6, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001362:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 8001366:	b2ec      	uxtb	r4, r5
 8001368:	3501      	adds	r5, #1
 800136a:	42b4      	cmp	r4, r6
 800136c:	db06      	blt.n	800137c <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 800136e:	313f      	adds	r1, #63	; 0x3f
 8001370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001374:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001378:	6043      	str	r3, [r0, #4]
 800137a:	e7ed      	b.n	8001358 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800137c:	3440      	adds	r4, #64	; 0x40
 800137e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8001382:	6864      	ldr	r4, [r4, #4]
 8001384:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8001388:	e7ed      	b.n	8001366 <HAL_PCDEx_SetTxFiFo+0x1c>

0800138a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800138a:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 800138c:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800138e:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001390:	4770      	bx	lr

08001392 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
  
  hpcd->lpm_active = ENABLE;
 8001392:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001394:	6802      	ldr	r2, [r0, #0]
{
 8001396:	4603      	mov	r3, r0
  hpcd->lpm_active = ENABLE;
 8001398:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 800139c:	2000      	movs	r0, #0
 800139e:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80013a2:	6993      	ldr	r3, [r2, #24]
 80013a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013a8:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80013aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	f043 0303 	orr.w	r3, r3, #3
 80013b4:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 80013b6:	4770      	bx	lr

080013b8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80013ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80013bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013be:	4c19      	ldr	r4, [pc, #100]	; (8001424 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d8:	f7ff f8f2 	bl	80005c0 <HAL_GetTick>
 80013dc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013de:	6863      	ldr	r3, [r4, #4]
 80013e0:	03da      	lsls	r2, r3, #15
 80013e2:	d50c      	bpl.n	80013fe <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ea:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013ec:	f7ff f8e8 	bl	80005c0 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013f0:	4c0c      	ldr	r4, [pc, #48]	; (8001424 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80013f2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013f4:	6863      	ldr	r3, [r4, #4]
 80013f6:	039b      	lsls	r3, r3, #14
 80013f8:	d50a      	bpl.n	8001410 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80013fa:	2000      	movs	r0, #0
 80013fc:	e006      	b.n	800140c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013fe:	f7ff f8df 	bl	80005c0 <HAL_GetTick>
 8001402:	1b40      	subs	r0, r0, r5
 8001404:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001408:	d9e9      	bls.n	80013de <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800140a:	2003      	movs	r0, #3
}
 800140c:	b003      	add	sp, #12
 800140e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001410:	f7ff f8d6 	bl	80005c0 <HAL_GetTick>
 8001414:	1b40      	subs	r0, r0, r5
 8001416:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800141a:	d9eb      	bls.n	80013f4 <HAL_PWREx_EnableOverDrive+0x3c>
 800141c:	e7f5      	b.n	800140a <HAL_PWREx_EnableOverDrive+0x52>
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800142c:	4604      	mov	r4, r0
 800142e:	b918      	cbnz	r0, 8001438 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001430:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001432:	b002      	add	sp, #8
 8001434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001438:	6803      	ldr	r3, [r0, #0]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	d904      	bls.n	8001448 <HAL_RCC_OscConfig+0x20>
 800143e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8001442:	48a5      	ldr	r0, [pc, #660]	; (80016d8 <HAL_RCC_OscConfig+0x2b0>)
 8001444:	f002 f819 	bl	800347a <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	07d8      	lsls	r0, r3, #31
 800144c:	d418      	bmi.n	8001480 <HAL_RCC_OscConfig+0x58>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	0799      	lsls	r1, r3, #30
 8001452:	d472      	bmi.n	800153a <HAL_RCC_OscConfig+0x112>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	0719      	lsls	r1, r3, #28
 8001458:	f100 80c8 	bmi.w	80015ec <HAL_RCC_OscConfig+0x1c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	075a      	lsls	r2, r3, #29
 8001460:	f100 80f1 	bmi.w	8001646 <HAL_RCC_OscConfig+0x21e>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001464:	69a3      	ldr	r3, [r4, #24]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d904      	bls.n	8001474 <HAL_RCC_OscConfig+0x4c>
 800146a:	f240 215b 	movw	r1, #603	; 0x25b
 800146e:	489a      	ldr	r0, [pc, #616]	; (80016d8 <HAL_RCC_OscConfig+0x2b0>)
 8001470:	f002 f803 	bl	800347a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001474:	69a2      	ldr	r2, [r4, #24]
 8001476:	2a00      	cmp	r2, #0
 8001478:	f040 8160 	bne.w	800173c <HAL_RCC_OscConfig+0x314>
  return HAL_OK;
 800147c:	2000      	movs	r0, #0
 800147e:	e7d8      	b.n	8001432 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001480:	6863      	ldr	r3, [r4, #4]
 8001482:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8001486:	d007      	beq.n	8001498 <HAL_RCC_OscConfig+0x70>
 8001488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800148c:	d004      	beq.n	8001498 <HAL_RCC_OscConfig+0x70>
 800148e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8001492:	4891      	ldr	r0, [pc, #580]	; (80016d8 <HAL_RCC_OscConfig+0x2b0>)
 8001494:	f001 fff1 	bl	800347a <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001498:	4b90      	ldr	r3, [pc, #576]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	f002 020c 	and.w	r2, r2, #12
 80014a0:	2a04      	cmp	r2, #4
 80014a2:	d007      	beq.n	80014b4 <HAL_RCC_OscConfig+0x8c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	f002 020c 	and.w	r2, r2, #12
 80014aa:	2a08      	cmp	r2, #8
 80014ac:	d10a      	bne.n	80014c4 <HAL_RCC_OscConfig+0x9c>
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	025a      	lsls	r2, r3, #9
 80014b2:	d507      	bpl.n	80014c4 <HAL_RCC_OscConfig+0x9c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b89      	ldr	r3, [pc, #548]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	039b      	lsls	r3, r3, #14
 80014ba:	d5c8      	bpl.n	800144e <HAL_RCC_OscConfig+0x26>
 80014bc:	6863      	ldr	r3, [r4, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1c5      	bne.n	800144e <HAL_RCC_OscConfig+0x26>
 80014c2:	e7b5      	b.n	8001430 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c4:	6863      	ldr	r3, [r4, #4]
 80014c6:	4d85      	ldr	r5, [pc, #532]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014cc:	d111      	bne.n	80014f2 <HAL_RCC_OscConfig+0xca>
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014d6:	f7ff f873 	bl	80005c0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4d80      	ldr	r5, [pc, #512]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
        tickstart = HAL_GetTick();
 80014dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	682b      	ldr	r3, [r5, #0]
 80014e0:	039f      	lsls	r7, r3, #14
 80014e2:	d4b4      	bmi.n	800144e <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff f86c 	bl	80005c0 <HAL_GetTick>
 80014e8:	1b80      	subs	r0, r0, r6
 80014ea:	2864      	cmp	r0, #100	; 0x64
 80014ec:	d9f7      	bls.n	80014de <HAL_RCC_OscConfig+0xb6>
            return HAL_TIMEOUT;
 80014ee:	2003      	movs	r0, #3
 80014f0:	e79f      	b.n	8001432 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f2:	b99b      	cbnz	r3, 800151c <HAL_RCC_OscConfig+0xf4>
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fa:	602b      	str	r3, [r5, #0]
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001502:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001504:	f7ff f85c 	bl	80005c0 <HAL_GetTick>
 8001508:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	682b      	ldr	r3, [r5, #0]
 800150c:	0398      	lsls	r0, r3, #14
 800150e:	d59e      	bpl.n	800144e <HAL_RCC_OscConfig+0x26>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff f856 	bl	80005c0 <HAL_GetTick>
 8001514:	1b80      	subs	r0, r0, r6
 8001516:	2864      	cmp	r0, #100	; 0x64
 8001518:	d9f7      	bls.n	800150a <HAL_RCC_OscConfig+0xe2>
 800151a:	e7e8      	b.n	80014ee <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	d103      	bne.n	800152c <HAL_RCC_OscConfig+0x104>
 8001524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001528:	602b      	str	r3, [r5, #0]
 800152a:	e7d0      	b.n	80014ce <HAL_RCC_OscConfig+0xa6>
 800152c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001530:	602b      	str	r3, [r5, #0]
 8001532:	682b      	ldr	r3, [r5, #0]
 8001534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001538:	e7cc      	b.n	80014d4 <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800153a:	68e3      	ldr	r3, [r4, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d904      	bls.n	800154a <HAL_RCC_OscConfig+0x122>
 8001540:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001544:	4864      	ldr	r0, [pc, #400]	; (80016d8 <HAL_RCC_OscConfig+0x2b0>)
 8001546:	f001 ff98 	bl	800347a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800154a:	6923      	ldr	r3, [r4, #16]
 800154c:	2b1f      	cmp	r3, #31
 800154e:	d904      	bls.n	800155a <HAL_RCC_OscConfig+0x132>
 8001550:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001554:	4860      	ldr	r0, [pc, #384]	; (80016d8 <HAL_RCC_OscConfig+0x2b0>)
 8001556:	f001 ff90 	bl	800347a <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800155a:	4b60      	ldr	r3, [pc, #384]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	f012 0f0c 	tst.w	r2, #12
 8001562:	d007      	beq.n	8001574 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	f002 020c 	and.w	r2, r2, #12
 800156a:	2a08      	cmp	r2, #8
 800156c:	d112      	bne.n	8001594 <HAL_RCC_OscConfig+0x16c>
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	0259      	lsls	r1, r3, #9
 8001572:	d40f      	bmi.n	8001594 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001574:	4b59      	ldr	r3, [pc, #356]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	0792      	lsls	r2, r2, #30
 800157a:	d503      	bpl.n	8001584 <HAL_RCC_OscConfig+0x15c>
 800157c:	68e2      	ldr	r2, [r4, #12]
 800157e:	2a01      	cmp	r2, #1
 8001580:	f47f af56 	bne.w	8001430 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	6921      	ldr	r1, [r4, #16]
 8001588:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800158c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001590:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	e75f      	b.n	8001454 <HAL_RCC_OscConfig+0x2c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001594:	68e3      	ldr	r3, [r4, #12]
 8001596:	4d51      	ldr	r5, [pc, #324]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 8001598:	b1bb      	cbz	r3, 80015ca <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 800159a:	682b      	ldr	r3, [r5, #0]
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015a2:	f7ff f80d 	bl	80005c0 <HAL_GetTick>
 80015a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	079f      	lsls	r7, r3, #30
 80015ac:	d507      	bpl.n	80015be <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	6922      	ldr	r2, [r4, #16]
 80015b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015ba:	602b      	str	r3, [r5, #0]
 80015bc:	e74a      	b.n	8001454 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015be:	f7fe ffff 	bl	80005c0 <HAL_GetTick>
 80015c2:	1b80      	subs	r0, r0, r6
 80015c4:	2802      	cmp	r0, #2
 80015c6:	d9ef      	bls.n	80015a8 <HAL_RCC_OscConfig+0x180>
 80015c8:	e791      	b.n	80014ee <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_HSI_DISABLE();
 80015ca:	682b      	ldr	r3, [r5, #0]
 80015cc:	f023 0301 	bic.w	r3, r3, #1
 80015d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015d2:	f7fe fff5 	bl	80005c0 <HAL_GetTick>
 80015d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d8:	682b      	ldr	r3, [r5, #0]
 80015da:	0798      	lsls	r0, r3, #30
 80015dc:	f57f af3a 	bpl.w	8001454 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e0:	f7fe ffee 	bl	80005c0 <HAL_GetTick>
 80015e4:	1b80      	subs	r0, r0, r6
 80015e6:	2802      	cmp	r0, #2
 80015e8:	d9f6      	bls.n	80015d8 <HAL_RCC_OscConfig+0x1b0>
 80015ea:	e780      	b.n	80014ee <HAL_RCC_OscConfig+0xc6>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80015ec:	6963      	ldr	r3, [r4, #20]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d904      	bls.n	80015fc <HAL_RCC_OscConfig+0x1d4>
 80015f2:	f240 11ed 	movw	r1, #493	; 0x1ed
 80015f6:	4838      	ldr	r0, [pc, #224]	; (80016d8 <HAL_RCC_OscConfig+0x2b0>)
 80015f8:	f001 ff3f 	bl	800347a <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015fc:	6963      	ldr	r3, [r4, #20]
 80015fe:	4d37      	ldr	r5, [pc, #220]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 8001600:	b183      	cbz	r3, 8001624 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8001602:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800160a:	f7fe ffd9 	bl	80005c0 <HAL_GetTick>
 800160e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001610:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001612:	079b      	lsls	r3, r3, #30
 8001614:	f53f af22 	bmi.w	800145c <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001618:	f7fe ffd2 	bl	80005c0 <HAL_GetTick>
 800161c:	1b80      	subs	r0, r0, r6
 800161e:	2802      	cmp	r0, #2
 8001620:	d9f6      	bls.n	8001610 <HAL_RCC_OscConfig+0x1e8>
 8001622:	e764      	b.n	80014ee <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_LSI_DISABLE();
 8001624:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800162c:	f7fe ffc8 	bl	80005c0 <HAL_GetTick>
 8001630:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001632:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001634:	079f      	lsls	r7, r3, #30
 8001636:	f57f af11 	bpl.w	800145c <HAL_RCC_OscConfig+0x34>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163a:	f7fe ffc1 	bl	80005c0 <HAL_GetTick>
 800163e:	1b80      	subs	r0, r0, r6
 8001640:	2802      	cmp	r0, #2
 8001642:	d9f6      	bls.n	8001632 <HAL_RCC_OscConfig+0x20a>
 8001644:	e753      	b.n	80014ee <HAL_RCC_OscConfig+0xc6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001646:	68a3      	ldr	r3, [r4, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d906      	bls.n	800165a <HAL_RCC_OscConfig+0x232>
 800164c:	2b05      	cmp	r3, #5
 800164e:	d004      	beq.n	800165a <HAL_RCC_OscConfig+0x232>
 8001650:	f240 2117 	movw	r1, #535	; 0x217
 8001654:	4820      	ldr	r0, [pc, #128]	; (80016d8 <HAL_RCC_OscConfig+0x2b0>)
 8001656:	f001 ff10 	bl	800347a <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 800165c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800165e:	00d5      	lsls	r5, r2, #3
 8001660:	d427      	bmi.n	80016b2 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001664:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001666:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001676:	4d1a      	ldr	r5, [pc, #104]	; (80016e0 <HAL_RCC_OscConfig+0x2b8>)
 8001678:	682b      	ldr	r3, [r5, #0]
 800167a:	05d8      	lsls	r0, r3, #23
 800167c:	d51b      	bpl.n	80016b6 <HAL_RCC_OscConfig+0x28e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167e:	68a3      	ldr	r3, [r4, #8]
 8001680:	4d16      	ldr	r5, [pc, #88]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 8001682:	2b01      	cmp	r3, #1
 8001684:	d12e      	bne.n	80016e4 <HAL_RCC_OscConfig+0x2bc>
 8001686:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001692:	f7fe ff95 	bl	80005c0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001696:	4f11      	ldr	r7, [pc, #68]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
      tickstart = HAL_GetTick();
 8001698:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800169c:	079a      	lsls	r2, r3, #30
 800169e:	d546      	bpl.n	800172e <HAL_RCC_OscConfig+0x306>
    if(pwrclkchanged == SET)
 80016a0:	2e00      	cmp	r6, #0
 80016a2:	f43f aedf 	beq.w	8001464 <HAL_RCC_OscConfig+0x3c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a6:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <HAL_RCC_OscConfig+0x2b4>)
 80016a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	e6d8      	b.n	8001464 <HAL_RCC_OscConfig+0x3c>
  FlagStatus pwrclkchanged = RESET;
 80016b2:	2600      	movs	r6, #0
 80016b4:	e7df      	b.n	8001676 <HAL_RCC_OscConfig+0x24e>
      PWR->CR1 |= PWR_CR1_DBP;
 80016b6:	682b      	ldr	r3, [r5, #0]
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80016be:	f7fe ff7f 	bl	80005c0 <HAL_GetTick>
 80016c2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	05d9      	lsls	r1, r3, #23
 80016c8:	d4d9      	bmi.n	800167e <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016ca:	f7fe ff79 	bl	80005c0 <HAL_GetTick>
 80016ce:	1bc0      	subs	r0, r0, r7
 80016d0:	2864      	cmp	r0, #100	; 0x64
 80016d2:	d9f7      	bls.n	80016c4 <HAL_RCC_OscConfig+0x29c>
 80016d4:	e70b      	b.n	80014ee <HAL_RCC_OscConfig+0xc6>
 80016d6:	bf00      	nop
 80016d8:	08003cb8 	.word	0x08003cb8
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e4:	b9ab      	cbnz	r3, 8001712 <HAL_RCC_OscConfig+0x2ea>
 80016e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ec:	f023 0301 	bic.w	r3, r3, #1
 80016f0:	672b      	str	r3, [r5, #112]	; 0x70
 80016f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80016fa:	f7fe ff61 	bl	80005c0 <HAL_GetTick>
 80016fe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001700:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001702:	079b      	lsls	r3, r3, #30
 8001704:	d5cc      	bpl.n	80016a0 <HAL_RCC_OscConfig+0x278>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7fe ff5b 	bl	80005c0 <HAL_GetTick>
 800170a:	1bc0      	subs	r0, r0, r7
 800170c:	4540      	cmp	r0, r8
 800170e:	d9f7      	bls.n	8001700 <HAL_RCC_OscConfig+0x2d8>
 8001710:	e6ed      	b.n	80014ee <HAL_RCC_OscConfig+0xc6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001712:	2b05      	cmp	r3, #5
 8001714:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001716:	d103      	bne.n	8001720 <HAL_RCC_OscConfig+0x2f8>
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	672b      	str	r3, [r5, #112]	; 0x70
 800171e:	e7b2      	b.n	8001686 <HAL_RCC_OscConfig+0x25e>
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	672b      	str	r3, [r5, #112]	; 0x70
 8001726:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	e7ae      	b.n	800168c <HAL_RCC_OscConfig+0x264>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7fe ff47 	bl	80005c0 <HAL_GetTick>
 8001732:	eba0 0008 	sub.w	r0, r0, r8
 8001736:	42a8      	cmp	r0, r5
 8001738:	d9af      	bls.n	800169a <HAL_RCC_OscConfig+0x272>
 800173a:	e6d8      	b.n	80014ee <HAL_RCC_OscConfig+0xc6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800173c:	4d44      	ldr	r5, [pc, #272]	; (8001850 <HAL_RCC_OscConfig+0x428>)
 800173e:	68ab      	ldr	r3, [r5, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b08      	cmp	r3, #8
 8001746:	f43f ae73 	beq.w	8001430 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800174a:	2a02      	cmp	r2, #2
 800174c:	d16f      	bne.n	800182e <HAL_RCC_OscConfig+0x406>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800174e:	69e3      	ldr	r3, [r4, #28]
 8001750:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001754:	d004      	beq.n	8001760 <HAL_RCC_OscConfig+0x338>
 8001756:	f44f 7119 	mov.w	r1, #612	; 0x264
 800175a:	483e      	ldr	r0, [pc, #248]	; (8001854 <HAL_RCC_OscConfig+0x42c>)
 800175c:	f001 fe8d 	bl	800347a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001760:	6a23      	ldr	r3, [r4, #32]
 8001762:	3b02      	subs	r3, #2
 8001764:	2b3d      	cmp	r3, #61	; 0x3d
 8001766:	d904      	bls.n	8001772 <HAL_RCC_OscConfig+0x34a>
 8001768:	f240 2165 	movw	r1, #613	; 0x265
 800176c:	4839      	ldr	r0, [pc, #228]	; (8001854 <HAL_RCC_OscConfig+0x42c>)
 800176e:	f001 fe84 	bl	800347a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001774:	3b32      	subs	r3, #50	; 0x32
 8001776:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800177a:	d904      	bls.n	8001786 <HAL_RCC_OscConfig+0x35e>
 800177c:	f240 2166 	movw	r1, #614	; 0x266
 8001780:	4834      	ldr	r0, [pc, #208]	; (8001854 <HAL_RCC_OscConfig+0x42c>)
 8001782:	f001 fe7a 	bl	800347a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001786:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001788:	2a08      	cmp	r2, #8
 800178a:	d804      	bhi.n	8001796 <HAL_RCC_OscConfig+0x36e>
 800178c:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8001790:	40d3      	lsrs	r3, r2
 8001792:	07d8      	lsls	r0, r3, #31
 8001794:	d404      	bmi.n	80017a0 <HAL_RCC_OscConfig+0x378>
 8001796:	f240 2167 	movw	r1, #615	; 0x267
 800179a:	482e      	ldr	r0, [pc, #184]	; (8001854 <HAL_RCC_OscConfig+0x42c>)
 800179c:	f001 fe6d 	bl	800347a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80017a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017a2:	3b02      	subs	r3, #2
 80017a4:	2b0d      	cmp	r3, #13
 80017a6:	d904      	bls.n	80017b2 <HAL_RCC_OscConfig+0x38a>
 80017a8:	f44f 711a 	mov.w	r1, #616	; 0x268
 80017ac:	4829      	ldr	r0, [pc, #164]	; (8001854 <HAL_RCC_OscConfig+0x42c>)
 80017ae:	f001 fe64 	bl	800347a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80017b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80017b4:	3b02      	subs	r3, #2
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d904      	bls.n	80017c4 <HAL_RCC_OscConfig+0x39c>
 80017ba:	f240 216a 	movw	r1, #618	; 0x26a
 80017be:	4825      	ldr	r0, [pc, #148]	; (8001854 <HAL_RCC_OscConfig+0x42c>)
 80017c0:	f001 fe5b 	bl	800347a <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4d22      	ldr	r5, [pc, #136]	; (8001850 <HAL_RCC_OscConfig+0x428>)
 80017c6:	682b      	ldr	r3, [r5, #0]
 80017c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017ce:	f7fe fef7 	bl	80005c0 <HAL_GetTick>
 80017d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d4:	682b      	ldr	r3, [r5, #0]
 80017d6:	0199      	lsls	r1, r3, #6
 80017d8:	d423      	bmi.n	8001822 <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017da:	6a22      	ldr	r2, [r4, #32]
 80017dc:	69e3      	ldr	r3, [r4, #28]
 80017de:	4313      	orrs	r3, r2
 80017e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80017e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017ee:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80017f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f4:	4c16      	ldr	r4, [pc, #88]	; (8001850 <HAL_RCC_OscConfig+0x428>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f6:	0852      	lsrs	r2, r2, #1
 80017f8:	3a01      	subs	r2, #1
 80017fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80017fe:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001806:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001808:	f7fe feda 	bl	80005c0 <HAL_GetTick>
 800180c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	019a      	lsls	r2, r3, #6
 8001812:	f53f ae33 	bmi.w	800147c <HAL_RCC_OscConfig+0x54>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001816:	f7fe fed3 	bl	80005c0 <HAL_GetTick>
 800181a:	1b40      	subs	r0, r0, r5
 800181c:	2802      	cmp	r0, #2
 800181e:	d9f6      	bls.n	800180e <HAL_RCC_OscConfig+0x3e6>
 8001820:	e665      	b.n	80014ee <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001822:	f7fe fecd 	bl	80005c0 <HAL_GetTick>
 8001826:	1b80      	subs	r0, r0, r6
 8001828:	2802      	cmp	r0, #2
 800182a:	d9d3      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3ac>
 800182c:	e65f      	b.n	80014ee <HAL_RCC_OscConfig+0xc6>
        __HAL_RCC_PLL_DISABLE();
 800182e:	682b      	ldr	r3, [r5, #0]
 8001830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001834:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001836:	f7fe fec3 	bl	80005c0 <HAL_GetTick>
 800183a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	019b      	lsls	r3, r3, #6
 8001840:	f57f ae1c 	bpl.w	800147c <HAL_RCC_OscConfig+0x54>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7fe febc 	bl	80005c0 <HAL_GetTick>
 8001848:	1b00      	subs	r0, r0, r4
 800184a:	2802      	cmp	r0, #2
 800184c:	d9f6      	bls.n	800183c <HAL_RCC_OscConfig+0x414>
 800184e:	e64e      	b.n	80014ee <HAL_RCC_OscConfig+0xc6>
 8001850:	40023800 	.word	0x40023800
 8001854:	08003cb8 	.word	0x08003cb8

08001858 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001858:	4913      	ldr	r1, [pc, #76]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800185a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800185c:	688b      	ldr	r3, [r1, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b04      	cmp	r3, #4
 8001864:	d003      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0x16>
 8001866:	2b08      	cmp	r3, #8
 8001868:	d003      	beq.n	8001872 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800186a:	4810      	ldr	r0, [pc, #64]	; (80018ac <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800186c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800186e:	4810      	ldr	r0, [pc, #64]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001870:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001872:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001874:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001876:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001878:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800187c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001880:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001884:	bf1a      	itte	ne
 8001886:	480a      	ldrne	r0, [pc, #40]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001888:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188a:	4808      	ldreq	r0, [pc, #32]	; (80018ac <HAL_RCC_GetSysClockFreq+0x54>)
 800188c:	fba1 0100 	umull	r0, r1, r1, r0
 8001890:	f7fe fcd2 	bl	8000238 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x50>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800189c:	3301      	adds	r3, #1
 800189e:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80018a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	00f42400 	.word	0x00f42400
 80018b0:	00b71b00 	.word	0x00b71b00

080018b4 <HAL_RCC_ClockConfig>:
{
 80018b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80018ba:	4604      	mov	r4, r0
 80018bc:	b910      	cbnz	r0, 80018c4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80018be:	2001      	movs	r0, #1
 80018c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80018c4:	6803      	ldr	r3, [r0, #0]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	2b0e      	cmp	r3, #14
 80018ca:	d904      	bls.n	80018d6 <HAL_RCC_ClockConfig+0x22>
 80018cc:	f240 21da 	movw	r1, #730	; 0x2da
 80018d0:	486f      	ldr	r0, [pc, #444]	; (8001a90 <HAL_RCC_ClockConfig+0x1dc>)
 80018d2:	f001 fdd2 	bl	800347a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80018d6:	2d0f      	cmp	r5, #15
 80018d8:	d904      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x30>
 80018da:	f240 21db 	movw	r1, #731	; 0x2db
 80018de:	486c      	ldr	r0, [pc, #432]	; (8001a90 <HAL_RCC_ClockConfig+0x1dc>)
 80018e0:	f001 fdcb 	bl	800347a <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4a6b      	ldr	r2, [pc, #428]	; (8001a94 <HAL_RCC_ClockConfig+0x1e0>)
 80018e6:	6813      	ldr	r3, [r2, #0]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	429d      	cmp	r5, r3
 80018ee:	d83d      	bhi.n	800196c <HAL_RCC_ClockConfig+0xb8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f0:	6822      	ldr	r2, [r4, #0]
 80018f2:	0796      	lsls	r6, r2, #30
 80018f4:	d445      	bmi.n	8001982 <HAL_RCC_ClockConfig+0xce>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	07d9      	lsls	r1, r3, #31
 80018fa:	d46f      	bmi.n	80019dc <HAL_RCC_ClockConfig+0x128>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018fc:	4a65      	ldr	r2, [pc, #404]	; (8001a94 <HAL_RCC_ClockConfig+0x1e0>)
 80018fe:	6813      	ldr	r3, [r2, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	429d      	cmp	r5, r3
 8001906:	f0c0 809d 	bcc.w	8001a44 <HAL_RCC_ClockConfig+0x190>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	075a      	lsls	r2, r3, #29
 800190e:	f100 80a5 	bmi.w	8001a5c <HAL_RCC_ClockConfig+0x1a8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	071b      	lsls	r3, r3, #28
 8001916:	d518      	bpl.n	800194a <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001918:	6923      	ldr	r3, [r4, #16]
 800191a:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800191e:	d00c      	beq.n	800193a <HAL_RCC_ClockConfig+0x86>
 8001920:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001924:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001928:	d007      	beq.n	800193a <HAL_RCC_ClockConfig+0x86>
 800192a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800192e:	d004      	beq.n	800193a <HAL_RCC_ClockConfig+0x86>
 8001930:	f240 314a 	movw	r1, #842	; 0x34a
 8001934:	4856      	ldr	r0, [pc, #344]	; (8001a90 <HAL_RCC_ClockConfig+0x1dc>)
 8001936:	f001 fda0 	bl	800347a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800193a:	4a57      	ldr	r2, [pc, #348]	; (8001a98 <HAL_RCC_ClockConfig+0x1e4>)
 800193c:	6921      	ldr	r1, [r4, #16]
 800193e:	6893      	ldr	r3, [r2, #8]
 8001940:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001944:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001948:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800194a:	f7ff ff85 	bl	8001858 <HAL_RCC_GetSysClockFreq>
 800194e:	4b52      	ldr	r3, [pc, #328]	; (8001a98 <HAL_RCC_ClockConfig+0x1e4>)
 8001950:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_RCC_ClockConfig+0x1e8>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001958:	5cd3      	ldrb	r3, [r2, r3]
 800195a:	40d8      	lsrs	r0, r3
 800195c:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <HAL_RCC_ClockConfig+0x1ec>)
 800195e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001960:	2000      	movs	r0, #0
 8001962:	f7fe fdf1 	bl	8000548 <HAL_InitTick>
  return HAL_OK;
 8001966:	2000      	movs	r0, #0
 8001968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196c:	6813      	ldr	r3, [r2, #0]
 800196e:	f023 030f 	bic.w	r3, r3, #15
 8001972:	432b      	orrs	r3, r5
 8001974:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	6813      	ldr	r3, [r2, #0]
 8001978:	f003 030f 	and.w	r3, r3, #15
 800197c:	429d      	cmp	r5, r3
 800197e:	d19e      	bne.n	80018be <HAL_RCC_ClockConfig+0xa>
 8001980:	e7b6      	b.n	80018f0 <HAL_RCC_ClockConfig+0x3c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001982:	f012 0f04 	tst.w	r2, #4
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_RCC_ClockConfig+0x1e4>)
 8001988:	d003      	beq.n	8001992 <HAL_RCC_ClockConfig+0xde>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8001990:	6099      	str	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	0710      	lsls	r0, r2, #28
 8001994:	d503      	bpl.n	800199e <HAL_RCC_ClockConfig+0xea>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800199c:	609a      	str	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800199e:	68a3      	ldr	r3, [r4, #8]
 80019a0:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 80019a4:	d012      	beq.n	80019cc <HAL_RCC_ClockConfig+0x118>
 80019a6:	f023 0220 	bic.w	r2, r3, #32
 80019aa:	2a90      	cmp	r2, #144	; 0x90
 80019ac:	d00e      	beq.n	80019cc <HAL_RCC_ClockConfig+0x118>
 80019ae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80019b2:	2aa0      	cmp	r2, #160	; 0xa0
 80019b4:	d00a      	beq.n	80019cc <HAL_RCC_ClockConfig+0x118>
 80019b6:	f023 0210 	bic.w	r2, r3, #16
 80019ba:	2ac0      	cmp	r2, #192	; 0xc0
 80019bc:	d006      	beq.n	80019cc <HAL_RCC_ClockConfig+0x118>
 80019be:	2bf0      	cmp	r3, #240	; 0xf0
 80019c0:	d004      	beq.n	80019cc <HAL_RCC_ClockConfig+0x118>
 80019c2:	f240 21ff 	movw	r1, #767	; 0x2ff
 80019c6:	4832      	ldr	r0, [pc, #200]	; (8001a90 <HAL_RCC_ClockConfig+0x1dc>)
 80019c8:	f001 fd57 	bl	800347a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <HAL_RCC_ClockConfig+0x1e4>)
 80019ce:	68a1      	ldr	r1, [r4, #8]
 80019d0:	6893      	ldr	r3, [r2, #8]
 80019d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019d6:	430b      	orrs	r3, r1
 80019d8:	6093      	str	r3, [r2, #8]
 80019da:	e78c      	b.n	80018f6 <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80019dc:	6863      	ldr	r3, [r4, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d904      	bls.n	80019ec <HAL_RCC_ClockConfig+0x138>
 80019e2:	f240 3106 	movw	r1, #774	; 0x306
 80019e6:	482a      	ldr	r0, [pc, #168]	; (8001a90 <HAL_RCC_ClockConfig+0x1dc>)
 80019e8:	f001 fd47 	bl	800347a <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ec:	6861      	ldr	r1, [r4, #4]
 80019ee:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_RCC_ClockConfig+0x1e4>)
 80019f0:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f4:	d11e      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	f43f af60 	beq.w	80018be <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fe:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a04:	4e24      	ldr	r6, [pc, #144]	; (8001a98 <HAL_RCC_ClockConfig+0x1e4>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a06:	f022 0203 	bic.w	r2, r2, #3
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001a0e:	f7fe fdd7 	bl	80005c0 <HAL_GetTick>
 8001a12:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a14:	68b3      	ldr	r3, [r6, #8]
 8001a16:	6862      	ldr	r2, [r4, #4]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a20:	f43f af6c 	beq.w	80018fc <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7fe fdcc 	bl	80005c0 <HAL_GetTick>
 8001a28:	1bc0      	subs	r0, r0, r7
 8001a2a:	4540      	cmp	r0, r8
 8001a2c:	d9f2      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8001a2e:	2003      	movs	r0, #3
}
 8001a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a34:	2902      	cmp	r1, #2
 8001a36:	d102      	bne.n	8001a3e <HAL_RCC_ClockConfig+0x18a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a38:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001a3c:	e7dd      	b.n	80019fa <HAL_RCC_ClockConfig+0x146>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	f012 0f02 	tst.w	r2, #2
 8001a42:	e7da      	b.n	80019fa <HAL_RCC_ClockConfig+0x146>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a44:	6813      	ldr	r3, [r2, #0]
 8001a46:	f023 030f 	bic.w	r3, r3, #15
 8001a4a:	432b      	orrs	r3, r5
 8001a4c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	6813      	ldr	r3, [r2, #0]
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	429d      	cmp	r5, r3
 8001a56:	f47f af32 	bne.w	80018be <HAL_RCC_ClockConfig+0xa>
 8001a5a:	e756      	b.n	800190a <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001a5c:	68e3      	ldr	r3, [r4, #12]
 8001a5e:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8001a62:	d00c      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x1ca>
 8001a64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a68:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001a6c:	d007      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x1ca>
 8001a6e:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a72:	d004      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x1ca>
 8001a74:	f240 3143 	movw	r1, #835	; 0x343
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_RCC_ClockConfig+0x1dc>)
 8001a7a:	f001 fcfe 	bl	800347a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7e:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_RCC_ClockConfig+0x1e4>)
 8001a80:	68e1      	ldr	r1, [r4, #12]
 8001a82:	6893      	ldr	r3, [r2, #8]
 8001a84:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	6093      	str	r3, [r2, #8]
 8001a8c:	e741      	b.n	8001912 <HAL_RCC_ClockConfig+0x5e>
 8001a8e:	bf00      	nop
 8001a90:	08003cb8 	.word	0x08003cb8
 8001a94:	40023c00 	.word	0x40023c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	08003d2b 	.word	0x08003d2b
 8001aa0:	20000118 	.word	0x20000118

08001aa4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001aa4:	4b01      	ldr	r3, [pc, #4]	; (8001aac <HAL_RCC_GetHCLKFreq+0x8>)
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000118 	.word	0x20000118

08001ab0 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8001ab0:	6803      	ldr	r3, [r0, #0]
 8001ab2:	f023 4362 	bic.w	r3, r3, #3791650816	; 0xe2000000
 8001ab6:	f023 030e 	bic.w	r3, r3, #14
{
 8001aba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001abe:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8001ac0:	b91b      	cbnz	r3, 8001aca <HAL_RCCEx_PeriphCLKConfig+0x1a>
 8001ac2:	2183      	movs	r1, #131	; 0x83
 8001ac4:	48b8      	ldr	r0, [pc, #736]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ac6:	f001 fcd8 	bl	800347a <assert_failed>
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001aca:	6826      	ldr	r6, [r4, #0]
 8001acc:	f016 0601 	ands.w	r6, r6, #1
 8001ad0:	d013      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8001ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ad4:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001ada:	2189      	movs	r1, #137	; 0x89
 8001adc:	48b2      	ldr	r0, [pc, #712]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001ade:	f001 fccc 	bl	800347a <assert_failed>
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ae2:	4bb2      	ldr	r3, [pc, #712]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4332      	orrs	r2, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001af2:	fab6 f686 	clz	r6, r6
 8001af6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001af8:	609a      	str	r2, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001afa:	6825      	ldr	r5, [r4, #0]
 8001afc:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
 8001b00:	d01a      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8001b02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b04:	f433 1340 	bics.w	r3, r3, #3145728	; 0x300000
 8001b08:	d003      	beq.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001b0a:	2199      	movs	r1, #153	; 0x99
 8001b0c:	48a6      	ldr	r0, [pc, #664]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b0e:	f001 fcb4 	bl	800347a <assert_failed>
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b12:	4aa6      	ldr	r2, [pc, #664]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001b14:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001b16:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b1a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b1e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8001b22:	bf08      	it	eq
 8001b24:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b26:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b2a:	bf16      	itet	ne
 8001b2c:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001b30:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b32:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b34:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	02db      	lsls	r3, r3, #11
 8001b3c:	d518      	bpl.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8001b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b40:	f433 0340 	bics.w	r3, r3, #12582912	; 0xc00000
 8001b44:	d003      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001b46:	21ad      	movs	r1, #173	; 0xad
 8001b48:	4897      	ldr	r0, [pc, #604]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001b4a:	f001 fc96 	bl	800347a <assert_failed>
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b4e:	4997      	ldr	r1, [pc, #604]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001b50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b52:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b56:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b5a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b5e:	ea43 0302 	orr.w	r3, r3, r2
 8001b62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b66:	f000 82c5 	beq.w	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x644>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8001b6a:	2a00      	cmp	r2, #0
 8001b6c:	bf08      	it	eq
 8001b6e:	2501      	moveq	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b70:	6823      	ldr	r3, [r4, #0]
  {    
      plli2sused = 1; 
 8001b72:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001b76:	bf18      	it	ne
 8001b78:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b7a:	069f      	lsls	r7, r3, #26
 8001b7c:	d563      	bpl.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8001b7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b84:	d02d      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b8a:	d02a      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001b8c:	f423 20a0 	bic.w	r0, r3, #327680	; 0x50000
 8001b90:	4a87      	ldr	r2, [pc, #540]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001b92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001b96:	4290      	cmp	r0, r2
 8001b98:	d023      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001b9a:	f423 2010 	bic.w	r0, r3, #589824	; 0x90000
 8001b9e:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8001ba2:	4290      	cmp	r0, r2
 8001ba4:	d01d      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001ba6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001baa:	4882      	ldr	r0, [pc, #520]	; (8001db4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001bac:	4282      	cmp	r2, r0
 8001bae:	d018      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001bb0:	f423 1388 	bic.w	r3, r3, #1114112	; 0x110000
 8001bb4:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 8001bb8:	4283      	cmp	r3, r0
 8001bba:	d012      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001bbc:	4b7e      	ldr	r3, [pc, #504]	; (8001db8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d00f      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001bc2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001bca:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d007      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001bd2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8001bd6:	4299      	cmp	r1, r3
 8001bd8:	d003      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8001bda:	21c8      	movs	r1, #200	; 0xc8
 8001bdc:	4872      	ldr	r0, [pc, #456]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001bde:	f001 fc4c 	bl	800347a <assert_failed>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b72      	ldr	r3, [pc, #456]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001be4:	4f75      	ldr	r7, [pc, #468]	; (8001dbc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c00:	f7fe fcde 	bl	80005c0 <HAL_GetTick>
 8001c04:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	05d8      	lsls	r0, r3, #23
 8001c0a:	f140 8275 	bpl.w	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c0e:	4f67      	ldr	r7, [pc, #412]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c12:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c16:	f040 827a 	bne.w	800210e <HAL_RCCEx_PeriphCLKConfig+0x65e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c1c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001c20:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001c24:	4a61      	ldr	r2, [pc, #388]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001c26:	f040 8298 	bne.w	800215a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8001c2a:	6891      	ldr	r1, [r2, #8]
 8001c2c:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001c30:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001c34:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001c38:	4301      	orrs	r1, r0
 8001c3a:	6091      	str	r1, [r2, #8]
 8001c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c40:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001c42:	430b      	orrs	r3, r1
 8001c44:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	06db      	lsls	r3, r3, #27
 8001c4a:	d515      	bpl.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8001c4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c4e:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8001c52:	d004      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8001c54:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001c58:	4853      	ldr	r0, [pc, #332]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c5a:	f001 fc0e 	bl	800347a <assert_failed>
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c5e:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001c60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c64:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001c68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001c6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001c72:	430a      	orrs	r2, r1
 8001c74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	045f      	lsls	r7, r3, #17
 8001c7c:	d514      	bpl.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8001c7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c80:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8001c84:	d007      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8001c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c8a:	d004      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
 8001c8c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8001c90:	4845      	ldr	r0, [pc, #276]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001c92:	f001 fbf2 	bl	800347a <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c96:	4a45      	ldr	r2, [pc, #276]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001c98:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001c9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	0418      	lsls	r0, r3, #16
 8001cac:	d514      	bpl.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8001cae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8001cb0:	f433 2280 	bics.w	r2, r3, #262144	; 0x40000
 8001cb4:	d007      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8001cb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cba:	d004      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8001cbc:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001cc0:	4839      	ldr	r0, [pc, #228]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001cc2:	f001 fbda 	bl	800347a <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cc6:	4a39      	ldr	r2, [pc, #228]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001cc8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001cca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cce:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	03d9      	lsls	r1, r3, #15
 8001cdc:	d514      	bpl.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8001cde:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001ce0:	f433 1280 	bics.w	r2, r3, #1048576	; 0x100000
 8001ce4:	d007      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001ce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cea:	d004      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001cec:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001cf0:	482d      	ldr	r0, [pc, #180]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001cf2:	f001 fbc2 	bl	800347a <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001cf6:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001cf8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001cfa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001cfe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001d02:	430b      	orrs	r3, r1
 8001d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	039a      	lsls	r2, r3, #14
 8001d0c:	d514      	bpl.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8001d0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001d10:	f433 0280 	bics.w	r2, r3, #4194304	; 0x400000
 8001d14:	d007      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8001d16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d1a:	d004      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x276>
 8001d1c:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8001d20:	4821      	ldr	r0, [pc, #132]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d22:	f001 fbaa 	bl	800347a <assert_failed>
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d26:	4a21      	ldr	r2, [pc, #132]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001d28:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001d2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d32:	430b      	orrs	r3, r1
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	065b      	lsls	r3, r3, #25
 8001d3c:	d510      	bpl.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8001d3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d904      	bls.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8001d44:	f44f 719a 	mov.w	r1, #308	; 0x134
 8001d48:	4817      	ldr	r0, [pc, #92]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d4a:	f001 fb96 	bl	800347a <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d4e:	4a17      	ldr	r2, [pc, #92]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001d50:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001d52:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d56:	f023 0303 	bic.w	r3, r3, #3
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	061f      	lsls	r7, r3, #24
 8001d64:	d511      	bpl.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8001d66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001d68:	f033 030c 	bics.w	r3, r3, #12
 8001d6c:	d004      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8001d6e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8001d72:	480d      	ldr	r0, [pc, #52]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d74:	f001 fb81 	bl	800347a <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d78:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001d7a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001d7c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001d80:	f023 030c 	bic.w	r3, r3, #12
 8001d84:	430b      	orrs	r3, r1
 8001d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	05d8      	lsls	r0, r3, #23
 8001d8e:	d51e      	bpl.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8001d90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001d92:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8001d96:	d004      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
 8001d98:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d9e:	f001 fb6c 	bl	800347a <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001da2:	4a02      	ldr	r2, [pc, #8]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001da4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001da8:	08003cf0 	.word	0x08003cf0
 8001dac:	40023800 	.word	0x40023800
 8001db0:	00020300 	.word	0x00020300
 8001db4:	00080300 	.word	0x00080300
 8001db8:	00100300 	.word	0x00100300
 8001dbc:	40007000 	.word	0x40007000
 8001dc0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001dc4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	0599      	lsls	r1, r3, #22
 8001dd2:	d511      	bpl.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8001dd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001dd6:	f033 03c0 	bics.w	r3, r3, #192	; 0xc0
 8001dda:	d004      	beq.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8001ddc:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8001de0:	48bc      	ldr	r0, [pc, #752]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001de2:	f001 fb4a 	bl	800347a <assert_failed>
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001de6:	4abc      	ldr	r2, [pc, #752]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001de8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001dea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001dee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001df2:	430b      	orrs	r3, r1
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	055a      	lsls	r2, r3, #21
 8001dfc:	d511      	bpl.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8001dfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e00:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8001e04:	d004      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8001e06:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8001e0a:	48b2      	ldr	r0, [pc, #712]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001e0c:	f001 fb35 	bl	800347a <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e10:	4ab1      	ldr	r2, [pc, #708]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001e12:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001e14:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	051b      	lsls	r3, r3, #20
 8001e26:	d511      	bpl.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8001e28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e2a:	f433 6340 	bics.w	r3, r3, #3072	; 0xc00
 8001e2e:	d004      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8001e30:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8001e34:	48a7      	ldr	r0, [pc, #668]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001e36:	f001 fb20 	bl	800347a <assert_failed>
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e3a:	4aa7      	ldr	r2, [pc, #668]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001e3c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001e3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e42:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e46:	430b      	orrs	r3, r1
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	04df      	lsls	r7, r3, #19
 8001e50:	d511      	bpl.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8001e52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001e54:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8001e58:	d004      	beq.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8001e5a:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8001e5e:	489d      	ldr	r0, [pc, #628]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001e60:	f001 fb0b 	bl	800347a <assert_failed>
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e64:	4a9c      	ldr	r2, [pc, #624]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001e66:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001e68:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e70:	430b      	orrs	r3, r1
 8001e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	0498      	lsls	r0, r3, #18
 8001e7a:	d511      	bpl.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8001e7c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001e7e:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8001e82:	d004      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8001e84:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8001e88:	4892      	ldr	r0, [pc, #584]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001e8a:	f001 faf6 	bl	800347a <assert_failed>
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e8e:	4a92      	ldr	r2, [pc, #584]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001e90:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001e92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001e96:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	0259      	lsls	r1, r3, #9
 8001ea4:	d511      	bpl.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8001ea6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001ea8:	f033 6380 	bics.w	r3, r3, #67108864	; 0x4000000
 8001eac:	d004      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8001eae:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8001eb2:	4888      	ldr	r0, [pc, #544]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001eb4:	f001 fae1 	bl	800347a <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001eb8:	4a87      	ldr	r2, [pc, #540]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001eba:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001ebc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001ec0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	029a      	lsls	r2, r3, #10
 8001ece:	d515      	bpl.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8001ed0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001ed2:	f033 6300 	bics.w	r3, r3, #134217728	; 0x8000000
 8001ed6:	d004      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001ed8:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8001edc:	487d      	ldr	r0, [pc, #500]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001ede:	f001 facc 	bl	800347a <assert_failed>
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ee2:	497d      	ldr	r1, [pc, #500]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001ee4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001ee6:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8001eea:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001eee:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
      pllsaiused = 1; 
 8001ef2:	bf08      	it	eq
 8001ef4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	035b      	lsls	r3, r3, #13
 8001f00:	d511      	bpl.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x476>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8001f02:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001f04:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8001f08:	d004      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8001f0a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8001f0e:	4871      	ldr	r0, [pc, #452]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001f10:	f001 fab3 	bl	800347a <assert_failed>
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f14:	4a70      	ldr	r2, [pc, #448]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001f16:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001f18:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001f1c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001f20:	430b      	orrs	r3, r1
 8001f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	021f      	lsls	r7, r3, #8
 8001f2a:	d513      	bpl.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8001f2c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8001f30:	f033 5380 	bics.w	r3, r3, #268435456	; 0x10000000
 8001f34:	d004      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x490>
 8001f36:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001f3a:	4866      	ldr	r0, [pc, #408]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001f3c:	f001 fa9d 	bl	800347a <assert_failed>
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f40:	4a65      	ldr	r2, [pc, #404]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001f42:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8001f46:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	0158      	lsls	r0, r3, #5
 8001f58:	d513      	bpl.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 8001f5a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8001f5e:	f033 5300 	bics.w	r3, r3, #536870912	; 0x20000000
 8001f62:	d004      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8001f64:	f240 11bb 	movw	r1, #443	; 0x1bb
 8001f68:	485a      	ldr	r0, [pc, #360]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001f6a:	f001 fa86 	bl	800347a <assert_failed>
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001f6e:	4a5a      	ldr	r2, [pc, #360]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001f70:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8001f74:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001f78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	0119      	lsls	r1, r3, #4
 8001f86:	d513      	bpl.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8001f88:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001f8c:	f033 7300 	bics.w	r3, r3, #33554432	; 0x2000000
 8001f90:	d004      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8001f92:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001f96:	484f      	ldr	r0, [pc, #316]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001f98:	f001 fa6f 	bl	800347a <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f9c:	4a4e      	ldr	r2, [pc, #312]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001f9e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8001fa2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001fa6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001faa:	430b      	orrs	r3, r1
 8001fac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	00da      	lsls	r2, r3, #3
 8001fb4:	d513      	bpl.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8001fb6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8001fba:	f033 6380 	bics.w	r3, r3, #67108864	; 0x4000000
 8001fbe:	d004      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8001fc0:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001fc4:	4843      	ldr	r0, [pc, #268]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8001fc6:	f001 fa58 	bl	800347a <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001fca:	4a43      	ldr	r2, [pc, #268]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001fcc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001fd0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001fd4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001fde:	2e01      	cmp	r6, #1
 8001fe0:	f000 80bf 	beq.w	8002162 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fea:	f000 80ba 	beq.w	8002162 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001fee:	2d01      	cmp	r5, #1
 8001ff0:	d17e      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8001ff2:	4d39      	ldr	r5, [pc, #228]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8001ff4:	682b      	ldr	r3, [r5, #0]
 8001ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fae0 	bl	80005c0 <HAL_GetTick>
 8002000:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002002:	682b      	ldr	r3, [r5, #0]
 8002004:	009f      	lsls	r7, r3, #2
 8002006:	f100 817d 	bmi.w	8002304 <HAL_RCCEx_PeriphCLKConfig+0x854>
        return HAL_TIMEOUT;
      }
    } 
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800200a:	6963      	ldr	r3, [r4, #20]
 800200c:	3b32      	subs	r3, #50	; 0x32
 800200e:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8002012:	d904      	bls.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8002014:	f240 2155 	movw	r1, #597	; 0x255
 8002018:	482e      	ldr	r0, [pc, #184]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 800201a:	f001 fa2e 	bl	800347a <assert_failed>
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	0318      	lsls	r0, r3, #12
 8002022:	d501      	bpl.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x578>
 8002024:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002026:	b11a      	cbz	r2, 8002030 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002028:	02d9      	lsls	r1, r3, #11
 800202a:	d52f      	bpl.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800202c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800202e:	bb6b      	cbnz	r3, 800208c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8002030:	69a3      	ldr	r3, [r4, #24]
 8002032:	3b02      	subs	r3, #2
 8002034:	2b0d      	cmp	r3, #13
 8002036:	d904      	bls.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002038:	f44f 7117 	mov.w	r1, #604	; 0x25c
 800203c:	4825      	ldr	r0, [pc, #148]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 800203e:	f001 fa1c 	bl	800347a <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8002042:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002044:	3b01      	subs	r3, #1
 8002046:	2b1f      	cmp	r3, #31
 8002048:	d904      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
 800204a:	f240 215e 	movw	r1, #606	; 0x25e
 800204e:	4821      	ldr	r0, [pc, #132]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 8002050:	f001 fa13 	bl	800347a <assert_failed>
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002054:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8002056:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800205a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800205e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002062:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8002066:	430b      	orrs	r3, r1
 8002068:	6961      	ldr	r1, [r4, #20]
 800206a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800206e:	69a1      	ldr	r1, [r4, #24]
 8002070:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002074:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002078:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800207c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800207e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002082:	3901      	subs	r1, #1
 8002084:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002088:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	029a      	lsls	r2, r3, #10
 8002090:	d51d      	bpl.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8002092:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002098:	d119      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800209a:	6a23      	ldr	r3, [r4, #32]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d904      	bls.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 80020a0:	f240 2171 	movw	r1, #625	; 0x271
 80020a4:	480b      	ldr	r0, [pc, #44]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x624>)
 80020a6:	f001 f9e8 	bl	800347a <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80020ac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020b0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80020b4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80020b8:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80020bc:	430b      	orrs	r3, r1
 80020be:	6961      	ldr	r1, [r4, #20]
 80020c0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80020c4:	6a21      	ldr	r1, [r4, #32]
 80020c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80020ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80020ce:	4c02      	ldr	r4, [pc, #8]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	e003      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80020d4:	08003cf0 	.word	0x08003cf0
 80020d8:	40023800 	.word	0x40023800
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e2:	f7fe fa6d 	bl	80005c0 <HAL_GetTick>
 80020e6:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	f140 8111 	bpl.w	8002312 <HAL_RCCEx_PeriphCLKConfig+0x862>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80020f0:	2000      	movs	r0, #0
 80020f2:	e009      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x658>
      plli2sused = 1; 
 80020f4:	2601      	movs	r6, #1
 80020f6:	e53b      	b.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f8:	f7fe fa62 	bl	80005c0 <HAL_GetTick>
 80020fc:	eba0 0008 	sub.w	r0, r0, r8
 8002100:	2864      	cmp	r0, #100	; 0x64
 8002102:	f67f ad80 	bls.w	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        return HAL_TIMEOUT;
 8002106:	2003      	movs	r0, #3
}
 8002108:	b003      	add	sp, #12
 800210a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800210e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002110:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002114:	4293      	cmp	r3, r2
 8002116:	f43f ad80 	beq.w	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x16a>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800211a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800211c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800211e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002122:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002126:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002128:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800212a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800212e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002130:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002134:	07d9      	lsls	r1, r3, #31
 8002136:	f57f ad70 	bpl.w	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x16a>
        tickstart = HAL_GetTick();
 800213a:	f7fe fa41 	bl	80005c0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002142:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002146:	079a      	lsls	r2, r3, #30
 8002148:	f53f ad67 	bmi.w	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800214c:	f7fe fa38 	bl	80005c0 <HAL_GetTick>
 8002150:	eba0 0008 	sub.w	r0, r0, r8
 8002154:	4548      	cmp	r0, r9
 8002156:	d9f5      	bls.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8002158:	e7d5      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x656>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215a:	6891      	ldr	r1, [r2, #8]
 800215c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002160:	e56b      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_PLLI2S_DISABLE();  
 8002162:	4e6f      	ldr	r6, [pc, #444]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8002164:	6833      	ldr	r3, [r6, #0]
 8002166:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800216a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800216c:	f7fe fa28 	bl	80005c0 <HAL_GetTick>
 8002170:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002172:	6833      	ldr	r3, [r6, #0]
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	f100 80be 	bmi.w	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x846>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800217a:	6863      	ldr	r3, [r4, #4]
 800217c:	3b32      	subs	r3, #50	; 0x32
 800217e:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8002182:	d904      	bls.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x6de>
 8002184:	f240 11eb 	movw	r1, #491	; 0x1eb
 8002188:	4866      	ldr	r0, [pc, #408]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 800218a:	f001 f976 	bl	800347a <assert_failed>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	07df      	lsls	r7, r3, #31
 8002192:	d51c      	bpl.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x71e>
 8002194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002196:	b9d3      	cbnz	r3, 80021ce <HAL_RCCEx_PeriphCLKConfig+0x71e>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8002198:	68a3      	ldr	r3, [r4, #8]
 800219a:	3b02      	subs	r3, #2
 800219c:	2b05      	cmp	r3, #5
 800219e:	d904      	bls.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 80021a0:	f240 11f1 	movw	r1, #497	; 0x1f1
 80021a4:	485f      	ldr	r0, [pc, #380]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80021a6:	f001 f968 	bl	800347a <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021aa:	4a5d      	ldr	r2, [pc, #372]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 80021ac:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021b0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80021bc:	430b      	orrs	r3, r1
 80021be:	6861      	ldr	r1, [r4, #4]
 80021c0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80021c4:	68a1      	ldr	r1, [r4, #8]
 80021c6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80021ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	031e      	lsls	r6, r3, #12
 80021d2:	d503      	bpl.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80021d4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80021d6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80021da:	d005      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x738>
 80021dc:	02d8      	lsls	r0, r3, #11
 80021de:	d530      	bpl.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x792>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80021e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e6:	d12c      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x792>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80021e8:	68e3      	ldr	r3, [r4, #12]
 80021ea:	3b02      	subs	r3, #2
 80021ec:	2b0d      	cmp	r3, #13
 80021ee:	d904      	bls.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80021f0:	f240 2101 	movw	r1, #513	; 0x201
 80021f4:	484b      	ldr	r0, [pc, #300]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80021f6:	f001 f940 	bl	800347a <assert_failed>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80021fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021fc:	3b01      	subs	r3, #1
 80021fe:	2b1f      	cmp	r3, #31
 8002200:	d904      	bls.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8002202:	f240 2103 	movw	r1, #515	; 0x203
 8002206:	4847      	ldr	r0, [pc, #284]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 8002208:	f001 f937 	bl	800347a <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800220c:	4a44      	ldr	r2, [pc, #272]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 800220e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002212:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002216:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800221a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800221e:	430b      	orrs	r3, r1
 8002220:	6861      	ldr	r1, [r4, #4]
 8002222:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002226:	68e1      	ldr	r1, [r4, #12]
 8002228:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800222c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002230:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002236:	f021 011f 	bic.w	r1, r1, #31
 800223a:	3b01      	subs	r3, #1
 800223c:	430b      	orrs	r3, r1
 800223e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	01d9      	lsls	r1, r3, #7
 8002246:	d519      	bpl.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8002248:	6923      	ldr	r3, [r4, #16]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d904      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
 800224e:	f240 2116 	movw	r1, #534	; 0x216
 8002252:	4834      	ldr	r0, [pc, #208]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 8002254:	f001 f911 	bl	800347a <assert_failed>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002258:	4a31      	ldr	r2, [pc, #196]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 800225a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800225e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002262:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002266:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800226a:	430b      	orrs	r3, r1
 800226c:	6861      	ldr	r1, [r4, #4]
 800226e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002272:	6921      	ldr	r1, [r4, #16]
 8002274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002278:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	019a      	lsls	r2, r3, #6
 8002280:	d527      	bpl.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x822>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8002282:	6923      	ldr	r3, [r4, #16]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d904      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8002288:	f240 2125 	movw	r1, #549	; 0x225
 800228c:	4825      	ldr	r0, [pc, #148]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 800228e:	f001 f8f4 	bl	800347a <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8002292:	68a3      	ldr	r3, [r4, #8]
 8002294:	3b02      	subs	r3, #2
 8002296:	2b05      	cmp	r3, #5
 8002298:	d904      	bls.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 800229a:	f240 2126 	movw	r1, #550	; 0x226
 800229e:	4821      	ldr	r0, [pc, #132]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80022a0:	f001 f8eb 	bl	800347a <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80022a4:	68e3      	ldr	r3, [r4, #12]
 80022a6:	3b02      	subs	r3, #2
 80022a8:	2b0d      	cmp	r3, #13
 80022aa:	d904      	bls.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x806>
 80022ac:	f240 2127 	movw	r1, #551	; 0x227
 80022b0:	481c      	ldr	r0, [pc, #112]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x874>)
 80022b2:	f001 f8e2 	bl	800347a <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022b6:	6923      	ldr	r3, [r4, #16]
 80022b8:	6862      	ldr	r2, [r4, #4]
 80022ba:	041b      	lsls	r3, r3, #16
 80022bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80022c0:	68e2      	ldr	r2, [r4, #12]
 80022c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80022c6:	68a2      	ldr	r2, [r4, #8]
 80022c8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 80022ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80022d2:	4e13      	ldr	r6, [pc, #76]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 80022d4:	6833      	ldr	r3, [r6, #0]
 80022d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022da:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80022dc:	f7fe f970 	bl	80005c0 <HAL_GetTick>
 80022e0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022e2:	6833      	ldr	r3, [r6, #0]
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	f53f ae82 	bmi.w	8001fee <HAL_RCCEx_PeriphCLKConfig+0x53e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022ea:	f7fe f969 	bl	80005c0 <HAL_GetTick>
 80022ee:	1bc0      	subs	r0, r0, r7
 80022f0:	2864      	cmp	r0, #100	; 0x64
 80022f2:	d9f6      	bls.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80022f4:	e707      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x656>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022f6:	f7fe f963 	bl	80005c0 <HAL_GetTick>
 80022fa:	1bc0      	subs	r0, r0, r7
 80022fc:	2864      	cmp	r0, #100	; 0x64
 80022fe:	f67f af38 	bls.w	8002172 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8002302:	e700      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x656>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002304:	f7fe f95c 	bl	80005c0 <HAL_GetTick>
 8002308:	1b80      	subs	r0, r0, r6
 800230a:	2864      	cmp	r0, #100	; 0x64
 800230c:	f67f ae79 	bls.w	8002002 <HAL_RCCEx_PeriphCLKConfig+0x552>
 8002310:	e6f9      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x656>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002312:	f7fe f955 	bl	80005c0 <HAL_GetTick>
 8002316:	1b40      	subs	r0, r0, r5
 8002318:	2864      	cmp	r0, #100	; 0x64
 800231a:	f67f aee5 	bls.w	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x638>
 800231e:	e6f2      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x656>
 8002320:	40023800 	.word	0x40023800
 8002324:	08003cf0 	.word	0x08003cf0

08002328 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 800232a:	3b01      	subs	r3, #1
 800232c:	d101      	bne.n	8002332 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800232e:	2003      	movs	r0, #3
 8002330:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8002332:	6902      	ldr	r2, [r0, #16]
 8002334:	2a00      	cmp	r2, #0
 8002336:	daf8      	bge.n	800232a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002338:	6903      	ldr	r3, [r0, #16]
 800233a:	4a06      	ldr	r2, [pc, #24]	; (8002354 <USB_CoreReset+0x2c>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 8002342:	3a01      	subs	r2, #1
 8002344:	d0f3      	beq.n	800232e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002346:	6903      	ldr	r3, [r0, #16]
 8002348:	f013 0301 	ands.w	r3, r3, #1
 800234c:	d1f9      	bne.n	8002342 <USB_CoreReset+0x1a>

  return HAL_OK;
 800234e:	4618      	mov	r0, r3
}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	00030d41 	.word	0x00030d41

08002358 <USB_CoreInit>:
{
 8002358:	b084      	sub	sp, #16
 800235a:	b538      	push	{r3, r4, r5, lr}
 800235c:	ad05      	add	r5, sp, #20
 800235e:	4604      	mov	r4, r0
 8002360:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002366:	2b01      	cmp	r3, #1
 8002368:	d127      	bne.n	80023ba <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800236a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800236c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002370:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002372:	68c3      	ldr	r3, [r0, #12]
 8002374:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800237c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800237e:	68c3      	ldr	r3, [r0, #12]
 8002380:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002384:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 8002386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002388:	2b01      	cmp	r3, #1
 800238a:	d103      	bne.n	8002394 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800238c:	68c3      	ldr	r3, [r0, #12]
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002392:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff ffc7 	bl	8002328 <USB_CoreReset>
  if(cfg.dma_enable == ENABLE)
 800239a:	9b08      	ldr	r3, [sp, #32]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80023a0:	68a3      	ldr	r3, [r4, #8]
 80023a2:	f043 0306 	orr.w	r3, r3, #6
 80023a6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80023a8:	68a3      	ldr	r3, [r4, #8]
 80023aa:	f043 0320 	orr.w	r3, r3, #32
 80023ae:	60a3      	str	r3, [r4, #8]
}
 80023b0:	2000      	movs	r0, #0
 80023b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023b6:	b004      	add	sp, #16
 80023b8:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80023ba:	68c3      	ldr	r3, [r0, #12]
 80023bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c0:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 80023c2:	f7ff ffb1 	bl	8002328 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80023c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80023cc:	e7e5      	b.n	800239a <USB_CoreInit+0x42>

080023ce <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80023ce:	6883      	ldr	r3, [r0, #8]
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6083      	str	r3, [r0, #8]
}
 80023d6:	2000      	movs	r0, #0
 80023d8:	4770      	bx	lr

080023da <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80023da:	6883      	ldr	r3, [r0, #8]
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6083      	str	r3, [r0, #8]
}
 80023e2:	2000      	movs	r0, #0
 80023e4:	4770      	bx	lr

080023e6 <USB_SetCurrentMode>:
{
 80023e6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80023e8:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80023ea:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80023ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80023f0:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80023f2:	d108      	bne.n	8002406 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80023f4:	68c3      	ldr	r3, [r0, #12]
 80023f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80023fa:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 80023fc:	2032      	movs	r0, #50	; 0x32
 80023fe:	f7fe f8e5 	bl	80005cc <HAL_Delay>
}
 8002402:	2000      	movs	r0, #0
 8002404:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002406:	2900      	cmp	r1, #0
 8002408:	d1f8      	bne.n	80023fc <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800240a:	68c3      	ldr	r3, [r0, #12]
 800240c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002410:	e7f3      	b.n	80023fa <USB_SetCurrentMode+0x14>
	...

08002414 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8002414:	0189      	lsls	r1, r1, #6
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <USB_FlushTxFifo+0x20>)
 8002418:	f041 0120 	orr.w	r1, r1, #32
 800241c:	6101      	str	r1, [r0, #16]
    if (++count > 200000)
 800241e:	3a01      	subs	r2, #1
 8002420:	d005      	beq.n	800242e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002422:	6903      	ldr	r3, [r0, #16]
 8002424:	f013 0320 	ands.w	r3, r3, #32
 8002428:	d1f9      	bne.n	800241e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800242a:	4618      	mov	r0, r3
 800242c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800242e:	2003      	movs	r0, #3
}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	00030d41 	.word	0x00030d41

08002438 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002438:	2310      	movs	r3, #16
 800243a:	4a06      	ldr	r2, [pc, #24]	; (8002454 <USB_FlushRxFifo+0x1c>)
 800243c:	6103      	str	r3, [r0, #16]
    if (++count > 200000)
 800243e:	3a01      	subs	r2, #1
 8002440:	d005      	beq.n	800244e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002442:	6903      	ldr	r3, [r0, #16]
 8002444:	f013 0310 	ands.w	r3, r3, #16
 8002448:	d1f9      	bne.n	800243e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800244a:	4618      	mov	r0, r3
 800244c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800244e:	2003      	movs	r0, #3
}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	00030d41 	.word	0x00030d41

08002458 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002458:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800245c:	4319      	orrs	r1, r3
 800245e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002462:	2000      	movs	r0, #0
 8002464:	4770      	bx	lr
	...

08002468 <USB_DevInit>:
{
 8002468:	b084      	sub	sp, #16
 800246a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800246e:	4604      	mov	r4, r0
 8002470:	a807      	add	r0, sp, #28
 8002472:	4688      	mov	r8, r1
 8002474:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002478:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800247a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800247c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002482:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002484:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002486:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0)
 8002488:	b95e      	cbnz	r6, 80024a2 <USB_DevInit+0x3a>
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 800248a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800248c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002490:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002498:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a0:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0;
 80024a2:	2300      	movs	r3, #0
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80024a4:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80024a6:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0;
 80024aa:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80024ae:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80024b2:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80024b6:	d158      	bne.n	800256a <USB_DevInit+0x102>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	d154      	bne.n	8002566 <USB_DevInit+0xfe>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 80024bc:	2100      	movs	r1, #0
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80024be:	4620      	mov	r0, r4
 80024c0:	f7ff ffca 	bl	8002458 <USB_SetDevSpeed>
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80024c4:	2110      	movs	r1, #16
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7ff ffa4 	bl	8002414 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80024cc:	4620      	mov	r0, r4
 80024ce:	f7ff ffb3 	bl	8002438 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0;
 80024d2:	2300      	movs	r3, #0
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80024d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DIEPMSK = 0;
 80024dc:	612b      	str	r3, [r5, #16]
 80024de:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0;
 80024e0:	616b      	str	r3, [r5, #20]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80024e2:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80024e6:	61aa      	str	r2, [r5, #24]
 80024e8:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DAINTMSK = 0;
 80024ec:	61eb      	str	r3, [r5, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80024ee:	4543      	cmp	r3, r8
 80024f0:	d13f      	bne.n	8002572 <USB_DevInit+0x10a>
 80024f2:	2100      	movs	r1, #0
 80024f4:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80024f8:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80024fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002500:	4608      	mov	r0, r1
  for (i = 0; i < cfg.dev_endpoints; i++)
 8002502:	428b      	cmp	r3, r1
 8002504:	d143      	bne.n	800258e <USB_DevInit+0x126>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002506:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 8002508:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800250a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800250e:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 8002510:	d108      	bne.n	8002524 <USB_DevInit+0xbc>
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <USB_DevInit+0x144>)
 8002514:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8002516:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251c:	f043 0303 	orr.w	r3, r3, #3
 8002520:	632b      	str	r3, [r5, #48]	; 0x30
    i= USBx_DEVICE->DTHRCTL;
 8002522:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFF;
 8002528:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800252c:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == DISABLE)
 800252e:	b91f      	cbnz	r7, 8002538 <USB_DevInit+0xd0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002530:	69a3      	ldr	r3, [r4, #24]
 8002532:	f043 0310 	orr.w	r3, r3, #16
 8002536:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002538:	69a2      	ldr	r2, [r4, #24]
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <USB_DevInit+0x148>)
 800253c:	4313      	orrs	r3, r2
 800253e:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable)
 8002540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002542:	b11b      	cbz	r3, 800254c <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002544:	69a3      	ldr	r3, [r4, #24]
 8002546:	f043 0308 	orr.w	r3, r3, #8
 800254a:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == ENABLE)
 800254c:	2e01      	cmp	r6, #1
 800254e:	d105      	bne.n	800255c <USB_DevInit+0xf4>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002550:	69a3      	ldr	r3, [r4, #24]
 8002552:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	61a3      	str	r3, [r4, #24]
}
 800255c:	2000      	movs	r0, #0
 800255e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002562:	b004      	add	sp, #16
 8002564:	4770      	bx	lr
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002566:	2101      	movs	r1, #1
 8002568:	e7a9      	b.n	80024be <USB_DevInit+0x56>
  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 800256a:	2903      	cmp	r1, #3
 800256c:	d0a4      	beq.n	80024b8 <USB_DevInit+0x50>
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800256e:	2103      	movs	r1, #3
 8002570:	e7a5      	b.n	80024be <USB_DevInit+0x56>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002572:	f8d2 c000 	ldr.w	ip, [r2]
 8002576:	f1bc 0f00 	cmp.w	ip, #0
 800257a:	da06      	bge.n	800258a <USB_DevInit+0x122>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800257c:	6010      	str	r0, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 800257e:	6111      	str	r1, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8002580:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8002582:	f8c2 e008 	str.w	lr, [r2, #8]
 8002586:	3220      	adds	r2, #32
 8002588:	e7b1      	b.n	80024ee <USB_DevInit+0x86>
      USBx_INEP(i)->DIEPCTL = 0;
 800258a:	6011      	str	r1, [r2, #0]
 800258c:	e7f7      	b.n	800257e <USB_DevInit+0x116>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800258e:	f8d2 8000 	ldr.w	r8, [r2]
 8002592:	f1b8 0f00 	cmp.w	r8, #0
 8002596:	da07      	bge.n	80025a8 <USB_DevInit+0x140>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002598:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 800259c:	6110      	str	r0, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 800259e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80025a0:	f8c2 c008 	str.w	ip, [r2, #8]
 80025a4:	3220      	adds	r2, #32
 80025a6:	e7ac      	b.n	8002502 <USB_DevInit+0x9a>
      USBx_OUTEP(i)->DOEPCTL = 0;
 80025a8:	6010      	str	r0, [r2, #0]
 80025aa:	e7f7      	b.n	800259c <USB_DevInit+0x134>
 80025ac:	00800100 	.word	0x00800100
 80025b0:	803c3800 	.word	0x803c3800

080025b4 <USB_GetDevSpeed>:
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80025b4:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80025b8:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 80025bc:	f010 0006 	ands.w	r0, r0, #6
 80025c0:	d012      	beq.n	80025e8 <USB_GetDevSpeed+0x34>
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80025c2:	6893      	ldr	r3, [r2, #8]
 80025c4:	f003 0306 	and.w	r3, r3, #6
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d00c      	beq.n	80025e6 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 80025cc:	6893      	ldr	r3, [r2, #8]
 80025ce:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d007      	beq.n	80025e6 <USB_GetDevSpeed+0x32>
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80025d6:	6893      	ldr	r3, [r2, #8]
 80025d8:	f003 0306 	and.w	r3, r3, #6
 80025dc:	2b04      	cmp	r3, #4
    speed = USB_OTG_SPEED_LOW;
 80025de:	bf14      	ite	ne
 80025e0:	2000      	movne	r0, #0
 80025e2:	2002      	moveq	r0, #2
 80025e4:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 80025e6:	2003      	movs	r0, #3
}
 80025e8:	4770      	bx	lr

080025ea <USB_ActivateEndpoint>:
{
 80025ea:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 80025ec:	784b      	ldrb	r3, [r1, #1]
 80025ee:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80025f2:	780c      	ldrb	r4, [r1, #0]
 80025f4:	2b01      	cmp	r3, #1
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80025f6:	69d5      	ldr	r5, [r2, #28]
  if (ep->is_in == 1)
 80025f8:	d11b      	bne.n	8002632 <USB_ActivateEndpoint+0x48>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 80025fa:	40a3      	lsls	r3, r4
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 80025fc:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8002600:	b29b      	uxth	r3, r3
 8002602:	432b      	orrs	r3, r5
 8002604:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8002606:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	0412      	lsls	r2, r2, #16
 800260e:	d40e      	bmi.n	800262e <USB_ActivateEndpoint+0x44>
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8002610:	688a      	ldr	r2, [r1, #8]
 8002612:	78c8      	ldrb	r0, [r1, #3]
 8002614:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8002618:	681d      	ldr	r5, [r3, #0]
 800261a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800261e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002622:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 8002626:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 800262a:	4328      	orrs	r0, r5
 800262c:	6018      	str	r0, [r3, #0]
}
 800262e:	2000      	movs	r0, #0
 8002630:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8002632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8002636:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 800263a:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 800263c:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 8002640:	432b      	orrs	r3, r5
 8002642:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 8002644:	6803      	ldr	r3, [r0, #0]
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	d4f1      	bmi.n	800262e <USB_ActivateEndpoint+0x44>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800264a:	688b      	ldr	r3, [r1, #8]
 800264c:	78c9      	ldrb	r1, [r1, #3]
 800264e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002652:	6802      	ldr	r2, [r0, #0]
 8002654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002660:	4313      	orrs	r3, r2
 8002662:	6003      	str	r3, [r0, #0]
 8002664:	e7e3      	b.n	800262e <USB_ActivateEndpoint+0x44>

08002666 <USB_DeactivateEndpoint>:
{
 8002666:	b510      	push	{r4, lr}
  if (ep->is_in == 1)
 8002668:	784b      	ldrb	r3, [r1, #1]
 800266a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800266e:	7809      	ldrb	r1, [r1, #0]
 8002670:	2b01      	cmp	r3, #1
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8002672:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (ep->is_in == 1)
 8002674:	d111      	bne.n	800269a <USB_DeactivateEndpoint+0x34>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8002676:	408b      	lsls	r3, r1
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8002678:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 800267c:	b29b      	uxth	r3, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	401c      	ands	r4, r3
 8002682:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8002684:	69d4      	ldr	r4, [r2, #28]
 8002686:	4023      	ands	r3, r4
 8002688:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 800268a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 800268e:	6803      	ldr	r3, [r0, #0]
 8002690:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002694:	6003      	str	r3, [r0, #0]
}
 8002696:	2000      	movs	r0, #0
 8002698:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 800269a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 800269e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 80026a2:	408b      	lsls	r3, r1
 80026a4:	43db      	mvns	r3, r3
 80026a6:	401c      	ands	r4, r3
 80026a8:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 80026aa:	69d4      	ldr	r4, [r2, #28]
 80026ac:	4023      	ands	r3, r4
 80026ae:	61d3      	str	r3, [r2, #28]
 80026b0:	e7eb      	b.n	800268a <USB_DeactivateEndpoint+0x24>

080026b2 <USB_EP0StartXfer>:
  if (ep->is_in == 1)
 80026b2:	784b      	ldrb	r3, [r1, #1]
 80026b4:	2b01      	cmp	r3, #1
{
 80026b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b8:	694d      	ldr	r5, [r1, #20]
 80026ba:	780f      	ldrb	r7, [r1, #0]
  if (ep->is_in == 1)
 80026bc:	d14d      	bne.n	800275a <USB_EP0StartXfer+0xa8>
 80026be:	f500 6410 	add.w	r4, r0, #2304	; 0x900
 80026c2:	2320      	movs	r3, #32
    if (ep->xfer_len == 0)
 80026c4:	bb0d      	cbnz	r5, 800270a <USB_EP0StartXfer+0x58>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80026c6:	fb13 4007 	smlabb	r0, r3, r7, r4
    if (dma == 1)
 80026ca:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80026cc:	6903      	ldr	r3, [r0, #16]
 80026ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80026d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80026d6:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 80026d8:	6903      	ldr	r3, [r0, #16]
 80026da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026de:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80026e0:	6903      	ldr	r3, [r0, #16]
 80026e2:	ea4f 43d3 	mov.w	r3, r3, lsr #19
 80026e6:	ea4f 43c3 	mov.w	r3, r3, lsl #19
 80026ea:	6103      	str	r3, [r0, #16]
    if (dma == 1)
 80026ec:	d104      	bne.n	80026f8 <USB_EP0StartXfer+0x46>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80026ee:	780b      	ldrb	r3, [r1, #0]
 80026f0:	690a      	ldr	r2, [r1, #16]
 80026f2:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 80026f6:	615a      	str	r2, [r3, #20]
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80026f8:	780b      	ldrb	r3, [r1, #0]
 80026fa:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8002704:	601a      	str	r2, [r3, #0]
}
 8002706:	2000      	movs	r0, #0
 8002708:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800270a:	fb13 4307 	smlabb	r3, r3, r7, r4
 800270e:	691e      	ldr	r6, [r3, #16]
 8002710:	0cf6      	lsrs	r6, r6, #19
 8002712:	04f6      	lsls	r6, r6, #19
 8002714:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002716:	691e      	ldr	r6, [r3, #16]
 8002718:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 800271c:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8002720:	611e      	str	r6, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8002722:	688e      	ldr	r6, [r1, #8]
 8002724:	42b5      	cmp	r5, r6
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8002726:	691d      	ldr	r5, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 8002728:	bf88      	it	hi
 800272a:	614e      	strhi	r6, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800272c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002730:	694e      	ldr	r6, [r1, #20]
    if (dma == 1)
 8002732:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8002734:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002736:	f3c6 0512 	ubfx	r5, r6, #0, #19
 800273a:	f8d3 e010 	ldr.w	lr, [r3, #16]
 800273e:	ea45 050e 	orr.w	r5, r5, lr
 8002742:	611d      	str	r5, [r3, #16]
    if (dma == 1)
 8002744:	d0d3      	beq.n	80026ee <USB_EP0StartXfer+0x3c>
      if (ep->xfer_len > 0U)
 8002746:	2e00      	cmp	r6, #0
 8002748:	d0d6      	beq.n	80026f8 <USB_EP0StartXfer+0x46>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 800274a:	2301      	movs	r3, #1
 800274c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8002750:	40bb      	lsls	r3, r7
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002758:	e7ce      	b.n	80026f8 <USB_EP0StartXfer+0x46>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800275a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 800275e:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8002762:	6903      	ldr	r3, [r0, #16]
 8002764:	0cdb      	lsrs	r3, r3, #19
 8002766:	04db      	lsls	r3, r3, #19
 8002768:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800276a:	6903      	ldr	r3, [r0, #16]
 800276c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8002770:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8002774:	6103      	str	r3, [r0, #16]
 8002776:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0)
 8002778:	b105      	cbz	r5, 800277c <USB_EP0StartXfer+0xca>
      ep->xfer_len = ep->maxpacket;
 800277a:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 800277c:	6904      	ldr	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800277e:	f3c3 0312 	ubfx	r3, r3, #0, #19
    if (dma == 1)
 8002782:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8002784:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002788:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800278a:	6904      	ldr	r4, [r0, #16]
 800278c:	ea43 0304 	orr.w	r3, r3, r4
 8002790:	6103      	str	r3, [r0, #16]
    if (dma == 1)
 8002792:	d101      	bne.n	8002798 <USB_EP0StartXfer+0xe6>
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002794:	68cb      	ldr	r3, [r1, #12]
 8002796:	6143      	str	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002798:	6803      	ldr	r3, [r0, #0]
 800279a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800279e:	6003      	str	r3, [r0, #0]
 80027a0:	e7b1      	b.n	8002706 <USB_EP0StartXfer+0x54>

080027a2 <USB_WritePacket>:
{
 80027a2:	b510      	push	{r4, lr}
 80027a4:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0)
 80027a8:	b93c      	cbnz	r4, 80027ba <USB_WritePacket+0x18>
    count32b =  (len + 3) / 4;
 80027aa:	3303      	adds	r3, #3
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80027ac:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    count32b =  (len + 3) / 4;
 80027b0:	109b      	asrs	r3, r3, #2
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80027b2:	eb00 3202 	add.w	r2, r0, r2, lsl #12
    for (i = 0; i < count32b; i++, src += 4)
 80027b6:	42a3      	cmp	r3, r4
 80027b8:	d101      	bne.n	80027be <USB_WritePacket+0x1c>
}
 80027ba:	2000      	movs	r0, #0
 80027bc:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80027be:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
    for (i = 0; i < count32b; i++, src += 4)
 80027c2:	3401      	adds	r4, #1
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80027c4:	6010      	str	r0, [r2, #0]
 80027c6:	e7f6      	b.n	80027b6 <USB_WritePacket+0x14>

080027c8 <USB_EPStartXfer>:
{
 80027c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1)
 80027ca:	784b      	ldrb	r3, [r1, #1]
 80027cc:	780c      	ldrb	r4, [r1, #0]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	694b      	ldr	r3, [r1, #20]
 80027d2:	d176      	bne.n	80028c2 <USB_EPStartXfer+0xfa>
 80027d4:	2620      	movs	r6, #32
 80027d6:	f500 6510 	add.w	r5, r0, #2304	; 0x900
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80027da:	fb16 5404 	smlabb	r4, r6, r4, r5
 80027de:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0)
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d138      	bne.n	8002856 <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80027e4:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80027e8:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 80027ec:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 80027ee:	6926      	ldr	r6, [r4, #16]
 80027f0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80027f4:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80027f6:	6926      	ldr	r6, [r4, #16]
 80027f8:	0cf6      	lsrs	r6, r6, #19
 80027fa:	04f6      	lsls	r6, r6, #19
    if (dma == 1)
 80027fc:	2a01      	cmp	r2, #1
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 80027fe:	6126      	str	r6, [r4, #16]
    if (dma == 1)
 8002800:	d14f      	bne.n	80028a2 <USB_EPStartXfer+0xda>
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002802:	780c      	ldrb	r4, [r1, #0]
 8002804:	690e      	ldr	r6, [r1, #16]
 8002806:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 800280a:	6166      	str	r6, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 800280c:	78ce      	ldrb	r6, [r1, #3]
 800280e:	2e01      	cmp	r6, #1
 8002810:	d10f      	bne.n	8002832 <USB_EPStartXfer+0x6a>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8002812:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8002816:	780f      	ldrb	r7, [r1, #0]
 8002818:	f414 7f80 	tst.w	r4, #256	; 0x100
 800281c:	f04f 0420 	mov.w	r4, #32
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002820:	fb14 5407 	smlabb	r4, r4, r7, r5
 8002824:	6827      	ldr	r7, [r4, #0]
 8002826:	bf0c      	ite	eq
 8002828:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800282c:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 8002830:	6027      	str	r7, [r4, #0]
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002832:	780f      	ldrb	r7, [r1, #0]
    if (ep->type == EP_TYPE_ISOC)
 8002834:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002836:	eb05 1547 	add.w	r5, r5, r7, lsl #5
 800283a:	682c      	ldr	r4, [r5, #0]
 800283c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8002840:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 8002842:	d105      	bne.n	8002850 <USB_EPStartXfer+0x88>
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 8002844:	9200      	str	r2, [sp, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	463a      	mov	r2, r7
 800284a:	68c9      	ldr	r1, [r1, #12]
 800284c:	f7ff ffa9 	bl	80027a2 <USB_WritePacket>
}
 8002850:	2000      	movs	r0, #0
 8002852:	b003      	add	sp, #12
 8002854:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002856:	0cf6      	lsrs	r6, r6, #19
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8002858:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800285a:	04f6      	lsls	r6, r6, #19
 800285c:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800285e:	6926      	ldr	r6, [r4, #16]
 8002860:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8002864:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8002868:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 800286a:	19de      	adds	r6, r3, r7
 800286c:	f8d4 e010 	ldr.w	lr, [r4, #16]
 8002870:	3e01      	subs	r6, #1
 8002872:	fbb6 f7f7 	udiv	r7, r6, r7
 8002876:	4e35      	ldr	r6, [pc, #212]	; (800294c <USB_EPStartXfer+0x184>)
 8002878:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 800287c:	ea46 060e 	orr.w	r6, r6, lr
 8002880:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8002882:	f3c3 0612 	ubfx	r6, r3, #0, #19
 8002886:	6927      	ldr	r7, [r4, #16]
 8002888:	433e      	orrs	r6, r7
 800288a:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 800288c:	78ce      	ldrb	r6, [r1, #3]
 800288e:	2e01      	cmp	r6, #1
 8002890:	d159      	bne.n	8002946 <USB_EPStartXfer+0x17e>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8002892:	6926      	ldr	r6, [r4, #16]
 8002894:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8002898:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 800289a:	6926      	ldr	r6, [r4, #16]
 800289c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80028a0:	e7ac      	b.n	80027fc <USB_EPStartXfer+0x34>
      if (ep->type != EP_TYPE_ISOC)
 80028a2:	78ce      	ldrb	r6, [r1, #3]
 80028a4:	2e01      	cmp	r6, #1
 80028a6:	d0b4      	beq.n	8002812 <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0)
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0af      	beq.n	800280c <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 80028ac:	f891 e000 	ldrb.w	lr, [r1]
 80028b0:	2401      	movs	r4, #1
 80028b2:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 80028b6:	fa04 f40e 	lsl.w	r4, r4, lr
 80028ba:	433c      	orrs	r4, r7
 80028bc:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 80028c0:	e7a4      	b.n	800280c <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80028c2:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 80028c6:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 80028ca:	6925      	ldr	r5, [r4, #16]
 80028cc:	0ced      	lsrs	r5, r5, #19
 80028ce:	04ed      	lsls	r5, r5, #19
 80028d0:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80028d2:	6925      	ldr	r5, [r4, #16]
 80028d4:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 80028d8:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 80028dc:	6125      	str	r5, [r4, #16]
 80028de:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0)
 80028e0:	b9fb      	cbnz	r3, 8002922 <USB_EPStartXfer+0x15a>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80028e2:	6923      	ldr	r3, [r4, #16]
 80028e4:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80028e8:	431d      	orrs	r5, r3
 80028ea:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 80028ec:	6923      	ldr	r3, [r4, #16]
 80028ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028f2:	6123      	str	r3, [r4, #16]
    if (dma == 1)
 80028f4:	2a01      	cmp	r2, #1
 80028f6:	d101      	bne.n	80028fc <USB_EPStartXfer+0x134>
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80028f8:	68cb      	ldr	r3, [r1, #12]
 80028fa:	6163      	str	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 80028fc:	78cb      	ldrb	r3, [r1, #3]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10a      	bne.n	8002918 <USB_EPStartXfer+0x150>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8002902:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002906:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	bf0c      	ite	eq
 800290e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8002912:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8002916:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800291e:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8002920:	e796      	b.n	8002850 <USB_EPStartXfer+0x88>
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8002922:	442b      	add	r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8002924:	4e09      	ldr	r6, [pc, #36]	; (800294c <USB_EPStartXfer+0x184>)
 8002926:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8002928:	3b01      	subs	r3, #1
 800292a:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 800292e:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8002932:	b29b      	uxth	r3, r3
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8002934:	433e      	orrs	r6, r7
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 8002936:	435d      	muls	r5, r3
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 8002938:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 800293a:	f3c5 0512 	ubfx	r5, r5, #0, #19
 800293e:	6926      	ldr	r6, [r4, #16]
 8002940:	4335      	orrs	r5, r6
 8002942:	6125      	str	r5, [r4, #16]
 8002944:	e7d6      	b.n	80028f4 <USB_EPStartXfer+0x12c>
    if (dma == 1)
 8002946:	2a01      	cmp	r2, #1
 8002948:	d1ae      	bne.n	80028a8 <USB_EPStartXfer+0xe0>
 800294a:	e75a      	b.n	8002802 <USB_EPStartXfer+0x3a>
 800294c:	1ff80000 	.word	0x1ff80000

08002950 <USB_ReadPacket>:
  uint32_t count32b = (len + 3) / 4;
 8002950:	3203      	adds	r2, #3
  for ( i = 0; i < count32b; i++, dest += 4 )
 8002952:	2300      	movs	r3, #0
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8002954:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = (len + 3) / 4;
 8002958:	1092      	asrs	r2, r2, #2
{
 800295a:	b510      	push	{r4, lr}
  for ( i = 0; i < count32b; i++, dest += 4 )
 800295c:	4293      	cmp	r3, r2
 800295e:	d102      	bne.n	8002966 <USB_ReadPacket+0x16>
}
 8002960:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8002964:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8002966:	6804      	ldr	r4, [r0, #0]
 8002968:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( i = 0; i < count32b; i++, dest += 4 )
 800296c:	3301      	adds	r3, #1
 800296e:	e7f5      	b.n	800295c <USB_ReadPacket+0xc>

08002970 <USB_EPSetStall>:
  if (ep->is_in == 1)
 8002970:	784b      	ldrb	r3, [r1, #1]
 8002972:	780a      	ldrb	r2, [r1, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 800297a:	bf0c      	ite	eq
 800297c:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8002980:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8002984:	fb13 0002 	smlabb	r0, r3, r2, r0
 8002988:	6803      	ldr	r3, [r0, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	db03      	blt.n	8002996 <USB_EPSetStall+0x26>
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800298e:	6803      	ldr	r3, [r0, #0]
 8002990:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002994:	6003      	str	r3, [r0, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002996:	6803      	ldr	r3, [r0, #0]
 8002998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800299c:	6003      	str	r3, [r0, #0]
}
 800299e:	2000      	movs	r0, #0
 80029a0:	4770      	bx	lr

080029a2 <USB_EPClearStall>:
  if (ep->is_in == 1)
 80029a2:	784b      	ldrb	r3, [r1, #1]
 80029a4:	780a      	ldrb	r2, [r1, #0]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029ac:	bf0c      	ite	eq
 80029ae:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029b2:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 80029b6:	fb13 0002 	smlabb	r0, r3, r2, r0
 80029ba:	6803      	ldr	r3, [r0, #0]
 80029bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029c0:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 80029c2:	78cb      	ldrb	r3, [r1, #3]
 80029c4:	3b02      	subs	r3, #2
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d803      	bhi.n	80029d2 <USB_EPClearStall+0x30>
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80029ca:	6803      	ldr	r3, [r0, #0]
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	6003      	str	r3, [r0, #0]
}
 80029d2:	2000      	movs	r0, #0
 80029d4:	4770      	bx	lr

080029d6 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80029d6:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 80029da:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80029dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 80029e0:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 80029e4:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 80029e8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80029ec:	4319      	orrs	r1, r3
 80029ee:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80029f2:	2000      	movs	r0, #0
 80029f4:	4770      	bx	lr

080029f6 <USB_DevConnect>:
{
 80029f6:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 80029f8:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80029fc:	f023 0302 	bic.w	r3, r3, #2
 8002a00:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8002a04:	2003      	movs	r0, #3
 8002a06:	f7fd fde1 	bl	80005cc <HAL_Delay>
}
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	bd08      	pop	{r3, pc}

08002a0e <USB_DevDisconnect>:
{
 8002a0e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8002a10:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8002a1c:	2003      	movs	r0, #3
 8002a1e:	f7fd fdd5 	bl	80005cc <HAL_Delay>
}
 8002a22:	2000      	movs	r0, #0
 8002a24:	bd08      	pop	{r3, pc}

08002a26 <USB_ReadInterrupts>:
  v = USBx->GINTSTS;
 8002a26:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8002a28:	6980      	ldr	r0, [r0, #24]
}
 8002a2a:	4010      	ands	r0, r2
 8002a2c:	4770      	bx	lr

08002a2e <USB_ReadDevAllOutEpInterrupt>:
  v  = USBx_DEVICE->DAINT;
 8002a2e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002a32:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8002a36:	69c0      	ldr	r0, [r0, #28]
 8002a38:	4018      	ands	r0, r3
}
 8002a3a:	0c00      	lsrs	r0, r0, #16
 8002a3c:	4770      	bx	lr

08002a3e <USB_ReadDevAllInEpInterrupt>:
  v  = USBx_DEVICE->DAINT;
 8002a3e:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8002a42:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8002a46:	69c0      	ldr	r0, [r0, #28]
 8002a48:	4018      	ands	r0, r3
}
 8002a4a:	b280      	uxth	r0, r0
 8002a4c:	4770      	bx	lr

08002a4e <USB_ReadDevOutEPInterrupt>:
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002a4e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  v &= USBx_DEVICE->DOEPMSK;
 8002a52:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8002a56:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8002a5a:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8002a5c:	6940      	ldr	r0, [r0, #20]
}
 8002a5e:	4010      	ands	r0, r2
 8002a60:	4770      	bx	lr

08002a62 <USB_ReadDevInEPInterrupt>:
{
 8002a62:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8002a64:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002a68:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002a6c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8002a70:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002a72:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 8002a76:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8002a78:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4323      	orrs	r3, r4
}
 8002a7e:	4018      	ands	r0, r3
 8002a80:	bd10      	pop	{r4, pc}

08002a82 <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1);
 8002a82:	6940      	ldr	r0, [r0, #20]
}
 8002a84:	f000 0001 	and.w	r0, r0, #1
 8002a88:	4770      	bx	lr

08002a8a <USB_ActivateSetup>:
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8002a8a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002a8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a92:	f023 0307 	bic.w	r3, r3, #7
 8002a96:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8002a9a:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	f002 0206 	and.w	r2, r2, #6
 8002aa4:	2a04      	cmp	r2, #4
 8002aa6:	d105      	bne.n	8002ab4 <USB_ActivateSetup+0x2a>
    USBx_INEP(0)->DIEPCTL |= 3;
 8002aa8:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002aac:	f042 0203 	orr.w	r2, r2, #3
 8002ab0:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002ab4:	685a      	ldr	r2, [r3, #4]
}
 8002ab6:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8002ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002abc:	605a      	str	r2, [r3, #4]
}
 8002abe:	4770      	bx	lr

08002ac0 <USB_EP0_OutStart>:
{
 8002ac0:	b510      	push	{r4, lr}
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8002ac2:	2400      	movs	r4, #0
  if (dma == 1)
 8002ac4:	2901      	cmp	r1, #1
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8002ac6:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8002aca:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002ace:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8002ad2:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8002ad6:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002ada:	f044 0418 	orr.w	r4, r4, #24
 8002ade:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002ae2:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8002ae6:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8002aea:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1)
 8002aee:	d105      	bne.n	8002afc <USB_EP0_OutStart+0x3c>
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 8002af0:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 8002af4:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 8002af8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8002afc:	2000      	movs	r0, #0
 8002afe:	bd10      	pop	{r4, pc}

08002b00 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b00:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8002b04:	b11b      	cbz	r3, 8002b0e <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8002b06:	2000      	movs	r0, #0
 8002b08:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8002b0c:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8002b0e:	2002      	movs	r0, #2
  }
}
 8002b10:	4770      	bx	lr

08002b12 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002b12:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8002b16:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b18:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002b1c:	b15b      	cbz	r3, 8002b36 <USBD_CDC_EP0_RxReady+0x24>
 8002b1e:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8002b22:	28ff      	cmp	r0, #255	; 0xff
 8002b24:	d007      	beq.n	8002b36 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4621      	mov	r1, r4
 8002b2a:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8002b2e:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002b30:	23ff      	movs	r3, #255	; 0xff
 8002b32:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8002b36:	2000      	movs	r0, #0
 8002b38:	bd10      	pop	{r4, pc}
	...

08002b3c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8002b3c:	2343      	movs	r3, #67	; 0x43
 8002b3e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8002b40:	4800      	ldr	r0, [pc, #0]	; (8002b44 <USBD_CDC_GetFSCfgDesc+0x8>)
 8002b42:	4770      	bx	lr
 8002b44:	20000040 	.word	0x20000040

08002b48 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8002b48:	2343      	movs	r3, #67	; 0x43
 8002b4a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8002b4c:	4800      	ldr	r0, [pc, #0]	; (8002b50 <USBD_CDC_GetHSCfgDesc+0x8>)
 8002b4e:	4770      	bx	lr
 8002b50:	20000084 	.word	0x20000084

08002b54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8002b54:	2343      	movs	r3, #67	; 0x43
 8002b56:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8002b58:	4800      	ldr	r0, [pc, #0]	; (8002b5c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8002b5a:	4770      	bx	lr
 8002b5c:	200000d4 	.word	0x200000d4

08002b60 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8002b60:	230a      	movs	r3, #10
 8002b62:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8002b64:	4800      	ldr	r0, [pc, #0]	; (8002b68 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8002b66:	4770      	bx	lr
 8002b68:	200000c8 	.word	0x200000c8

08002b6c <USBD_CDC_DataOut>:
{      
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002b70:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002b74:	f000 fe84 	bl	8003880 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8002b78:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002b7c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8002b80:	b14b      	cbz	r3, 8002b96 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002b82:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8002b86:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8002b8a:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4798      	blx	r3
    return USBD_OK;
 8002b92:	2000      	movs	r0, #0
 8002b94:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8002b96:	2002      	movs	r0, #2
}
 8002b98:	bd38      	pop	{r3, r4, r5, pc}
	...

08002b9c <USBD_CDC_Setup>:
{
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002b9e:	780f      	ldrb	r7, [r1, #0]
{
 8002ba0:	4606      	mov	r6, r0
 8002ba2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ba4:	f017 0360 	ands.w	r3, r7, #96	; 0x60
 8002ba8:	d023      	beq.n	8002bf2 <USBD_CDC_Setup+0x56>
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d119      	bne.n	8002be2 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8002bae:	88ca      	ldrh	r2, [r1, #6]
 8002bb0:	784b      	ldrb	r3, [r1, #1]
 8002bb2:	b1c2      	cbz	r2, 8002be6 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8002bb4:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002bb6:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8002bba:	d50b      	bpl.n	8002bd4 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002bbc:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	688f      	ldr	r7, [r1, #8]
 8002bc4:	4629      	mov	r1, r5
 8002bc6:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8002bc8:	88e2      	ldrh	r2, [r4, #6]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8002bce:	f000 fb8c 	bl	80032ea <USBD_CtlSendData>
      break;
 8002bd2:	e006      	b.n	8002be2 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8002bd4:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, 
 8002bd8:	4629      	mov	r1, r5
        hcdc->CmdLength = req->wLength;
 8002bda:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8002bde:	f000 fb99 	bl	8003314 <USBD_CtlPrepareRx>
}
 8002be2:	2000      	movs	r0, #0
 8002be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002be6:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8002bea:	6884      	ldr	r4, [r0, #8]
 8002bec:	4618      	mov	r0, r3
 8002bee:	47a0      	blx	r4
 8002bf0:	e7f7      	b.n	8002be2 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8002bf2:	784b      	ldrb	r3, [r1, #1]
 8002bf4:	2b0a      	cmp	r3, #10
 8002bf6:	d1f4      	bne.n	8002be2 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	4901      	ldr	r1, [pc, #4]	; (8002c00 <USBD_CDC_Setup+0x64>)
 8002bfc:	e7e7      	b.n	8002bce <USBD_CDC_Setup+0x32>
 8002bfe:	bf00      	nop
 8002c00:	200001f0 	.word	0x200001f0

08002c04 <USBD_CDC_DeInit>:
{
 8002c04:	b510      	push	{r4, lr}
 8002c06:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002c08:	2181      	movs	r1, #129	; 0x81
 8002c0a:	f000 fdd1 	bl	80037b0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4620      	mov	r0, r4
 8002c12:	f000 fdcd 	bl	80037b0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8002c16:	2182      	movs	r1, #130	; 0x82
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f000 fdc9 	bl	80037b0 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002c1e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002c22:	b153      	cbz	r3, 8002c3a <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002c24:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002c2c:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002c30:	f000 ff0c 	bl	8003a4c <free>
    pdev->pClassData = NULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	bd10      	pop	{r4, pc}

08002c3e <USBD_CDC_Init>:
{
 8002c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002c40:	7c03      	ldrb	r3, [r0, #16]
{
 8002c42:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002c44:	bb7b      	cbnz	r3, 8002ca6 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8002c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	2181      	movs	r1, #129	; 0x81
 8002c4e:	f000 fd9f 	bl	8003790 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002c52:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002c56:	2202      	movs	r2, #2
 8002c58:	2101      	movs	r1, #1
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f000 fd98 	bl	8003790 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8002c60:	2308      	movs	r3, #8
 8002c62:	2203      	movs	r2, #3
 8002c64:	2182      	movs	r1, #130	; 0x82
 8002c66:	4620      	mov	r0, r4
 8002c68:	f000 fd92 	bl	8003790 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002c6c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002c70:	f000 fee4 	bl	8003a3c <malloc>
 8002c74:	4606      	mov	r6, r0
 8002c76:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002c7a:	b320      	cbz	r0, 8002cc6 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002c7c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    hcdc->TxState =0;
 8002c80:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002c86:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8002c88:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8002c8c:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002c90:	b987      	cbnz	r7, 8002cb4 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8002c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c96:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f000 fde1 	bl	8003864 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002ca2:	4638      	mov	r0, r7
 8002ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8002ca6:	2340      	movs	r3, #64	; 0x40
 8002ca8:	2202      	movs	r2, #2
 8002caa:	2181      	movs	r1, #129	; 0x81
 8002cac:	f000 fd70 	bl	8003790 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002cb0:	2340      	movs	r3, #64	; 0x40
 8002cb2:	e7d0      	b.n	8002c56 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8002cb4:	2340      	movs	r3, #64	; 0x40
 8002cb6:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f000 fdd1 	bl	8003864 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8002cc6:	2001      	movs	r0, #1
}
 8002cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002cca <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002cca:	b119      	cbz	r1, 8002cd4 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002ccc:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002cd4:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002cd6:	4770      	bx	lr

08002cd8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002cd8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002cdc:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8002cde:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8002ce2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002ce6:	4770      	bx	lr

08002ce8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002ce8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002cec:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8002cee:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8002cf2:	4770      	bx	lr

08002cf4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002cf4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002cf8:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002cfa:	b162      	cbz	r2, 8002d16 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002cfc:	7c04      	ldrb	r4, [r0, #16]
 8002cfe:	b944      	cbnz	r4, 8002d12 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002d00:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002d04:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002d08:	2101      	movs	r1, #1
 8002d0a:	f000 fdab 	bl	8003864 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8002d0e:	2000      	movs	r0, #0
 8002d10:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8002d12:	2340      	movs	r3, #64	; 0x40
 8002d14:	e7f6      	b.n	8002d04 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002d16:	2002      	movs	r0, #2
  }
}
 8002d18:	bd10      	pop	{r4, pc}

08002d1a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002d1a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002d1c:	b180      	cbz	r0, 8002d40 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002d1e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d22:	b113      	cbz	r3, 8002d2a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002d2a:	b109      	cbz	r1, 8002d30 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002d2c:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002d30:	2301      	movs	r3, #1
  pdev->id = id;
 8002d32:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002d34:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002d38:	f000 fce6 	bl	8003708 <USBD_LL_Init>
  
  return USBD_OK; 
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002d40:	2002      	movs	r0, #2
}
 8002d42:	bd08      	pop	{r3, pc}

08002d44 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002d44:	b119      	cbz	r1, 8002d4e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002d46:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002d4e:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002d50:	4770      	bx	lr

08002d52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002d52:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002d54:	f000 fd0e 	bl	8003774 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002d58:	2000      	movs	r0, #0
 8002d5a:	bd08      	pop	{r3, pc}

08002d5c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d5c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002d5e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d62:	b90b      	cbnz	r3, 8002d68 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002d64:	2002      	movs	r0, #2
 8002d66:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4798      	blx	r3
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d1f9      	bne.n	8002d64 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002d70:	bd08      	pop	{r3, pc}

08002d72 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d72:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002d74:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4798      	blx	r3
  return USBD_OK;
}
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	bd08      	pop	{r3, pc}

08002d80 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002d80:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002d82:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002d86:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f000 fa7e 	bl	800328a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002d8e:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002d90:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002d94:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002d98:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002d9c:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002da0:	f001 031f 	and.w	r3, r1, #31
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d00e      	beq.n	8002dc6 <USBD_LL_SetupStage+0x46>
 8002da8:	d307      	bcc.n	8002dba <USBD_LL_SetupStage+0x3a>
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d010      	beq.n	8002dd0 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002dae:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002db2:	4620      	mov	r0, r4
 8002db4:	f000 fd0a 	bl	80037cc <USBD_LL_StallEP>
    break;
 8002db8:	e003      	b.n	8002dc2 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002dba:	4629      	mov	r1, r5
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f000 f8e7 	bl	8002f90 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f000 f9e3 	bl	8003194 <USBD_StdItfReq>
    break;
 8002dce:	e7f8      	b.n	8002dc2 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f000 f9f6 	bl	80031c4 <USBD_StdEPReq>
    break;
 8002dd8:	e7f3      	b.n	8002dc2 <USBD_LL_SetupStage+0x42>

08002dda <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002dda:	b538      	push	{r3, r4, r5, lr}
 8002ddc:	4604      	mov	r4, r0
 8002dde:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002de0:	bb11      	cbnz	r1, 8002e28 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002de2:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002de6:	2b03      	cmp	r3, #3
 8002de8:	d10f      	bne.n	8002e0a <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002dea:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002dee:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d90b      	bls.n	8002e0e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002df6:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
 8002df8:	4629      	mov	r1, r5
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002dfa:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002dfc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 8002e00:	bf28      	it	cs
 8002e02:	461a      	movcs	r2, r3
        USBD_CtlContinueRx (pdev, 
 8002e04:	b292      	uxth	r2, r2
 8002e06:	f000 fa94 	bl	8003332 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002e0e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	b123      	cbz	r3, 8002e20 <USBD_LL_DataOutStage+0x46>
 8002e16:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e1a:	2a03      	cmp	r2, #3
 8002e1c:	d100      	bne.n	8002e20 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002e1e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002e20:	4620      	mov	r0, r4
 8002e22:	f000 fa8e 	bl	8003342 <USBD_CtlSendStatus>
 8002e26:	e7f0      	b.n	8002e0a <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002e28:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0eb      	beq.n	8002e0a <USBD_LL_DataOutStage+0x30>
 8002e32:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e36:	2a03      	cmp	r2, #3
 8002e38:	d1e7      	bne.n	8002e0a <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002e3a:	4798      	blx	r3
 8002e3c:	e7e5      	b.n	8002e0a <USBD_LL_DataOutStage+0x30>

08002e3e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002e3e:	b570      	push	{r4, r5, r6, lr}
 8002e40:	4613      	mov	r3, r2
 8002e42:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002e44:	460e      	mov	r6, r1
 8002e46:	2900      	cmp	r1, #0
 8002e48:	d13d      	bne.n	8002ec6 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002e4a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002e4e:	2a02      	cmp	r2, #2
 8002e50:	d10f      	bne.n	8002e72 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002e52:	69c5      	ldr	r5, [r0, #28]
 8002e54:	6a02      	ldr	r2, [r0, #32]
 8002e56:	4295      	cmp	r5, r2
 8002e58:	d914      	bls.n	8002e84 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002e5a:	1aaa      	subs	r2, r5, r2
        
        USBD_CtlContinueSendData (pdev, 
 8002e5c:	4619      	mov	r1, r3
        pep->rem_length -=  pep->maxpacket;
 8002e5e:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8002e60:	b292      	uxth	r2, r2
 8002e62:	f000 fa4f 	bl	8003304 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002e66:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f000 fcf9 	bl	8003864 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002e72:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002e80:	2000      	movs	r0, #0
 8002e82:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002e84:	6983      	ldr	r3, [r0, #24]
 8002e86:	fbb3 f5f2 	udiv	r5, r3, r2
 8002e8a:	fb02 3515 	mls	r5, r2, r5, r3
 8002e8e:	b965      	cbnz	r5, 8002eaa <USBD_LL_DataInStage+0x6c>
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d80a      	bhi.n	8002eaa <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002e94:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d206      	bcs.n	8002eaa <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002e9c:	462a      	mov	r2, r5
 8002e9e:	f000 fa31 	bl	8003304 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002ea2:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002ea6:	462b      	mov	r3, r5
 8002ea8:	e7de      	b.n	8002e68 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002eaa:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	b12b      	cbz	r3, 8002ebe <USBD_LL_DataInStage+0x80>
 8002eb2:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002eb6:	2a03      	cmp	r2, #3
 8002eb8:	d101      	bne.n	8002ebe <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002eba:	4620      	mov	r0, r4
 8002ebc:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f000 fa4a 	bl	8003358 <USBD_CtlReceiveStatus>
 8002ec4:	e7d5      	b.n	8002e72 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002ec6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0d7      	beq.n	8002e80 <USBD_LL_DataInStage+0x42>
 8002ed0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002ed4:	2a03      	cmp	r2, #3
 8002ed6:	d1d3      	bne.n	8002e80 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002ed8:	4798      	blx	r3
 8002eda:	e7d1      	b.n	8002e80 <USBD_LL_DataInStage+0x42>

08002edc <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002edc:	2200      	movs	r2, #0
{
 8002ede:	b538      	push	{r3, r4, r5, lr}
 8002ee0:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002ee2:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	2340      	movs	r3, #64	; 0x40
 8002ee8:	f000 fc52 	bl	8003790 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002eec:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002eee:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f000 fc4a 	bl	8003790 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002efc:	2301      	movs	r3, #1
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002efe:	6225      	str	r5, [r4, #32]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f00:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002f04:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8002f08:	b12b      	cbz	r3, 8002f16 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002f0a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002f0e:	4620      	mov	r0, r4
 8002f10:	7921      	ldrb	r1, [r4, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002f16:	2000      	movs	r0, #0
 8002f18:	bd38      	pop	{r3, r4, r5, pc}

08002f1a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002f1a:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	4770      	bx	lr

08002f20 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002f20:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002f24:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002f28:	2304      	movs	r3, #4
 8002f2a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002f2e:	2000      	movs	r0, #0
 8002f30:	4770      	bx	lr

08002f32 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002f32:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002f36:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	4770      	bx	lr

08002f3e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002f3e:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f40:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002f44:	2a03      	cmp	r2, #3
 8002f46:	d104      	bne.n	8002f52 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002f48:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	b103      	cbz	r3, 8002f52 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002f50:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002f52:	2000      	movs	r0, #0
 8002f54:	bd08      	pop	{r3, pc}

08002f56 <USBD_LL_IsoINIncomplete>:
 8002f56:	2000      	movs	r0, #0
 8002f58:	4770      	bx	lr

08002f5a <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	4770      	bx	lr

08002f5e <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 8002f5e:	2000      	movs	r0, #0
 8002f60:	4770      	bx	lr

08002f62 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f62:	2201      	movs	r2, #1
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002f64:	7901      	ldrb	r1, [r0, #4]
{
 8002f66:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f68:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002f6c:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8002f70:	6852      	ldr	r2, [r2, #4]
 8002f72:	4790      	blx	r2
   
  return USBD_OK;
}
 8002f74:	2000      	movs	r0, #0
 8002f76:	bd08      	pop	{r3, pc}

08002f78 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002f7c:	2180      	movs	r1, #128	; 0x80
 8002f7e:	f000 fc25 	bl	80037cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002f82:	2100      	movs	r1, #0
 8002f84:	4620      	mov	r0, r4
}
 8002f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002f8a:	f000 bc1f 	b.w	80037cc <USBD_LL_StallEP>
	...

08002f90 <USBD_StdDevReq>:
{
 8002f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002f92:	784b      	ldrb	r3, [r1, #1]
{
 8002f94:	4604      	mov	r4, r0
 8002f96:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	f200 8082 	bhi.w	80030a2 <USBD_StdDevReq+0x112>
 8002f9e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002fa2:	00d1      	.short	0x00d1
 8002fa4:	008000ed 	.word	0x008000ed
 8002fa8:	008000e1 	.word	0x008000e1
 8002fac:	000a0075 	.word	0x000a0075
 8002fb0:	00c10080 	.word	0x00c10080
 8002fb4:	0095      	.short	0x0095
  switch (req->wValue >> 8)
 8002fb6:	884b      	ldrh	r3, [r1, #2]
 8002fb8:	0a1a      	lsrs	r2, r3, #8
 8002fba:	3a01      	subs	r2, #1
 8002fbc:	2a0e      	cmp	r2, #14
 8002fbe:	d870      	bhi.n	80030a2 <USBD_StdDevReq+0x112>
 8002fc0:	e8df f002 	tbb	[pc, r2]
 8002fc4:	6f312420 	.word	0x6f312420
 8002fc8:	6f5a516f 	.word	0x6f5a516f
 8002fcc:	6f6f6f6f 	.word	0x6f6f6f6f
 8002fd0:	6f6f      	.short	0x6f6f
 8002fd2:	08          	.byte	0x08
 8002fd3:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8002fd4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002fd8:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002fda:	f10d 0106 	add.w	r1, sp, #6
 8002fde:	7c20      	ldrb	r0, [r4, #16]
 8002fe0:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002fe2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002fe6:	2a00      	cmp	r2, #0
 8002fe8:	d06b      	beq.n	80030c2 <USBD_StdDevReq+0x132>
 8002fea:	88eb      	ldrh	r3, [r5, #6]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d068      	beq.n	80030c2 <USBD_StdDevReq+0x132>
    len = MIN(len , req->wLength);
 8002ff0:	429a      	cmp	r2, r3
    USBD_CtlSendData (pdev, 
 8002ff2:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002ff4:	bf28      	it	cs
 8002ff6:	461a      	movcs	r2, r3
 8002ff8:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f000 f974 	bl	80032ea <USBD_CtlSendData>
 8003002:	e05e      	b.n	80030c2 <USBD_StdDevReq+0x132>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003004:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	e7e6      	b.n	8002fda <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800300c:	7c02      	ldrb	r2, [r0, #16]
 800300e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003012:	b932      	cbnz	r2, 8003022 <USBD_StdDevReq+0x92>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003016:	f10d 0006 	add.w	r0, sp, #6
 800301a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800301c:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800301e:	7043      	strb	r3, [r0, #1]
 8003020:	e7df      	b.n	8002fe2 <USBD_StdDevReq+0x52>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	e7f7      	b.n	8003016 <USBD_StdDevReq+0x86>
    switch ((uint8_t)(req->wValue))
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b05      	cmp	r3, #5
 800302a:	d83a      	bhi.n	80030a2 <USBD_StdDevReq+0x112>
 800302c:	e8df f003 	tbb	[pc, r3]
 8003030:	0f0b0703 	.word	0x0f0b0703
 8003034:	1713      	.short	0x1713
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003036:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	e7cd      	b.n	8002fda <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800303e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	e7c9      	b.n	8002fda <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003046:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	e7c5      	b.n	8002fda <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800304e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	e7c1      	b.n	8002fda <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003056:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	e7bd      	b.n	8002fda <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800305e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	e7b9      	b.n	8002fda <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003066:	7c03      	ldrb	r3, [r0, #16]
 8003068:	b9db      	cbnz	r3, 80030a2 <USBD_StdDevReq+0x112>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800306a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800306e:	f10d 0006 	add.w	r0, sp, #6
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	4798      	blx	r3
 8003076:	e7b4      	b.n	8002fe2 <USBD_StdDevReq+0x52>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003078:	7c03      	ldrb	r3, [r0, #16]
 800307a:	b993      	cbnz	r3, 80030a2 <USBD_StdDevReq+0x112>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800307c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003080:	f10d 0006 	add.w	r0, sp, #6
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003088:	2307      	movs	r3, #7
 800308a:	e7c8      	b.n	800301e <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800308c:	888b      	ldrh	r3, [r1, #4]
 800308e:	b943      	cbnz	r3, 80030a2 <USBD_StdDevReq+0x112>
 8003090:	88cb      	ldrh	r3, [r1, #6]
 8003092:	b933      	cbnz	r3, 80030a2 <USBD_StdDevReq+0x112>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003094:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003098:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800309a:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800309c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80030a0:	d103      	bne.n	80030aa <USBD_StdDevReq+0x11a>
    USBD_CtlError(pdev , req);
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7ff ff68 	bl	8002f78 <USBD_CtlError.constprop.0>
    break;
 80030a8:	e00b      	b.n	80030c2 <USBD_StdDevReq+0x132>
      pdev->dev_address = dev_addr;
 80030aa:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80030ae:	4629      	mov	r1, r5
 80030b0:	f000 fbbc 	bl	800382c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80030b4:	4620      	mov	r0, r4
 80030b6:	f000 f944 	bl	8003342 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80030ba:	b12d      	cbz	r5, 80030c8 <USBD_StdDevReq+0x138>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80030bc:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80030be:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80030c2:	2000      	movs	r0, #0
 80030c4:	b003      	add	sp, #12
 80030c6:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80030c8:	2301      	movs	r3, #1
 80030ca:	e7f8      	b.n	80030be <USBD_StdDevReq+0x12e>
  cfgidx = (uint8_t)(req->wValue);                 
 80030cc:	7889      	ldrb	r1, [r1, #2]
 80030ce:	4d30      	ldr	r5, [pc, #192]	; (8003190 <USBD_StdDevReq+0x200>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80030d0:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80030d2:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80030d4:	d8e5      	bhi.n	80030a2 <USBD_StdDevReq+0x112>
    switch (pdev->dev_state) 
 80030d6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d00c      	beq.n	80030f8 <USBD_StdDevReq+0x168>
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d1df      	bne.n	80030a2 <USBD_StdDevReq+0x112>
      if (cfgidx == 0) 
 80030e2:	b9b1      	cbnz	r1, 8003112 <USBD_StdDevReq+0x182>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80030e4:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80030e6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80030e8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80030ec:	f7ff fe41 	bl	8002d72 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80030f0:	4620      	mov	r0, r4
 80030f2:	f000 f926 	bl	8003342 <USBD_CtlSendStatus>
 80030f6:	e7e4      	b.n	80030c2 <USBD_StdDevReq+0x132>
      if (cfgidx) 
 80030f8:	2900      	cmp	r1, #0
 80030fa:	d0f9      	beq.n	80030f0 <USBD_StdDevReq+0x160>
        pdev->dev_config = cfgidx;
 80030fc:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80030fe:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003100:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003102:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003106:	4620      	mov	r0, r4
 8003108:	f7ff fe28 	bl	8002d5c <USBD_SetClassConfig>
 800310c:	2802      	cmp	r0, #2
 800310e:	d1ef      	bne.n	80030f0 <USBD_StdDevReq+0x160>
 8003110:	e7c7      	b.n	80030a2 <USBD_StdDevReq+0x112>
      else  if (cfgidx != pdev->dev_config) 
 8003112:	6841      	ldr	r1, [r0, #4]
 8003114:	2901      	cmp	r1, #1
 8003116:	d0eb      	beq.n	80030f0 <USBD_StdDevReq+0x160>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8003118:	b2c9      	uxtb	r1, r1
 800311a:	f7ff fe2a 	bl	8002d72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800311e:	7829      	ldrb	r1, [r5, #0]
 8003120:	6061      	str	r1, [r4, #4]
 8003122:	e7f0      	b.n	8003106 <USBD_StdDevReq+0x176>
  if (req->wLength != 1) 
 8003124:	88ca      	ldrh	r2, [r1, #6]
 8003126:	2a01      	cmp	r2, #1
 8003128:	d1bb      	bne.n	80030a2 <USBD_StdDevReq+0x112>
    switch (pdev->dev_state )  
 800312a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800312e:	2b02      	cmp	r3, #2
 8003130:	d003      	beq.n	800313a <USBD_StdDevReq+0x1aa>
 8003132:	2b03      	cmp	r3, #3
 8003134:	d1b5      	bne.n	80030a2 <USBD_StdDevReq+0x112>
      USBD_CtlSendData (pdev, 
 8003136:	1d01      	adds	r1, r0, #4
 8003138:	e760      	b.n	8002ffc <USBD_StdDevReq+0x6c>
      pdev->dev_default_config = 0;
 800313a:	4601      	mov	r1, r0
 800313c:	2300      	movs	r3, #0
 800313e:	f841 3f08 	str.w	r3, [r1, #8]!
 8003142:	e75b      	b.n	8002ffc <USBD_StdDevReq+0x6c>
  switch (pdev->dev_state) 
 8003144:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003148:	3b02      	subs	r3, #2
 800314a:	2b01      	cmp	r3, #1
 800314c:	d8a9      	bhi.n	80030a2 <USBD_StdDevReq+0x112>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800314e:	2301      	movs	r3, #1
 8003150:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8003152:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003156:	b10b      	cbz	r3, 800315c <USBD_StdDevReq+0x1cc>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8003158:	2303      	movs	r3, #3
 800315a:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800315c:	2202      	movs	r2, #2
 800315e:	f104 010c 	add.w	r1, r4, #12
 8003162:	e74b      	b.n	8002ffc <USBD_StdDevReq+0x6c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003164:	884b      	ldrh	r3, [r1, #2]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d1ab      	bne.n	80030c2 <USBD_StdDevReq+0x132>
      pdev->dev_remote_wakeup = 0; 
 800316a:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800316e:	4629      	mov	r1, r5
 8003170:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003174:	4620      	mov	r0, r4
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	4798      	blx	r3
 800317a:	e7b9      	b.n	80030f0 <USBD_StdDevReq+0x160>
  switch (pdev->dev_state)
 800317c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003180:	3b02      	subs	r3, #2
 8003182:	2b01      	cmp	r3, #1
 8003184:	d88d      	bhi.n	80030a2 <USBD_StdDevReq+0x112>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003186:	884b      	ldrh	r3, [r1, #2]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d19a      	bne.n	80030c2 <USBD_StdDevReq+0x132>
      pdev->dev_remote_wakeup = 0; 
 800318c:	2300      	movs	r3, #0
 800318e:	e7ec      	b.n	800316a <USBD_StdDevReq+0x1da>
 8003190:	200001f1 	.word	0x200001f1

08003194 <USBD_StdItfReq>:
{
 8003194:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8003196:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 800319a:	4604      	mov	r4, r0
 800319c:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d10d      	bne.n	80031be <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80031a2:	790b      	ldrb	r3, [r1, #4]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d80a      	bhi.n	80031be <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80031a8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80031b0:	88eb      	ldrh	r3, [r5, #6]
 80031b2:	b913      	cbnz	r3, 80031ba <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80031b4:	4620      	mov	r0, r4
 80031b6:	f000 f8c4 	bl	8003342 <USBD_CtlSendStatus>
}
 80031ba:	2000      	movs	r0, #0
 80031bc:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80031be:	f7ff fedb 	bl	8002f78 <USBD_CtlError.constprop.0>
    break;
 80031c2:	e7fa      	b.n	80031ba <USBD_StdItfReq+0x26>

080031c4 <USBD_StdEPReq>:
{
 80031c4:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80031c6:	780a      	ldrb	r2, [r1, #0]
{
 80031c8:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);   
 80031ca:	888e      	ldrh	r6, [r1, #4]
{
 80031cc:	460d      	mov	r5, r1
  if ((req->bmRequest & 0x60) == 0x20)
 80031ce:	f002 0260 	and.w	r2, r2, #96	; 0x60
  ep_addr  = LOBYTE(req->wIndex);   
 80031d2:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80031d4:	2a20      	cmp	r2, #32
 80031d6:	d105      	bne.n	80031e4 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80031d8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4798      	blx	r3
}
 80031e0:	2000      	movs	r0, #0
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80031e4:	784a      	ldrb	r2, [r1, #1]
 80031e6:	2a01      	cmp	r2, #1
 80031e8:	d01c      	beq.n	8003224 <USBD_StdEPReq+0x60>
 80031ea:	d32a      	bcc.n	8003242 <USBD_StdEPReq+0x7e>
 80031ec:	2a03      	cmp	r2, #3
 80031ee:	d1f7      	bne.n	80031e0 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80031f0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80031f4:	2a02      	cmp	r2, #2
 80031f6:	d040      	beq.n	800327a <USBD_StdEPReq+0xb6>
 80031f8:	2a03      	cmp	r2, #3
 80031fa:	d002      	beq.n	8003202 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80031fc:	f7ff febc 	bl	8002f78 <USBD_CtlError.constprop.0>
      break;
 8003200:	e7ee      	b.n	80031e0 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003202:	884a      	ldrh	r2, [r1, #2]
 8003204:	b922      	cbnz	r2, 8003210 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003206:	065e      	lsls	r6, r3, #25
 8003208:	d002      	beq.n	8003210 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800320a:	4619      	mov	r1, r3
 800320c:	f000 fade 	bl	80037cc <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003210:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003214:	4629      	mov	r1, r5
 8003216:	4620      	mov	r0, r4
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800321c:	4620      	mov	r0, r4
 800321e:	f000 f890 	bl	8003342 <USBD_CtlSendStatus>
 8003222:	e7dd      	b.n	80031e0 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003224:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003228:	2a02      	cmp	r2, #2
 800322a:	d026      	beq.n	800327a <USBD_StdEPReq+0xb6>
 800322c:	2a03      	cmp	r2, #3
 800322e:	d1e5      	bne.n	80031fc <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003230:	884a      	ldrh	r2, [r1, #2]
 8003232:	2a00      	cmp	r2, #0
 8003234:	d1d4      	bne.n	80031e0 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 8003236:	0659      	lsls	r1, r3, #25
 8003238:	d0f0      	beq.n	800321c <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800323a:	4619      	mov	r1, r3
 800323c:	f000 fad4 	bl	80037e8 <USBD_LL_ClearStallEP>
 8003240:	e7e6      	b.n	8003210 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8003242:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003246:	2a02      	cmp	r2, #2
 8003248:	d017      	beq.n	800327a <USBD_StdEPReq+0xb6>
 800324a:	2a03      	cmp	r2, #3
 800324c:	d1d6      	bne.n	80031fc <USBD_StdEPReq+0x38>
 800324e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003252:	f016 0f80 	tst.w	r6, #128	; 0x80
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003256:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8003258:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800325c:	bf14      	ite	ne
 800325e:	3514      	addne	r5, #20
 8003260:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8003264:	f000 face 	bl	8003804 <USBD_LL_IsStallEP>
 8003268:	b168      	cbz	r0, 8003286 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800326a:	2301      	movs	r3, #1
 800326c:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800326e:	2202      	movs	r2, #2
 8003270:	4629      	mov	r1, r5
 8003272:	4620      	mov	r0, r4
 8003274:	f000 f839 	bl	80032ea <USBD_CtlSendData>
      break;
 8003278:	e7b2      	b.n	80031e0 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800327a:	065a      	lsls	r2, r3, #25
 800327c:	d0b0      	beq.n	80031e0 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800327e:	4619      	mov	r1, r3
 8003280:	f000 faa4 	bl	80037cc <USBD_LL_StallEP>
 8003284:	e7ac      	b.n	80031e0 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8003286:	6028      	str	r0, [r5, #0]
 8003288:	e7f1      	b.n	800326e <USBD_StdEPReq+0xaa>

0800328a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800328a:	780b      	ldrb	r3, [r1, #0]
 800328c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800328e:	784b      	ldrb	r3, [r1, #1]
 8003290:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003292:	78ca      	ldrb	r2, [r1, #3]
 8003294:	788b      	ldrb	r3, [r1, #2]
 8003296:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800329a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800329c:	794a      	ldrb	r2, [r1, #5]
 800329e:	790b      	ldrb	r3, [r1, #4]
 80032a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80032a4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80032a6:	79ca      	ldrb	r2, [r1, #7]
 80032a8:	798b      	ldrb	r3, [r1, #6]
 80032aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80032ae:	80c3      	strh	r3, [r0, #6]
 80032b0:	4770      	bx	lr

080032b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80032b2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80032b4:	b188      	cbz	r0, 80032da <USBD_GetString+0x28>
 80032b6:	4605      	mov	r5, r0
 80032b8:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80032ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2c00      	cmp	r4, #0
 80032c2:	d1f9      	bne.n	80032b8 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	3801      	subs	r0, #1
 80032c8:	3302      	adds	r3, #2
 80032ca:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80032cc:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80032ce:	2303      	movs	r3, #3
 80032d0:	704b      	strb	r3, [r1, #1]
 80032d2:	2302      	movs	r3, #2
    while (*desc != '\0') 
 80032d4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80032d8:	b905      	cbnz	r5, 80032dc <USBD_GetString+0x2a>
 80032da:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 80032e0:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 80032e2:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	548c      	strb	r4, [r1, r2]
 80032e8:	e7f4      	b.n	80032d4 <USBD_GetString+0x22>

080032ea <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80032ea:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80032ec:	2202      	movs	r2, #2
{
 80032ee:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80032f0:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80032f4:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
 80032f6:	6183      	str	r3, [r0, #24]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80032f8:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 80032fa:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80032fc:	f000 faa4 	bl	8003848 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003300:	2000      	movs	r0, #0
 8003302:	bd10      	pop	{r4, pc}

08003304 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003304:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003306:	4613      	mov	r3, r2
 8003308:	460a      	mov	r2, r1
 800330a:	2100      	movs	r1, #0
 800330c:	f000 fa9c 	bl	8003848 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003310:	2000      	movs	r0, #0
 8003312:	bd08      	pop	{r3, pc}

08003314 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8003314:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8003316:	2203      	movs	r2, #3
{
 8003318:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800331a:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800331e:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8003320:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  USBD_LL_PrepareReceive (pdev,
 8003324:	2100      	movs	r1, #0
  pdev->ep_out[0].rem_length   = len;
 8003326:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 800332a:	f000 fa9b 	bl	8003864 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800332e:	2000      	movs	r0, #0
 8003330:	bd10      	pop	{r4, pc}

08003332 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003332:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 8003334:	4613      	mov	r3, r2
 8003336:	460a      	mov	r2, r1
 8003338:	2100      	movs	r1, #0
 800333a:	f000 fa93 	bl	8003864 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800333e:	2000      	movs	r0, #0
 8003340:	bd08      	pop	{r3, pc}

08003342 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003342:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003344:	2304      	movs	r3, #4
 8003346:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800334a:	2300      	movs	r3, #0
 800334c:	461a      	mov	r2, r3
 800334e:	4619      	mov	r1, r3
 8003350:	f000 fa7a 	bl	8003848 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003354:	2000      	movs	r0, #0
 8003356:	bd08      	pop	{r3, pc}

08003358 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003358:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800335a:	2305      	movs	r3, #5
 800335c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003360:	2300      	movs	r3, #0
 8003362:	461a      	mov	r2, r3
 8003364:	4619      	mov	r1, r3
 8003366:	f000 fa7d 	bl	8003864 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800336a:	2000      	movs	r0, #0
 800336c:	bd08      	pop	{r3, pc}
	...

08003370 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <MX_GPIO_Init+0x2c>)
{
 8003372:	b082      	sub	sp, #8
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
 800337c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800337e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003382:	9200      	str	r2, [sp, #0]
 8003384:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	9b01      	ldr	r3, [sp, #4]

}
 8003398:	b002      	add	sp, #8
 800339a:	4770      	bx	lr
 800339c:	40023800 	.word	0x40023800

080033a0 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	4b2e      	ldr	r3, [pc, #184]	; (800345c <SystemClock_Config+0xbc>)
 80033a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 80033a8:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
{
 80033ac:	b0b8      	sub	sp, #224	; 0xe0
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033b0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 6;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033b2:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033bc:	4b28      	ldr	r3, [pc, #160]	; (8003460 <SystemClock_Config+0xc0>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c8:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033ce:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033d4:	2301      	movs	r3, #1
 80033d6:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033dc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033e2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 80033e4:	2306      	movs	r3, #6
 80033e6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80033e8:	23d8      	movs	r3, #216	; 0xd8
 80033ea:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80033ec:	2309      	movs	r3, #9
 80033ee:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033f0:	f7fe f81a 	bl	8001428 <HAL_RCC_OscConfig>
 80033f4:	b100      	cbz	r0, 80033f8 <SystemClock_Config+0x58>
 80033f6:	e7fe      	b.n	80033f6 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80033f8:	f7fd ffde 	bl	80013b8 <HAL_PWREx_EnableOverDrive>
 80033fc:	b100      	cbz	r0, 8003400 <SystemClock_Config+0x60>
 80033fe:	e7fe      	b.n	80033fe <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003400:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003402:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003404:	2107      	movs	r1, #7
 8003406:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003408:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800340a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800340e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003410:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003416:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003418:	f7fe fa4c 	bl	80018b4 <HAL_RCC_ClockConfig>
 800341c:	b100      	cbz	r0, 8003420 <SystemClock_Config+0x80>
 800341e:	e7fe      	b.n	800341e <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003420:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003424:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003426:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003428:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800342a:	f7fe fb41 	bl	8001ab0 <HAL_RCCEx_PeriphCLKConfig>
 800342e:	4604      	mov	r4, r0
 8003430:	b100      	cbz	r0, 8003434 <SystemClock_Config+0x94>
 8003432:	e7fe      	b.n	8003432 <SystemClock_Config+0x92>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003434:	f7fe fb36 	bl	8001aa4 <HAL_RCC_GetHCLKFreq>
 8003438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800343c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003440:	f7fd f952 	bl	80006e8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003444:	2004      	movs	r0, #4
 8003446:	f7fd f965 	bl	8000714 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800344a:	4622      	mov	r2, r4
 800344c:	4621      	mov	r1, r4
 800344e:	f04f 30ff 	mov.w	r0, #4294967295
 8003452:	f7fd f8eb 	bl	800062c <HAL_NVIC_SetPriority>
}
 8003456:	b038      	add	sp, #224	; 0xe0
 8003458:	bd10      	pop	{r4, pc}
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	40007000 	.word	0x40007000

08003464 <main>:
{
 8003464:	b508      	push	{r3, lr}
  HAL_Init();
 8003466:	f7fd f893 	bl	8000590 <HAL_Init>
  SystemClock_Config();
 800346a:	f7ff ff99 	bl	80033a0 <SystemClock_Config>
  MX_GPIO_Init();
 800346e:	f7ff ff7f 	bl	8003370 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8003472:	f000 f86f 	bl	8003554 <MX_USB_DEVICE_Init>
 8003476:	e7fe      	b.n	8003476 <main+0x12>

08003478 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003478:	e7fe      	b.n	8003478 <_Error_Handler>

0800347a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 800347a:	4770      	bx	lr

0800347c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800347c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800347e:	2003      	movs	r0, #3
 8003480:	f7fd f8b6 	bl	80005f0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003484:	2200      	movs	r2, #0
 8003486:	f06f 000b 	mvn.w	r0, #11
 800348a:	4611      	mov	r1, r2
 800348c:	f7fd f8ce 	bl	800062c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003490:	2200      	movs	r2, #0
 8003492:	f06f 000a 	mvn.w	r0, #10
 8003496:	4611      	mov	r1, r2
 8003498:	f7fd f8c8 	bl	800062c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800349c:	2200      	movs	r2, #0
 800349e:	f06f 0009 	mvn.w	r0, #9
 80034a2:	4611      	mov	r1, r2
 80034a4:	f7fd f8c2 	bl	800062c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80034a8:	2200      	movs	r2, #0
 80034aa:	f06f 0004 	mvn.w	r0, #4
 80034ae:	4611      	mov	r1, r2
 80034b0:	f7fd f8bc 	bl	800062c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80034b4:	2200      	movs	r2, #0
 80034b6:	f06f 0003 	mvn.w	r0, #3
 80034ba:	4611      	mov	r1, r2
 80034bc:	f7fd f8b6 	bl	800062c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80034c0:	2200      	movs	r2, #0
 80034c2:	f06f 0001 	mvn.w	r0, #1
 80034c6:	4611      	mov	r1, r2
 80034c8:	f7fd f8b0 	bl	800062c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	f04f 30ff 	mov.w	r0, #4294967295
 80034d2:	4611      	mov	r1, r2

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80034d8:	f7fd b8a8 	b.w	800062c <HAL_NVIC_SetPriority>

080034dc <NMI_Handler>:
 80034dc:	4770      	bx	lr

080034de <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80034de:	e7fe      	b.n	80034de <HardFault_Handler>

080034e0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80034e0:	e7fe      	b.n	80034e0 <MemManage_Handler>

080034e2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80034e2:	e7fe      	b.n	80034e2 <BusFault_Handler>

080034e4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80034e4:	e7fe      	b.n	80034e4 <UsageFault_Handler>

080034e6 <SVC_Handler>:
 80034e6:	4770      	bx	lr

080034e8 <DebugMon_Handler>:
 80034e8:	4770      	bx	lr

080034ea <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80034ea:	4770      	bx	lr

080034ec <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80034ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034ee:	f7fd f85b 	bl	80005a8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80034f6:	f7fd b926 	b.w	8000746 <HAL_SYSTICK_IRQHandler>
	...

080034fc <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <OTG_FS_IRQHandler+0x8>)
 80034fe:	f7fd bb13 	b.w	8000b28 <HAL_PCD_IRQHandler>
 8003502:	bf00      	nop
 8003504:	20001428 	.word	0x20001428

08003508 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003508:	490f      	ldr	r1, [pc, #60]	; (8003548 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800350a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800350c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <SystemInit+0x44>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003522:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800352a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800352e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003530:	4a07      	ldr	r2, [pc, #28]	; (8003550 <SystemInit+0x48>)
 8003532:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800353a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800353c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800353e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003542:	608b      	str	r3, [r1, #8]
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000ed00 	.word	0xe000ed00
 800354c:	40023800 	.word	0x40023800
 8003550:	24003010 	.word	0x24003010

08003554 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003554:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003556:	4c09      	ldr	r4, [pc, #36]	; (800357c <MX_USB_DEVICE_Init+0x28>)
 8003558:	2200      	movs	r2, #0
 800355a:	4909      	ldr	r1, [pc, #36]	; (8003580 <MX_USB_DEVICE_Init+0x2c>)
 800355c:	4620      	mov	r0, r4
 800355e:	f7ff fbdc 	bl	8002d1a <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8003562:	4908      	ldr	r1, [pc, #32]	; (8003584 <MX_USB_DEVICE_Init+0x30>)
 8003564:	4620      	mov	r0, r4
 8003566:	f7ff fbed 	bl	8002d44 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800356a:	4620      	mov	r0, r4
 800356c:	4906      	ldr	r1, [pc, #24]	; (8003588 <MX_USB_DEVICE_Init+0x34>)
 800356e:	f7ff fbac 	bl	8002cca <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8003572:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8003578:	f7ff bbeb 	b.w	8002d52 <USBD_Start>
 800357c:	20000204 	.word	0x20000204
 8003580:	2000012c 	.word	0x2000012c
 8003584:	20000008 	.word	0x20000008
 8003588:	2000011c 	.word	0x2000011c

0800358c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800358c:	2000      	movs	r0, #0
 800358e:	4770      	bx	lr

08003590 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003590:	2000      	movs	r0, #0
 8003592:	4770      	bx	lr

08003594 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003594:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8003596:	4c05      	ldr	r4, [pc, #20]	; (80035ac <CDC_Receive_FS+0x18>)
 8003598:	4601      	mov	r1, r0
 800359a:	4620      	mov	r0, r4
 800359c:	f7ff fba4 	bl	8002ce8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80035a0:	4620      	mov	r0, r4
 80035a2:	f7ff fba7 	bl	8002cf4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80035a6:	2000      	movs	r0, #0
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	bf00      	nop
 80035ac:	20000204 	.word	0x20000204

080035b0 <CDC_Init_FS>:
{
 80035b0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80035b2:	4c06      	ldr	r4, [pc, #24]	; (80035cc <CDC_Init_FS+0x1c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	4906      	ldr	r1, [pc, #24]	; (80035d0 <CDC_Init_FS+0x20>)
 80035b8:	4620      	mov	r0, r4
 80035ba:	f7ff fb8d 	bl	8002cd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80035be:	4905      	ldr	r1, [pc, #20]	; (80035d4 <CDC_Init_FS+0x24>)
 80035c0:	4620      	mov	r0, r4
 80035c2:	f7ff fb91 	bl	8002ce8 <USBD_CDC_SetRxBuffer>
}
 80035c6:	2000      	movs	r0, #0
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	bf00      	nop
 80035cc:	20000204 	.word	0x20000204
 80035d0:	20000c28 	.word	0x20000c28
 80035d4:	20000428 	.word	0x20000428

080035d8 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80035d8:	6803      	ldr	r3, [r0, #0]
 80035da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80035de:	b510      	push	{r4, lr}
 80035e0:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 80035e2:	d132      	bne.n	800364a <HAL_PCD_MspInit+0x72>
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035e4:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035e6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ea:	a903      	add	r1, sp, #12
 80035ec:	4818      	ldr	r0, [pc, #96]	; (8003650 <HAL_PCD_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f4:	f7fd f8ac 	bl	8000750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80035f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fc:	a903      	add	r1, sp, #12
 80035fe:	4814      	ldr	r0, [pc, #80]	; (8003650 <HAL_PCD_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003600:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003608:	2303      	movs	r3, #3
 800360a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800360c:	230a      	movs	r3, #10
 800360e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003610:	f7fd f89e 	bl	8000750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003614:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <HAL_PCD_MspInit+0x7c>)

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003616:	2043      	movs	r0, #67	; 0x43
 8003618:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800361a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800361c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003620:	635a      	str	r2, [r3, #52]	; 0x34
 8003622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003624:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003628:	9201      	str	r2, [sp, #4]
 800362a:	9a01      	ldr	r2, [sp, #4]
 800362c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800362e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003632:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003634:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363c:	9302      	str	r3, [sp, #8]
 800363e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003640:	f7fc fff4 	bl	800062c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003644:	2043      	movs	r0, #67	; 0x43
 8003646:	f7fd f839 	bl	80006bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800364a:	b008      	add	sp, #32
 800364c:	bd10      	pop	{r4, pc}
 800364e:	bf00      	nop
 8003650:	40020000 	.word	0x40020000
 8003654:	40023800 	.word	0x40023800

08003658 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003658:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 800365c:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8003660:	f7ff bb8e 	b.w	8002d80 <USBD_LL_SetupStage>

08003664 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003664:	231c      	movs	r3, #28
 8003666:	fb03 0301 	mla	r3, r3, r1, r0
 800366a:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800366e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003672:	f7ff bbb2 	b.w	8002dda <USBD_LL_DataOutStage>

08003676 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003676:	231c      	movs	r3, #28
 8003678:	fb03 0301 	mla	r3, r3, r1, r0
 800367c:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8003680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003682:	f7ff bbdc 	b.w	8002e3e <USBD_LL_DataInStage>

08003686 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003686:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800368a:	f7ff bc58 	b.w	8002f3e <USBD_LL_SOF>

0800368e <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 800368e:	68c1      	ldr	r1, [r0, #12]
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003690:	3100      	adds	r1, #0
{ 
 8003692:	b510      	push	{r4, lr}
 8003694:	4604      	mov	r4, r0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003696:	bf18      	it	ne
 8003698:	2101      	movne	r1, #1
 800369a:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800369e:	f7ff fc3c 	bl	8002f1a <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80036a2:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
}
 80036a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80036aa:	f7ff bc17 	b.w	8002edc <USBD_LL_Reset>
	...

080036b0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80036b0:	b510      	push	{r4, lr}
 80036b2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80036b4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80036b8:	f7ff fc32 	bl	8002f20 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80036bc:	6822      	ldr	r2, [r4, #0]
 80036be:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80036ca:	6a23      	ldr	r3, [r4, #32]
 80036cc:	b123      	cbz	r3, 80036d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80036ce:	4a03      	ldr	r2, [pc, #12]	; (80036dc <HAL_PCD_SuspendCallback+0x2c>)
 80036d0:	6913      	ldr	r3, [r2, #16]
 80036d2:	f043 0306 	orr.w	r3, r3, #6
 80036d6:	6113      	str	r3, [r2, #16]
 80036d8:	bd10      	pop	{r4, pc}
 80036da:	bf00      	nop
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80036e0:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80036e4:	f7ff bc25 	b.w	8002f32 <USBD_LL_Resume>

080036e8 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80036e8:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80036ec:	f7ff bc35 	b.w	8002f5a <USBD_LL_IsoOUTIncomplete>

080036f0 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80036f0:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80036f4:	f7ff bc2f 	b.w	8002f56 <USBD_LL_IsoINIncomplete>

080036f8 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80036f8:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80036fc:	f7ff bc2f 	b.w	8002f5e <USBD_LL_DevConnected>

08003700 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8003700:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8003704:	f7ff bc2d 	b.w	8002f62 <USBD_LL_DevDisconnected>

08003708 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003708:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800370a:	7802      	ldrb	r2, [r0, #0]
 800370c:	bb5a      	cbnz	r2, 8003766 <USBD_LL_Init+0x5e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800370e:	4b17      	ldr	r3, [pc, #92]	; (800376c <USBD_LL_Init+0x64>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003710:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8003712:	f8c3 03fc 	str.w	r0, [r3, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8003716:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800371a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800371e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003720:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003722:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003724:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003726:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800372a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800372e:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003730:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003732:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003734:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003736:	2101      	movs	r1, #1
 8003738:	62d9      	str	r1, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800373a:	f7fd f95f 	bl	80009fc <HAL_PCD_Init>
 800373e:	b120      	cbz	r0, 800374a <USBD_LL_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003740:	f240 1151 	movw	r1, #337	; 0x151
 8003744:	480a      	ldr	r0, [pc, #40]	; (8003770 <USBD_LL_Init+0x68>)
 8003746:	f7ff fe97 	bl	8003478 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800374a:	2180      	movs	r1, #128	; 0x80
 800374c:	4807      	ldr	r0, [pc, #28]	; (800376c <USBD_LL_Init+0x64>)
 800374e:	f7fd fe1c 	bl	800138a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8003752:	2240      	movs	r2, #64	; 0x40
 8003754:	2100      	movs	r1, #0
 8003756:	4805      	ldr	r0, [pc, #20]	; (800376c <USBD_LL_Init+0x64>)
 8003758:	f7fd fdf7 	bl	800134a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800375c:	2280      	movs	r2, #128	; 0x80
 800375e:	2101      	movs	r1, #1
 8003760:	4802      	ldr	r0, [pc, #8]	; (800376c <USBD_LL_Init+0x64>)
 8003762:	f7fd fdf2 	bl	800134a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8003766:	2000      	movs	r0, #0
 8003768:	bd08      	pop	{r3, pc}
 800376a:	bf00      	nop
 800376c:	20001428 	.word	0x20001428
 8003770:	08003d3f 	.word	0x08003d3f

08003774 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003774:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003776:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800377a:	f7fd f9bf 	bl	8000afc <HAL_PCD_Start>
 800377e:	2803      	cmp	r0, #3
 8003780:	bf9a      	itte	ls
 8003782:	4b02      	ldrls	r3, [pc, #8]	; (800378c <USBD_LL_Start+0x18>)
 8003784:	5c18      	ldrbls	r0, [r3, r0]
 8003786:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8003788:	bd08      	pop	{r3, pc}
 800378a:	bf00      	nop
 800378c:	08003d3b 	.word	0x08003d3b

08003790 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003790:	b510      	push	{r4, lr}
 8003792:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003794:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003798:	4613      	mov	r3, r2
 800379a:	4622      	mov	r2, r4
 800379c:	f7fd fcd4 	bl	8001148 <HAL_PCD_EP_Open>
 80037a0:	2803      	cmp	r0, #3
 80037a2:	bf9a      	itte	ls
 80037a4:	4b01      	ldrls	r3, [pc, #4]	; (80037ac <USBD_LL_OpenEP+0x1c>)
 80037a6:	5c18      	ldrbls	r0, [r3, r0]
 80037a8:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80037aa:	bd10      	pop	{r4, pc}
 80037ac:	08003d3b 	.word	0x08003d3b

080037b0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80037b0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80037b2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80037b6:	f7fd fcf7 	bl	80011a8 <HAL_PCD_EP_Close>
 80037ba:	2803      	cmp	r0, #3
 80037bc:	bf9a      	itte	ls
 80037be:	4b02      	ldrls	r3, [pc, #8]	; (80037c8 <USBD_LL_CloseEP+0x18>)
 80037c0:	5c18      	ldrbls	r0, [r3, r0]
 80037c2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80037c4:	bd08      	pop	{r3, pc}
 80037c6:	bf00      	nop
 80037c8:	08003d3b 	.word	0x08003d3b

080037cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80037cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80037ce:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80037d2:	f7fd fd58 	bl	8001286 <HAL_PCD_EP_SetStall>
 80037d6:	2803      	cmp	r0, #3
 80037d8:	bf9a      	itte	ls
 80037da:	4b02      	ldrls	r3, [pc, #8]	; (80037e4 <USBD_LL_StallEP+0x18>)
 80037dc:	5c18      	ldrbls	r0, [r3, r0]
 80037de:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80037e0:	bd08      	pop	{r3, pc}
 80037e2:	bf00      	nop
 80037e4:	08003d3b 	.word	0x08003d3b

080037e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80037e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80037ea:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80037ee:	f7fd fd80 	bl	80012f2 <HAL_PCD_EP_ClrStall>
 80037f2:	2803      	cmp	r0, #3
 80037f4:	bf9a      	itte	ls
 80037f6:	4b02      	ldrls	r3, [pc, #8]	; (8003800 <USBD_LL_ClearStallEP+0x18>)
 80037f8:	5c18      	ldrbls	r0, [r3, r0]
 80037fa:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80037fc:	bd08      	pop	{r3, pc}
 80037fe:	bf00      	nop
 8003800:	08003d3b 	.word	0x08003d3b

08003804 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003804:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003808:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 800380c:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003810:	bf17      	itett	ne
 8003812:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003816:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800381a:	fb02 3101 	mlane	r1, r2, r1, r3
 800381e:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003822:	bf08      	it	eq
 8003824:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8003828:	4770      	bx	lr
	...

0800382c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800382c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800382e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003832:	f7fd fc77 	bl	8001124 <HAL_PCD_SetAddress>
 8003836:	2803      	cmp	r0, #3
 8003838:	bf9a      	itte	ls
 800383a:	4b02      	ldrls	r3, [pc, #8]	; (8003844 <USBD_LL_SetUSBAddress+0x18>)
 800383c:	5c18      	ldrbls	r0, [r3, r0]
 800383e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003840:	bd08      	pop	{r3, pc}
 8003842:	bf00      	nop
 8003844:	08003d3b 	.word	0x08003d3b

08003848 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003848:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800384a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800384e:	f7fd fcfa 	bl	8001246 <HAL_PCD_EP_Transmit>
 8003852:	2803      	cmp	r0, #3
 8003854:	bf9a      	itte	ls
 8003856:	4b02      	ldrls	r3, [pc, #8]	; (8003860 <USBD_LL_Transmit+0x18>)
 8003858:	5c18      	ldrbls	r0, [r3, r0]
 800385a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 800385c:	bd08      	pop	{r3, pc}
 800385e:	bf00      	nop
 8003860:	08003d3b 	.word	0x08003d3b

08003864 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003864:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003866:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800386a:	f7fd fcc0 	bl	80011ee <HAL_PCD_EP_Receive>
 800386e:	2803      	cmp	r0, #3
 8003870:	bf9a      	itte	ls
 8003872:	4b02      	ldrls	r3, [pc, #8]	; (800387c <USBD_LL_PrepareReceive+0x18>)
 8003874:	5c18      	ldrbls	r0, [r3, r0]
 8003876:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003878:	bd08      	pop	{r3, pc}
 800387a:	bf00      	nop
 800387c:	08003d3b 	.word	0x08003d3b

08003880 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003880:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003882:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003886:	f7fd fcd6 	bl	8001236 <HAL_PCD_EP_GetRxCount>
}
 800388a:	bd08      	pop	{r3, pc}

0800388c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800388c:	b510      	push	{r4, lr}
 800388e:	4604      	mov	r4, r0
  switch (msg)
 8003890:	b111      	cbz	r1, 8003898 <HAL_PCDEx_LPM_Callback+0xc>
 8003892:	2901      	cmp	r1, #1
 8003894:	d016      	beq.n	80038c4 <HAL_PCDEx_LPM_Callback+0x38>
 8003896:	bd10      	pop	{r4, pc}
  {
  case PCD_LPM_L0_ACTIVE:
    if (hpcd->Init.low_power_enable)
 8003898:	6a03      	ldr	r3, [r0, #32]
 800389a:	b133      	cbz	r3, 80038aa <HAL_PCDEx_LPM_Callback+0x1e>
    {
      SystemClock_Config();
 800389c:	f7ff fd80 	bl	80033a0 <SystemClock_Config>
      
      /* Reset SLEEPDEEP bit of Cortex System Control Register. */
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80038a0:	4a12      	ldr	r2, [pc, #72]	; (80038ec <HAL_PCDEx_LPM_Callback+0x60>)
 80038a2:	6913      	ldr	r3, [r2, #16]
 80038a4:	f023 0306 	bic.w	r3, r3, #6
 80038a8:	6113      	str	r3, [r2, #16]
    }
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80038aa:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 80038ac:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80038b0:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80038b4:	f023 0301 	bic.w	r3, r3, #1
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80038b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80038bc:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 80038c0:	f7ff bb37 	b.w	8002f32 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80038c4:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 80038c6:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80038ca:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80038d6:	f7ff fb23 	bl	8002f20 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80038da:	6a23      	ldr	r3, [r4, #32]
 80038dc:	b123      	cbz	r3, 80038e8 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80038de:	4a03      	ldr	r2, [pc, #12]	; (80038ec <HAL_PCDEx_LPM_Callback+0x60>)
 80038e0:	6913      	ldr	r3, [r2, #16]
 80038e2:	f043 0306 	orr.w	r3, r3, #6
 80038e6:	6113      	str	r3, [r2, #16]
 80038e8:	bd10      	pop	{r4, pc}
 80038ea:	bf00      	nop
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 80038f0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80038f2:	4801      	ldr	r0, [pc, #4]	; (80038f8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80038f4:	800b      	strh	r3, [r1, #0]
}
 80038f6:	4770      	bx	lr
 80038f8:	20000158 	.word	0x20000158

080038fc <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 80038fc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80038fe:	4801      	ldr	r0, [pc, #4]	; (8003904 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003900:	800b      	strh	r3, [r1, #0]
}
 8003902:	4770      	bx	lr
 8003904:	2000016c 	.word	0x2000016c

08003908 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8003908:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800390a:	4801      	ldr	r0, [pc, #4]	; (8003910 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 800390c:	800b      	strh	r3, [r1, #0]
}
 800390e:	4770      	bx	lr
 8003910:	2000014c 	.word	0x2000014c

08003914 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003914:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003916:	4c04      	ldr	r4, [pc, #16]	; (8003928 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003918:	460a      	mov	r2, r1
 800391a:	4804      	ldr	r0, [pc, #16]	; (800392c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800391c:	4621      	mov	r1, r4
 800391e:	f7ff fcc8 	bl	80032b2 <USBD_GetString>
}
 8003922:	4620      	mov	r0, r4
 8003924:	bd10      	pop	{r4, pc}
 8003926:	bf00      	nop
 8003928:	20001828 	.word	0x20001828
 800392c:	08003d6b 	.word	0x08003d6b

08003930 <USBD_FS_ProductStrDescriptor>:
{
 8003930:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003932:	4c04      	ldr	r4, [pc, #16]	; (8003944 <USBD_FS_ProductStrDescriptor+0x14>)
 8003934:	460a      	mov	r2, r1
 8003936:	4804      	ldr	r0, [pc, #16]	; (8003948 <USBD_FS_ProductStrDescriptor+0x18>)
 8003938:	4621      	mov	r1, r4
 800393a:	f7ff fcba 	bl	80032b2 <USBD_GetString>
}
 800393e:	4620      	mov	r0, r4
 8003940:	bd10      	pop	{r4, pc}
 8003942:	bf00      	nop
 8003944:	20001828 	.word	0x20001828
 8003948:	08003d7e 	.word	0x08003d7e

0800394c <USBD_FS_SerialStrDescriptor>:
{
 800394c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800394e:	4c04      	ldr	r4, [pc, #16]	; (8003960 <USBD_FS_SerialStrDescriptor+0x14>)
 8003950:	460a      	mov	r2, r1
 8003952:	4804      	ldr	r0, [pc, #16]	; (8003964 <USBD_FS_SerialStrDescriptor+0x18>)
 8003954:	4621      	mov	r1, r4
 8003956:	f7ff fcac 	bl	80032b2 <USBD_GetString>
}
 800395a:	4620      	mov	r0, r4
 800395c:	bd10      	pop	{r4, pc}
 800395e:	bf00      	nop
 8003960:	20001828 	.word	0x20001828
 8003964:	08003d94 	.word	0x08003d94

08003968 <USBD_FS_ConfigStrDescriptor>:
{
 8003968:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800396a:	4c04      	ldr	r4, [pc, #16]	; (800397c <USBD_FS_ConfigStrDescriptor+0x14>)
 800396c:	460a      	mov	r2, r1
 800396e:	4804      	ldr	r0, [pc, #16]	; (8003980 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003970:	4621      	mov	r1, r4
 8003972:	f7ff fc9e 	bl	80032b2 <USBD_GetString>
}
 8003976:	4620      	mov	r0, r4
 8003978:	bd10      	pop	{r4, pc}
 800397a:	bf00      	nop
 800397c:	20001828 	.word	0x20001828
 8003980:	08003d52 	.word	0x08003d52

08003984 <USBD_FS_InterfaceStrDescriptor>:
{
 8003984:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003986:	4c04      	ldr	r4, [pc, #16]	; (8003998 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003988:	460a      	mov	r2, r1
 800398a:	4804      	ldr	r0, [pc, #16]	; (800399c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800398c:	4621      	mov	r1, r4
 800398e:	f7ff fc90 	bl	80032b2 <USBD_GetString>
}
 8003992:	4620      	mov	r0, r4
 8003994:	bd10      	pop	{r4, pc}
 8003996:	bf00      	nop
 8003998:	20001828 	.word	0x20001828
 800399c:	08003d5d 	.word	0x08003d5d

080039a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80039a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039a6:	e003      	b.n	80039b0 <LoopCopyDataInit>

080039a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80039ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80039ae:	3104      	adds	r1, #4

080039b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80039b0:	480b      	ldr	r0, [pc, #44]	; (80039e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80039b2:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80039b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80039b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80039b8:	d3f6      	bcc.n	80039a8 <CopyDataInit>
  ldr  r2, =_sbss
 80039ba:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80039bc:	e002      	b.n	80039c4 <LoopFillZerobss>

080039be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80039be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80039c0:	f842 3b04 	str.w	r3, [r2], #4

080039c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80039c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039c8:	d3f9      	bcc.n	80039be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039ca:	f7ff fd9d 	bl	8003508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ce:	f000 f811 	bl	80039f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039d2:	f7ff fd47 	bl	8003464 <main>
  bx  lr    
 80039d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80039d8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80039dc:	08003db4 	.word	0x08003db4
  ldr  r0, =_sdata
 80039e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039e4:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 80039e8:	200001d4 	.word	0x200001d4
  ldr  r3, = _ebss
 80039ec:	20001a2c 	.word	0x20001a2c

080039f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039f0:	e7fe      	b.n	80039f0 <ADC_IRQHandler>
	...

080039f4 <__libc_init_array>:
 80039f4:	b570      	push	{r4, r5, r6, lr}
 80039f6:	4e0d      	ldr	r6, [pc, #52]	; (8003a2c <__libc_init_array+0x38>)
 80039f8:	4c0d      	ldr	r4, [pc, #52]	; (8003a30 <__libc_init_array+0x3c>)
 80039fa:	1ba4      	subs	r4, r4, r6
 80039fc:	10a4      	asrs	r4, r4, #2
 80039fe:	2500      	movs	r5, #0
 8003a00:	42a5      	cmp	r5, r4
 8003a02:	d109      	bne.n	8003a18 <__libc_init_array+0x24>
 8003a04:	4e0b      	ldr	r6, [pc, #44]	; (8003a34 <__libc_init_array+0x40>)
 8003a06:	4c0c      	ldr	r4, [pc, #48]	; (8003a38 <__libc_init_array+0x44>)
 8003a08:	f000 f8f4 	bl	8003bf4 <_init>
 8003a0c:	1ba4      	subs	r4, r4, r6
 8003a0e:	10a4      	asrs	r4, r4, #2
 8003a10:	2500      	movs	r5, #0
 8003a12:	42a5      	cmp	r5, r4
 8003a14:	d105      	bne.n	8003a22 <__libc_init_array+0x2e>
 8003a16:	bd70      	pop	{r4, r5, r6, pc}
 8003a18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a1c:	4798      	blx	r3
 8003a1e:	3501      	adds	r5, #1
 8003a20:	e7ee      	b.n	8003a00 <__libc_init_array+0xc>
 8003a22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a26:	4798      	blx	r3
 8003a28:	3501      	adds	r5, #1
 8003a2a:	e7f2      	b.n	8003a12 <__libc_init_array+0x1e>
 8003a2c:	08003dac 	.word	0x08003dac
 8003a30:	08003dac 	.word	0x08003dac
 8003a34:	08003dac 	.word	0x08003dac
 8003a38:	08003db0 	.word	0x08003db0

08003a3c <malloc>:
 8003a3c:	4b02      	ldr	r3, [pc, #8]	; (8003a48 <malloc+0xc>)
 8003a3e:	4601      	mov	r1, r0
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	f000 b859 	b.w	8003af8 <_malloc_r>
 8003a46:	bf00      	nop
 8003a48:	20000170 	.word	0x20000170

08003a4c <free>:
 8003a4c:	4b02      	ldr	r3, [pc, #8]	; (8003a58 <free+0xc>)
 8003a4e:	4601      	mov	r1, r0
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	f000 b803 	b.w	8003a5c <_free_r>
 8003a56:	bf00      	nop
 8003a58:	20000170 	.word	0x20000170

08003a5c <_free_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	4605      	mov	r5, r0
 8003a60:	2900      	cmp	r1, #0
 8003a62:	d045      	beq.n	8003af0 <_free_r+0x94>
 8003a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a68:	1f0c      	subs	r4, r1, #4
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	bfb8      	it	lt
 8003a6e:	18e4      	addlt	r4, r4, r3
 8003a70:	f000 f8b0 	bl	8003bd4 <__malloc_lock>
 8003a74:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <_free_r+0x98>)
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	4610      	mov	r0, r2
 8003a7a:	b933      	cbnz	r3, 8003a8a <_free_r+0x2e>
 8003a7c:	6063      	str	r3, [r4, #4]
 8003a7e:	6014      	str	r4, [r2, #0]
 8003a80:	4628      	mov	r0, r5
 8003a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a86:	f000 b8a6 	b.w	8003bd6 <__malloc_unlock>
 8003a8a:	42a3      	cmp	r3, r4
 8003a8c:	d90c      	bls.n	8003aa8 <_free_r+0x4c>
 8003a8e:	6821      	ldr	r1, [r4, #0]
 8003a90:	1862      	adds	r2, r4, r1
 8003a92:	4293      	cmp	r3, r2
 8003a94:	bf04      	itt	eq
 8003a96:	681a      	ldreq	r2, [r3, #0]
 8003a98:	685b      	ldreq	r3, [r3, #4]
 8003a9a:	6063      	str	r3, [r4, #4]
 8003a9c:	bf04      	itt	eq
 8003a9e:	1852      	addeq	r2, r2, r1
 8003aa0:	6022      	streq	r2, [r4, #0]
 8003aa2:	6004      	str	r4, [r0, #0]
 8003aa4:	e7ec      	b.n	8003a80 <_free_r+0x24>
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	b10a      	cbz	r2, 8003ab0 <_free_r+0x54>
 8003aac:	42a2      	cmp	r2, r4
 8003aae:	d9fa      	bls.n	8003aa6 <_free_r+0x4a>
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	1858      	adds	r0, r3, r1
 8003ab4:	42a0      	cmp	r0, r4
 8003ab6:	d10b      	bne.n	8003ad0 <_free_r+0x74>
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	4401      	add	r1, r0
 8003abc:	1858      	adds	r0, r3, r1
 8003abe:	4282      	cmp	r2, r0
 8003ac0:	6019      	str	r1, [r3, #0]
 8003ac2:	d1dd      	bne.n	8003a80 <_free_r+0x24>
 8003ac4:	6810      	ldr	r0, [r2, #0]
 8003ac6:	6852      	ldr	r2, [r2, #4]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	4401      	add	r1, r0
 8003acc:	6019      	str	r1, [r3, #0]
 8003ace:	e7d7      	b.n	8003a80 <_free_r+0x24>
 8003ad0:	d902      	bls.n	8003ad8 <_free_r+0x7c>
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	602b      	str	r3, [r5, #0]
 8003ad6:	e7d3      	b.n	8003a80 <_free_r+0x24>
 8003ad8:	6820      	ldr	r0, [r4, #0]
 8003ada:	1821      	adds	r1, r4, r0
 8003adc:	428a      	cmp	r2, r1
 8003ade:	bf04      	itt	eq
 8003ae0:	6811      	ldreq	r1, [r2, #0]
 8003ae2:	6852      	ldreq	r2, [r2, #4]
 8003ae4:	6062      	str	r2, [r4, #4]
 8003ae6:	bf04      	itt	eq
 8003ae8:	1809      	addeq	r1, r1, r0
 8003aea:	6021      	streq	r1, [r4, #0]
 8003aec:	605c      	str	r4, [r3, #4]
 8003aee:	e7c7      	b.n	8003a80 <_free_r+0x24>
 8003af0:	bd38      	pop	{r3, r4, r5, pc}
 8003af2:	bf00      	nop
 8003af4:	200001f4 	.word	0x200001f4

08003af8 <_malloc_r>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	1ccd      	adds	r5, r1, #3
 8003afc:	f025 0503 	bic.w	r5, r5, #3
 8003b00:	3508      	adds	r5, #8
 8003b02:	2d0c      	cmp	r5, #12
 8003b04:	bf38      	it	cc
 8003b06:	250c      	movcc	r5, #12
 8003b08:	2d00      	cmp	r5, #0
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	db01      	blt.n	8003b12 <_malloc_r+0x1a>
 8003b0e:	42a9      	cmp	r1, r5
 8003b10:	d903      	bls.n	8003b1a <_malloc_r+0x22>
 8003b12:	230c      	movs	r3, #12
 8003b14:	6033      	str	r3, [r6, #0]
 8003b16:	2000      	movs	r0, #0
 8003b18:	bd70      	pop	{r4, r5, r6, pc}
 8003b1a:	f000 f85b 	bl	8003bd4 <__malloc_lock>
 8003b1e:	4a23      	ldr	r2, [pc, #140]	; (8003bac <_malloc_r+0xb4>)
 8003b20:	6814      	ldr	r4, [r2, #0]
 8003b22:	4621      	mov	r1, r4
 8003b24:	b991      	cbnz	r1, 8003b4c <_malloc_r+0x54>
 8003b26:	4c22      	ldr	r4, [pc, #136]	; (8003bb0 <_malloc_r+0xb8>)
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	b91b      	cbnz	r3, 8003b34 <_malloc_r+0x3c>
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f000 f841 	bl	8003bb4 <_sbrk_r>
 8003b32:	6020      	str	r0, [r4, #0]
 8003b34:	4629      	mov	r1, r5
 8003b36:	4630      	mov	r0, r6
 8003b38:	f000 f83c 	bl	8003bb4 <_sbrk_r>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d126      	bne.n	8003b8e <_malloc_r+0x96>
 8003b40:	230c      	movs	r3, #12
 8003b42:	6033      	str	r3, [r6, #0]
 8003b44:	4630      	mov	r0, r6
 8003b46:	f000 f846 	bl	8003bd6 <__malloc_unlock>
 8003b4a:	e7e4      	b.n	8003b16 <_malloc_r+0x1e>
 8003b4c:	680b      	ldr	r3, [r1, #0]
 8003b4e:	1b5b      	subs	r3, r3, r5
 8003b50:	d41a      	bmi.n	8003b88 <_malloc_r+0x90>
 8003b52:	2b0b      	cmp	r3, #11
 8003b54:	d90f      	bls.n	8003b76 <_malloc_r+0x7e>
 8003b56:	600b      	str	r3, [r1, #0]
 8003b58:	50cd      	str	r5, [r1, r3]
 8003b5a:	18cc      	adds	r4, r1, r3
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	f000 f83a 	bl	8003bd6 <__malloc_unlock>
 8003b62:	f104 000b 	add.w	r0, r4, #11
 8003b66:	1d23      	adds	r3, r4, #4
 8003b68:	f020 0007 	bic.w	r0, r0, #7
 8003b6c:	1ac3      	subs	r3, r0, r3
 8003b6e:	d01b      	beq.n	8003ba8 <_malloc_r+0xb0>
 8003b70:	425a      	negs	r2, r3
 8003b72:	50e2      	str	r2, [r4, r3]
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
 8003b76:	428c      	cmp	r4, r1
 8003b78:	bf0d      	iteet	eq
 8003b7a:	6863      	ldreq	r3, [r4, #4]
 8003b7c:	684b      	ldrne	r3, [r1, #4]
 8003b7e:	6063      	strne	r3, [r4, #4]
 8003b80:	6013      	streq	r3, [r2, #0]
 8003b82:	bf18      	it	ne
 8003b84:	460c      	movne	r4, r1
 8003b86:	e7e9      	b.n	8003b5c <_malloc_r+0x64>
 8003b88:	460c      	mov	r4, r1
 8003b8a:	6849      	ldr	r1, [r1, #4]
 8003b8c:	e7ca      	b.n	8003b24 <_malloc_r+0x2c>
 8003b8e:	1cc4      	adds	r4, r0, #3
 8003b90:	f024 0403 	bic.w	r4, r4, #3
 8003b94:	42a0      	cmp	r0, r4
 8003b96:	d005      	beq.n	8003ba4 <_malloc_r+0xac>
 8003b98:	1a21      	subs	r1, r4, r0
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f000 f80a 	bl	8003bb4 <_sbrk_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d0cd      	beq.n	8003b40 <_malloc_r+0x48>
 8003ba4:	6025      	str	r5, [r4, #0]
 8003ba6:	e7d9      	b.n	8003b5c <_malloc_r+0x64>
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
 8003baa:	bf00      	nop
 8003bac:	200001f4 	.word	0x200001f4
 8003bb0:	200001f8 	.word	0x200001f8

08003bb4 <_sbrk_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4c06      	ldr	r4, [pc, #24]	; (8003bd0 <_sbrk_r+0x1c>)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	4605      	mov	r5, r0
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	6023      	str	r3, [r4, #0]
 8003bc0:	f000 f80a 	bl	8003bd8 <_sbrk>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d102      	bne.n	8003bce <_sbrk_r+0x1a>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	b103      	cbz	r3, 8003bce <_sbrk_r+0x1a>
 8003bcc:	602b      	str	r3, [r5, #0]
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
 8003bd0:	20001a28 	.word	0x20001a28

08003bd4 <__malloc_lock>:
 8003bd4:	4770      	bx	lr

08003bd6 <__malloc_unlock>:
 8003bd6:	4770      	bx	lr

08003bd8 <_sbrk>:
 8003bd8:	4b04      	ldr	r3, [pc, #16]	; (8003bec <_sbrk+0x14>)
 8003bda:	6819      	ldr	r1, [r3, #0]
 8003bdc:	4602      	mov	r2, r0
 8003bde:	b909      	cbnz	r1, 8003be4 <_sbrk+0xc>
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <_sbrk+0x18>)
 8003be2:	6019      	str	r1, [r3, #0]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	4402      	add	r2, r0
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	4770      	bx	lr
 8003bec:	200001fc 	.word	0x200001fc
 8003bf0:	20001a2c 	.word	0x20001a2c

08003bf4 <_init>:
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	bf00      	nop
 8003bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfa:	bc08      	pop	{r3}
 8003bfc:	469e      	mov	lr, r3
 8003bfe:	4770      	bx	lr

08003c00 <_fini>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	bf00      	nop
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr
