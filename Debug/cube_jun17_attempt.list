
cube_jun17_attempt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007390  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007588  08007588  00017588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001c4  20000000  08007744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001858  200001c4  08007908  000201c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001a1c  08007908  00021a1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018d22  00000000  00000000  000201f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000032e7  00000000  00000000  00038f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bb0  00000000  00000000  0003c200  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a48  00000000  00000000  0003cdb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006e45  00000000  00000000  0003d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003dca  00000000  00000000  0004463d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00048407  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002e78  00000000  00000000  00048484  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001c4 	.word	0x200001c4
 8000214:	00000000 	.word	0x00000000
 8000218:	08007570 	.word	0x08007570

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001c8 	.word	0x200001c8
 8000234:	08007570 	.word	0x08007570

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f945 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f806 	bl	8000564 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f006 f951 	bl	80067fe <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_InitTick+0x54>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x58>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	fbb3 f3f1 	udiv	r3, r3, r1
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f98e 	bl	80008a4 <HAL_SYSTICK_Config>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	e00e      	b.n	80005b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d80a      	bhi.n	80005ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000598:	2200      	movs	r2, #0
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f000 f93c 	bl	800081c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <HAL_InitTick+0x5c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e000      	b.n	80005b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000118 	.word	0x20000118
 80005bc:	20000004 	.word	0x20000004
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	200001f0 	.word	0x200001f0

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	200001f0 	.word	0x200001f0

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff ffee 	bl	80005ec <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_Delay+0x40>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffde 	bl	80005ec <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d3f7      	bcc.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000004 	.word	0x20000004

08000648 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <NVIC_SetPriorityGrouping+0x40>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <NVIC_SetPriorityGrouping+0x44>)
 8000672:	4313      	orrs	r3, r2
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <NVIC_SetPriorityGrouping+0x40>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00
 800068c:	05fa0000 	.word	0x05fa0000

08000690 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <NVIC_EnableIRQ+0x30>)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	095b      	lsrs	r3, r3, #5
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	f002 021f 	and.w	r2, r2, #31
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	da0b      	bge.n	800070c <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	490d      	ldr	r1, [pc, #52]	; (800072c <NVIC_SetPriority+0x4c>)
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f003 030f 	and.w	r3, r3, #15
 80006fc:	3b04      	subs	r3, #4
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	440b      	add	r3, r1
 8000708:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800070a:	e009      	b.n	8000720 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	4908      	ldr	r1, [pc, #32]	; (8000730 <NVIC_SetPriority+0x50>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	e000e100 	.word	0xe000e100

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	2201      	movs	r2, #1
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	401a      	ands	r2, r3
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077a:	2101      	movs	r1, #1
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	1e59      	subs	r1, r3, #1
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff90 	bl	80006e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b07      	cmp	r3, #7
 80007e8:	d00f      	beq.n	800080a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b06      	cmp	r3, #6
 80007ee:	d00c      	beq.n	800080a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b05      	cmp	r3, #5
 80007f4:	d009      	beq.n	800080a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	d006      	beq.n	800080a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d003      	beq.n	800080a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000802:	21a2      	movs	r1, #162	; 0xa2
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000806:	f005 ffef 	bl	80067e8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff1c 	bl	8000648 <NVIC_SetPriorityGrouping>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	08007588 	.word	0x08007588

0800081c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d903      	bls.n	800083c <HAL_NVIC_SetPriority+0x20>
 8000834:	21ba      	movs	r1, #186	; 0xba
 8000836:	480e      	ldr	r0, [pc, #56]	; (8000870 <HAL_NVIC_SetPriority+0x54>)
 8000838:	f005 ffd6 	bl	80067e8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	2b0f      	cmp	r3, #15
 8000840:	d903      	bls.n	800084a <HAL_NVIC_SetPriority+0x2e>
 8000842:	21bb      	movs	r1, #187	; 0xbb
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <HAL_NVIC_SetPriority+0x54>)
 8000846:	f005 ffcf 	bl	80067e8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800084a:	f7ff ff21 	bl	8000690 <NVIC_GetPriorityGrouping>
 800084e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	68b9      	ldr	r1, [r7, #8]
 8000854:	6978      	ldr	r0, [r7, #20]
 8000856:	f7ff ff6d 	bl	8000734 <NVIC_EncodePriority>
 800085a:	4602      	mov	r2, r0
 800085c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000860:	4611      	mov	r1, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff3c 	bl	80006e0 <NVIC_SetPriority>
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	08007588 	.word	0x08007588

08000874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	da03      	bge.n	800088e <HAL_NVIC_EnableIRQ+0x1a>
 8000886:	21ce      	movs	r1, #206	; 0xce
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <HAL_NVIC_EnableIRQ+0x2c>)
 800088a:	f005 ffad 	bl	80067e8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff0a 	bl	80006ac <NVIC_EnableIRQ>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	08007588 	.word	0x08007588

080008a4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff73 	bl	8000798 <SysTick_Config>
 80008b2:	4603      	mov	r3, r0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d007      	beq.n	80008da <HAL_SYSTICK_CLKSourceConfig+0x1e>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d004      	beq.n	80008da <HAL_SYSTICK_CLKSourceConfig+0x1e>
 80008d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 80008d6:	f005 ff87 	bl	80067e8 <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d106      	bne.n	80008ee <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008e0:	4a09      	ldr	r2, [pc, #36]	; (8000908 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008ec:	e005      	b.n	80008fa <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008ee:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f023 0304 	bic.w	r3, r3, #4
 80008f8:	6013      	str	r3, [r2, #0]
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	08007588 	.word	0x08007588
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000910:	f000 f802 	bl	8000918 <HAL_SYSTICK_Callback>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a42      	ldr	r2, [pc, #264]	; (8000a50 <HAL_GPIO_Init+0x128>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d02b      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a41      	ldr	r2, [pc, #260]	; (8000a54 <HAL_GPIO_Init+0x12c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d027      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a40      	ldr	r2, [pc, #256]	; (8000a58 <HAL_GPIO_Init+0x130>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d023      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a3f      	ldr	r2, [pc, #252]	; (8000a5c <HAL_GPIO_Init+0x134>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d01f      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a3e      	ldr	r2, [pc, #248]	; (8000a60 <HAL_GPIO_Init+0x138>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d01b      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a3d      	ldr	r2, [pc, #244]	; (8000a64 <HAL_GPIO_Init+0x13c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d017      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a3c      	ldr	r2, [pc, #240]	; (8000a68 <HAL_GPIO_Init+0x140>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a3b      	ldr	r2, [pc, #236]	; (8000a6c <HAL_GPIO_Init+0x144>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d00f      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a3a      	ldr	r2, [pc, #232]	; (8000a70 <HAL_GPIO_Init+0x148>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d00b      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a39      	ldr	r2, [pc, #228]	; (8000a74 <HAL_GPIO_Init+0x14c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d007      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a38      	ldr	r2, [pc, #224]	; (8000a78 <HAL_GPIO_Init+0x150>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800099a:	21c1      	movs	r1, #193	; 0xc1
 800099c:	4837      	ldr	r0, [pc, #220]	; (8000a7c <HAL_GPIO_Init+0x154>)
 800099e:	f005 ff23 	bl	80067e8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d103      	bne.n	80009b4 <HAL_GPIO_Init+0x8c>
 80009ac:	21c2      	movs	r1, #194	; 0xc2
 80009ae:	4833      	ldr	r0, [pc, #204]	; (8000a7c <HAL_GPIO_Init+0x154>)
 80009b0:	f005 ff1a 	bl	80067e8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d035      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d031      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b11      	cmp	r3, #17
 80009ca:	d02d      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d029      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b12      	cmp	r3, #18
 80009da:	d025      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4a27      	ldr	r2, [pc, #156]	; (8000a80 <HAL_GPIO_Init+0x158>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d020      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <HAL_GPIO_Init+0x15c>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d01b      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a24      	ldr	r2, [pc, #144]	; (8000a88 <HAL_GPIO_Init+0x160>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d016      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <HAL_GPIO_Init+0x164>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d011      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <HAL_GPIO_Init+0x168>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d00c      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <HAL_GPIO_Init+0x16c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d007      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	2b03      	cmp	r3, #3
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 8000a20:	21c3      	movs	r1, #195	; 0xc3
 8000a22:	4816      	ldr	r0, [pc, #88]	; (8000a7c <HAL_GPIO_Init+0x154>)
 8000a24:	f005 fee0 	bl	80067e8 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00b      	beq.n	8000a48 <HAL_GPIO_Init+0x120>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d007      	beq.n	8000a48 <HAL_GPIO_Init+0x120>
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d003      	beq.n	8000a48 <HAL_GPIO_Init+0x120>
 8000a40:	21c4      	movs	r1, #196	; 0xc4
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <HAL_GPIO_Init+0x154>)
 8000a44:	f005 fed0 	bl	80067e8 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	e2df      	b.n	800100e <HAL_GPIO_Init+0x6e6>
 8000a4e:	bf00      	nop
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40021400 	.word	0x40021400
 8000a68:	40021800 	.word	0x40021800
 8000a6c:	40021c00 	.word	0x40021c00
 8000a70:	40022000 	.word	0x40022000
 8000a74:	40022400 	.word	0x40022400
 8000a78:	40022800 	.word	0x40022800
 8000a7c:	080075c4 	.word	0x080075c4
 8000a80:	10110000 	.word	0x10110000
 8000a84:	10210000 	.word	0x10210000
 8000a88:	10310000 	.word	0x10310000
 8000a8c:	10120000 	.word	0x10120000
 8000a90:	10220000 	.word	0x10220000
 8000a94:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000a98:	2201      	movs	r2, #1
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	f040 82a9 	bne.w	8001008 <HAL_GPIO_Init+0x6e0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d004      	beq.n	8000ac8 <HAL_GPIO_Init+0x1a0>
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	f040 8139 	bne.w	8000d3a <HAL_GPIO_Init+0x412>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f000 8110 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	f000 810b 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f000 8106 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f000 8101 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f000 80fc 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	f000 80f7 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	f000 80f2 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	f000 80ed 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	f000 80e8 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	f000 80e3 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	691b      	ldr	r3, [r3, #16]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	f000 80de 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	f000 80d9 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	f000 80d4 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	f000 80cf 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	f000 80ca 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	f000 80c5 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	f000 80c0 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	f000 80bb 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	f000 80b6 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	f000 80b1 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	2b05      	cmp	r3, #5
 8000b96:	f000 80ac 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	2b05      	cmp	r3, #5
 8000ba0:	f000 80a7 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	2b05      	cmp	r3, #5
 8000baa:	f000 80a2 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	2b05      	cmp	r3, #5
 8000bb4:	f000 809d 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	2b05      	cmp	r3, #5
 8000bbe:	f000 8098 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	2b05      	cmp	r3, #5
 8000bc8:	f000 8093 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	2b06      	cmp	r3, #6
 8000bd2:	f000 808e 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	f000 8089 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	f000 8084 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	d07f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	d07b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d077      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	d073      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	2b07      	cmp	r3, #7
 8000c10:	d06f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	2b07      	cmp	r3, #7
 8000c18:	d06b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d067      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d063      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d05f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d05b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d057      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	2b08      	cmp	r3, #8
 8000c48:	d053      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d04f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	2b09      	cmp	r3, #9
 8000c58:	d04b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	2b09      	cmp	r3, #9
 8000c60:	d047      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	2b09      	cmp	r3, #9
 8000c68:	d043      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	2b09      	cmp	r3, #9
 8000c70:	d03f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	2b09      	cmp	r3, #9
 8000c78:	d03b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	2b09      	cmp	r3, #9
 8000c80:	d037      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	2b0a      	cmp	r3, #10
 8000c88:	d033      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	2b0a      	cmp	r3, #10
 8000c90:	d02f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	2b0a      	cmp	r3, #10
 8000c98:	d02b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	2b0b      	cmp	r3, #11
 8000ca0:	d027      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	2b0a      	cmp	r3, #10
 8000ca8:	d023      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	2b0b      	cmp	r3, #11
 8000cb0:	d01f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	2b0b      	cmp	r3, #11
 8000cb8:	d01b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	2b0c      	cmp	r3, #12
 8000cc0:	d017      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	2b0c      	cmp	r3, #12
 8000cc8:	d013      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	2b0c      	cmp	r3, #12
 8000cd0:	d00f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	2b0f      	cmp	r3, #15
 8000cd8:	d00b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	2b0d      	cmp	r3, #13
 8000ce0:	d007      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	2b0a      	cmp	r3, #10
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cea:	21d5      	movs	r1, #213	; 0xd5
 8000cec:	4887      	ldr	r0, [pc, #540]	; (8000f0c <HAL_GPIO_Init+0x5e4>)
 8000cee:	f005 fd7b 	bl	80067e8 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	69b9      	ldr	r1, [r7, #24]
 8000d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0203 	and.w	r2, r3, #3
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d00b      	beq.n	8000d8e <HAL_GPIO_Init+0x466>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d007      	beq.n	8000d8e <HAL_GPIO_Init+0x466>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d82:	2b11      	cmp	r3, #17
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x466>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b12      	cmp	r3, #18
 8000d8c:	d144      	bne.n	8000e18 <HAL_GPIO_Init+0x4f0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00f      	beq.n	8000db6 <HAL_GPIO_Init+0x48e>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d00b      	beq.n	8000db6 <HAL_GPIO_Init+0x48e>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x48e>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x48e>
 8000dae:	21e9      	movs	r1, #233	; 0xe9
 8000db0:	4856      	ldr	r0, [pc, #344]	; (8000f0c <HAL_GPIO_Init+0x5e4>)
 8000db2:	f005 fd19 	bl	80067e8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80d9 	beq.w	8001008 <HAL_GPIO_Init+0x6e0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4a2e      	ldr	r2, [pc, #184]	; (8000f10 <HAL_GPIO_Init+0x5e8>)
 8000e58:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <HAL_GPIO_Init+0x5e8>)
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <HAL_GPIO_Init+0x5e8>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e6e:	4a29      	ldr	r2, [pc, #164]	; (8000f14 <HAL_GPIO_Init+0x5ec>)
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <HAL_GPIO_Init+0x5f0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d052      	beq.n	8000f40 <HAL_GPIO_Init+0x618>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <HAL_GPIO_Init+0x5f4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d031      	beq.n	8000f06 <HAL_GPIO_Init+0x5de>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_GPIO_Init+0x5f8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d02b      	beq.n	8000f02 <HAL_GPIO_Init+0x5da>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <HAL_GPIO_Init+0x5fc>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d025      	beq.n	8000efe <HAL_GPIO_Init+0x5d6>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <HAL_GPIO_Init+0x600>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d01f      	beq.n	8000efa <HAL_GPIO_Init+0x5d2>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <HAL_GPIO_Init+0x604>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d019      	beq.n	8000ef6 <HAL_GPIO_Init+0x5ce>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <HAL_GPIO_Init+0x608>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0x5ca>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_GPIO_Init+0x60c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <HAL_GPIO_Init+0x5c6>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_GPIO_Init+0x610>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x5c2>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_GPIO_Init+0x614>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_GPIO_Init+0x5be>
 8000ee2:	2309      	movs	r3, #9
 8000ee4:	e02d      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	e02b      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000eea:	2308      	movs	r3, #8
 8000eec:	e029      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000eee:	2307      	movs	r3, #7
 8000ef0:	e027      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	e025      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	e023      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000efa:	2304      	movs	r3, #4
 8000efc:	e021      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e01f      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e01d      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e01b      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000f0a:	bf00      	nop
 8000f0c:	080075c4 	.word	0x080075c4
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40013800 	.word	0x40013800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40021400 	.word	0x40021400
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40021c00 	.word	0x40021c00
 8000f38:	40022000 	.word	0x40022000
 8000f3c:	40022400 	.word	0x40022400
 8000f40:	2300      	movs	r3, #0
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	f002 0203 	and.w	r2, r2, #3
 8000f48:	0092      	lsls	r2, r2, #2
 8000f4a:	4093      	lsls	r3, r2
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f52:	4933      	ldr	r1, [pc, #204]	; (8001020 <HAL_GPIO_Init+0x6f8>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f60:	4b30      	ldr	r3, [pc, #192]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x65c>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f84:	4a27      	ldr	r2, [pc, #156]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x686>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fae:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x6b0>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd8:	4a12      	ldr	r2, [pc, #72]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x6da>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	3301      	adds	r3, #1
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	f67f ad41 	bls.w	8000a98 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40013800 	.word	0x40013800
 8001024:	40013c00 	.word	0x40013c00

08001028 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b08f      	sub	sp, #60	; 0x3c
 800102c:	af0a      	add	r7, sp, #40	; 0x28
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e10c      	b.n	8001258 <HAL_PCD_Init+0x230>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001046:	d008      	beq.n	800105a <HAL_PCD_Init+0x32>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a84      	ldr	r2, [pc, #528]	; (8001260 <HAL_PCD_Init+0x238>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d003      	beq.n	800105a <HAL_PCD_Init+0x32>
 8001052:	2190      	movs	r1, #144	; 0x90
 8001054:	4883      	ldr	r0, [pc, #524]	; (8001264 <HAL_PCD_Init+0x23c>)
 8001056:	f005 fbc7 	bl	80067e8 <assert_failed>

  hpcd->State = HAL_PCD_STATE_BUSY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f005 fc88 	bl	8006978 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f002 ffcc 	bl	800400a <USB_DisableGlobalInt>

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	687e      	ldr	r6, [r7, #4]
 800107a:	466d      	mov	r5, sp
 800107c:	f106 0410 	add.w	r4, r6, #16
 8001080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800108c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001090:	1d33      	adds	r3, r6, #4
 8001092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001094:	6838      	ldr	r0, [r7, #0]
 8001096:	f002 ff55 	bl	8003f44 <USB_CoreInit>

 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 ffc3 	bl	800402c <USB_SetCurrentMode>

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e04c      	b.n	8001146 <HAL_PCD_Init+0x11e>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3339      	adds	r3, #57	; 0x39
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	b2d8      	uxtb	r0, r3
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3338      	adds	r3, #56	; 0x38
 80010d4:	4602      	mov	r2, r0
 80010d6:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	b298      	uxth	r0, r3
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	333e      	adds	r3, #62	; 0x3e
 80010ec:	4602      	mov	r2, r0
 80010ee:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	333b      	adds	r3, #59	; 0x3b
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	3340      	adds	r3, #64	; 0x40
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	3344      	adds	r3, #68	; 0x44
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	1a9b      	subs	r3, r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	334c      	adds	r3, #76	; 0x4c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 for (i = 0; i < 15 ; i++)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3301      	adds	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b0e      	cmp	r3, #14
 800114a:	d9af      	bls.n	80010ac <HAL_PCD_Init+0x84>
 }

 for (i = 0; i < 15 ; i++)
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e05a      	b.n	8001208 <HAL_PCD_Init+0x1e0>
 {
   hpcd->OUT_ep[i].is_in = 0;
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	b2d8      	uxtb	r0, r3
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800117e:	4602      	mov	r2, r0
 8001180:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	b298      	uxth	r0, r3
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	333e      	adds	r3, #62	; 0x3e
 8001196:	4602      	mov	r2, r0
 8001198:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4613      	mov	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	1a9b      	subs	r3, r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]

   hpcd->Instance->DIEPTXF[i] = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3340      	adds	r3, #64	; 0x40
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
 for (i = 0; i < 15 ; i++)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3301      	adds	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b0e      	cmp	r3, #14
 800120c:	d9a1      	bls.n	8001152 <HAL_PCD_Init+0x12a>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	687e      	ldr	r6, [r7, #4]
 8001216:	466d      	mov	r5, sp
 8001218:	f106 0410 	add.w	r4, r6, #16
 800121c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001224:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001228:	e885 0003 	stmia.w	r5, {r0, r1}
 800122c:	1d33      	adds	r3, r6, #4
 800122e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f002 ff23 	bl	800407c <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	2b01      	cmp	r3, #1
 8001244:	d102      	bne.n	800124c <HAL_PCD_Init+0x224>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f001 f850 	bl	80022ec <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f003 ff18 	bl	8005086 <USB_DevDisconnect>
 return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001260:	40040000 	.word	0x40040000
 8001264:	08007600 	.word	0x08007600

08001268 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HAL_PCD_Start+0x16>
 800127a:	2302      	movs	r3, #2
 800127c:	e012      	b.n	80012a4 <HAL_PCD_Start+0x3c>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f003 fee4 	bl	8005058 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fea7 	bl	8003fe8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_PCD_IRQHandler>:
  * @brief  Handle PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	; 0x30
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	623b      	str	r3, [r7, #32]
  uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0, temp = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  uint32_t hclk = 200000000;
 80012d6:	4b98      	ldr	r3, [pc, #608]	; (8001538 <HAL_PCD_IRQHandler+0x28c>)
 80012d8:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 ff73 	bl	80051ca <USB_GetMode>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 84e1 	bne.w	8001cae <HAL_PCD_IRQHandler+0xa02>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fedf 	bl	80050b4 <USB_ReadInterrupts>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 84d7 	beq.w	8001cac <HAL_PCD_IRQHandler+0xa00>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f003 fed6 	bl	80050b4 <USB_ReadInterrupts>
 8001308:	4603      	mov	r3, r0
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b02      	cmp	r3, #2
 8001310:	d103      	bne.n	800131a <HAL_PCD_IRQHandler+0x6e>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2202      	movs	r2, #2
 8001318:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fec8 	bl	80050b4 <USB_ReadInterrupts>
 8001324:	4603      	mov	r3, r0
 8001326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800132a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800132e:	f040 80ed 	bne.w	800150c <HAL_PCD_IRQHandler+0x260>
    {
      epnum = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f003 fecf 	bl	80050de <USB_ReadDevAllOutEpInterrupt>
 8001340:	62b8      	str	r0, [r7, #40]	; 0x28

      while ( ep_intr )
 8001342:	e0df      	b.n	8001504 <HAL_PCD_IRQHandler+0x258>
      {
        if (ep_intr & 0x1)
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 80d4 	beq.w	80014f8 <HAL_PCD_IRQHandler+0x24c>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f003 feef 	bl	800513e <USB_ReadDevOutEPInterrupt>
 8001360:	61f8      	str	r0, [r7, #28]

          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 8082 	beq.w	8001472 <HAL_PCD_IRQHandler+0x1c6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	015a      	lsls	r2, r3, #5
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	4413      	add	r3, r2
 8001376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800137a:	461a      	mov	r2, r3
 800137c:	2301      	movs	r3, #1
 800137e:	6093      	str	r3, [r2, #8]

            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d111      	bne.n	80013ac <HAL_PCD_IRQHandler+0x100>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d009      	beq.n	80013ac <HAL_PCD_IRQHandler+0x100>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	4413      	add	r3, r2
 80013a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013a4:	461a      	mov	r2, r3
 80013a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013aa:	6093      	str	r3, [r2, #8]
              }
            }

            if(hpcd->Init.dma_enable == 1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d13c      	bne.n	800142e <HAL_PCD_IRQHandler+0x182>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	1a9b      	subs	r3, r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	0159      	lsls	r1, r3, #5
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	440b      	add	r3, r1
 80013d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013da:	1ad1      	subs	r1, r2, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4403      	add	r3, r0
 80013ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013ee:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4403      	add	r3, r0
 8001412:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4419      	add	r1, r3
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4403      	add	r3, r0
 8001428:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800142c:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f005 fb01 	bl	8006a3c <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d117      	bne.n	8001472 <HAL_PCD_IRQHandler+0x1c6>
            {
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	2b00      	cmp	r3, #0
 8001446:	d114      	bne.n	8001472 <HAL_PCD_IRQHandler+0x1c6>
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d108      	bne.n	8001472 <HAL_PCD_IRQHandler+0x1c6>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800146a:	461a      	mov	r2, r3
 800146c:	2101      	movs	r1, #1
 800146e:	f003 fef1 	bl	8005254 <USB_EP0_OutStart>
              }
            }
          }

          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d021      	beq.n	80014c0 <HAL_PCD_IRQHandler+0x214>
          {
            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d111      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x1fc>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <HAL_PCD_IRQHandler+0x1fc>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	015a      	lsls	r2, r3, #5
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	4413      	add	r3, r2
 800149c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a0:	461a      	mov	r2, r3
 80014a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a6:	6093      	str	r3, [r2, #8]
              }
            }

            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f005 fab5 	bl	8006a18 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	015a      	lsls	r2, r3, #5
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ba:	461a      	mov	r2, r3
 80014bc:	2308      	movs	r3, #8
 80014be:	6093      	str	r3, [r2, #8]
          }

          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d008      	beq.n	80014dc <HAL_PCD_IRQHandler+0x230>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	015a      	lsls	r2, r3, #5
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014d6:	461a      	mov	r2, r3
 80014d8:	2310      	movs	r3, #16
 80014da:	6093      	str	r3, [r2, #8]
          }
          /* Clear Status Phase Received interrupt */
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x24c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f2:	461a      	mov	r2, r3
 80014f4:	2320      	movs	r3, #32
 80014f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	3301      	adds	r3, #1
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 80014fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001500:	085b      	lsrs	r3, r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	2b00      	cmp	r3, #0
 8001508:	f47f af1c 	bne.w	8001344 <HAL_PCD_IRQHandler+0x98>
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f003 fdcf 	bl	80050b4 <USB_ReadInterrupts>
 8001516:	4603      	mov	r3, r0
 8001518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800151c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001520:	f040 80c6 	bne.w	80016b0 <HAL_PCD_IRQHandler+0x404>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f003 fdf0 	bl	800510e <USB_ReadDevAllInEpInterrupt>
 800152e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24

      while ( ep_intr )
 8001534:	e0b8      	b.n	80016a8 <HAL_PCD_IRQHandler+0x3fc>
 8001536:	bf00      	nop
 8001538:	0bebc200 	.word	0x0bebc200
      {
        if (ep_intr & 0x1) /* In ITR */
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 80aa 	beq.w	800169c <HAL_PCD_IRQHandler+0x3f0>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fe0f 	bl	8005176 <USB_ReadDevInEPInterrupt>
 8001558:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d05a      	beq.n	800161a <HAL_PCD_IRQHandler+0x36e>
          {
            fifoemptymsk = 0x1 << epnum;
 8001564:	2201      	movs	r2, #1
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001574:	4619      	mov	r1, r3
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800157c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	43db      	mvns	r3, r3
 8001582:	4013      	ands	r3, r2
 8001584:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	015a      	lsls	r2, r3, #5
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	4413      	add	r3, r2
 800158e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001592:	461a      	mov	r2, r3
 8001594:	2301      	movs	r3, #1
 8001596:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d11b      	bne.n	80015d8 <HAL_PCD_IRQHandler+0x32c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a4:	4613      	mov	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3344      	adds	r3, #68	; 0x44
 80015b0:	6819      	ldr	r1, [r3, #0]
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4403      	add	r3, r0
 80015c0:	3340      	adds	r3, #64	; 0x40
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4419      	add	r1, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4403      	add	r3, r0
 80015d4:	3344      	adds	r3, #68	; 0x44
 80015d6:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataInStageCallback(hpcd, epnum);
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f005 fa47 	bl	8006a72 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d116      	bne.n	800161a <HAL_PCD_IRQHandler+0x36e>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d113      	bne.n	800161a <HAL_PCD_IRQHandler+0x36e>
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	334c      	adds	r3, #76	; 0x4c
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <HAL_PCD_IRQHandler+0x36e>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001612:	461a      	mov	r2, r3
 8001614:	2101      	movs	r1, #1
 8001616:	f003 fe1d 	bl	8005254 <USB_EP0_OutStart>
              }
            }
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_PCD_IRQHandler+0x38a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	4413      	add	r3, r2
 800162c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001630:	461a      	mov	r2, r3
 8001632:	2308      	movs	r3, #8
 8001634:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <HAL_PCD_IRQHandler+0x3a6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	015a      	lsls	r2, r3, #5
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	4413      	add	r3, r2
 8001648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164c:	461a      	mov	r2, r3
 800164e:	2310      	movs	r3, #16
 8001650:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <HAL_PCD_IRQHandler+0x3c2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	4413      	add	r3, r2
 8001664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001668:	461a      	mov	r2, r3
 800166a:	2340      	movs	r3, #64	; 0x40
 800166c:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_PCD_IRQHandler+0x3de>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	015a      	lsls	r2, r3, #5
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	4413      	add	r3, r2
 8001680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001684:	461a      	mov	r2, r3
 8001686:	2302      	movs	r3, #2
 8001688:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_PCD_IRQHandler+0x3f0>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8001694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fd43 	bl	8002122 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	3301      	adds	r3, #1
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	085b      	lsrs	r3, r3, #1
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 80016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f47f af46 	bne.w	800153c <HAL_PCD_IRQHandler+0x290>
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fcfd 	bl	80050b4 <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016c4:	d120      	bne.n	8001708 <HAL_PCD_IRQHandler+0x45c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016cc:	461a      	mov	r2, r3
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6053      	str	r3, [r2, #4]

      if(hpcd->LPM_State == LPM_L1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x44c>
      {
        hpcd->LPM_State = LPM_L0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016ee:	2100      	movs	r1, #0
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fe1f 	bl	8002334 <HAL_PCDEx_LPM_Callback>
 80016f6:	e002      	b.n	80016fe <HAL_PCD_IRQHandler+0x452>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f005 fa33 	bl	8006b64 <HAL_PCD_ResumeCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fcd1 	bl	80050b4 <USB_ReadInterrupts>
 8001712:	4603      	mov	r3, r0
 8001714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800171c:	d10f      	bne.n	800173e <HAL_PCD_IRQHandler+0x492>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d102      	bne.n	8001734 <HAL_PCD_IRQHandler+0x488>
      {

        HAL_PCD_SuspendCallback(hpcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f005 f9f0 	bl	8006b14 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800173c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fcb6 	bl	80050b4 <USB_ReadInterrupts>
 8001748:	4603      	mov	r3, r0
 800174a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800174e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001752:	d11e      	bne.n	8001792 <HAL_PCD_IRQHandler+0x4e6>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175c:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8001764:	2b00      	cmp	r3, #0
 8001766:	d111      	bne.n	800178c <HAL_PCD_IRQHandler+0x4e0>
      {
        hpcd->LPM_State = LPM_L1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	f003 020f 	and.w	r2, r3, #15
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001782:	2101      	movs	r1, #1
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fdd5 	bl	8002334 <HAL_PCDEx_LPM_Callback>
 800178a:	e002      	b.n	8001792 <HAL_PCD_IRQHandler+0x4e6>
      }
      else
      {
        HAL_PCD_SuspendCallback(hpcd);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f005 f9c1 	bl	8006b14 <HAL_PCD_SuspendCallback>
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fc8c 	bl	80050b4 <USB_ReadInterrupts>
 800179c:	4603      	mov	r3, r0
 800179e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a6:	f040 80b0 	bne.w	800190a <HAL_PCD_IRQHandler+0x65e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b0:	461a      	mov	r2, r3
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2110      	movs	r1, #16
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fda6 	bl	8004318 <USB_FlushTxFifo>

      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d0:	e036      	b.n	8001840 <HAL_PCD_IRQHandler+0x594>
      {
        USBx_INEP(i)->DIEPINT = 0xFF;
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017de:	461a      	mov	r2, r3
 80017e0:	23ff      	movs	r3, #255	; 0xff
 80017e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e6:	015a      	lsls	r2, r3, #5
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f0:	4619      	mov	r1, r3
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	015a      	lsls	r2, r3, #5
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001804:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001812:	461a      	mov	r2, r3
 8001814:	23ff      	movs	r3, #255	; 0xff
 8001816:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	4413      	add	r3, r2
 8001820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001824:	4619      	mov	r1, r3
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	4413      	add	r3, r2
 800182e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001838:	600b      	str	r3, [r1, #0]
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	3301      	adds	r3, #1
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	429a      	cmp	r2, r3
 8001848:	d8c3      	bhi.n	80017d2 <HAL_PCD_IRQHandler+0x526>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001850:	461a      	mov	r2, r3
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185e:	461a      	mov	r2, r3
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800186c:	61d3      	str	r3, [r2, #28]

      if(hpcd->Init.use_dedicated_ep1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	2b00      	cmp	r3, #0
 8001874:	d018      	beq.n	80018a8 <HAL_PCD_IRQHandler+0x5fc>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187c:	461a      	mov	r2, r3
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001888:	f043 030b 	orr.w	r3, r3, #11
 800188c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001896:	461a      	mov	r2, r3
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	f043 030b 	orr.w	r3, r3, #11
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	e015      	b.n	80018d4 <HAL_PCD_IRQHandler+0x628>
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ae:	461a      	mov	r2, r3
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018bc:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c4:	461a      	mov	r2, r3
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f043 030b 	orr.w	r3, r3, #11
 80018d2:	6113      	str	r3, [r2, #16]
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018da:	461a      	mov	r2, r3
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	b2d9      	uxtb	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80018fa:	461a      	mov	r2, r3
 80018fc:	f003 fcaa 	bl	8005254 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fbd0 	bl	80050b4 <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800191a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191e:	f040 80d7 	bne.w	8001ad0 <HAL_PCD_IRQHandler+0x824>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 fc5e 	bl	80051e8 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	68d2      	ldr	r2, [r2, #12]
 8001936:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800193a:	60da      	str	r2, [r3, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f002 fd49 	bl	80043d8 <USB_GetDevSpeed>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10f      	bne.n	800196c <HAL_PCD_IRQHandler+0x6c0>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001958:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	68d2      	ldr	r2, [r2, #12]
 8001964:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	e0a9      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2203      	movs	r2, #3
 8001970:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2240      	movs	r2, #64	; 0x40
 8001976:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8001978:	f001 faca 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 800197c:	60f8      	str	r0, [r7, #12]

		if((hclk >= 14200000)&&(hclk < 15000000))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4a79      	ldr	r2, [pc, #484]	; (8001b68 <HAL_PCD_IRQHandler+0x8bc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d90c      	bls.n	80019a0 <HAL_PCD_IRQHandler+0x6f4>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4a78      	ldr	r2, [pc, #480]	; (8001b6c <HAL_PCD_IRQHandler+0x8c0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d808      	bhi.n	80019a0 <HAL_PCD_IRQHandler+0x6f4>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	68d2      	ldr	r2, [r2, #12]
 8001998:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	e08f      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 15000000)&&(hclk < 16000000))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a72      	ldr	r2, [pc, #456]	; (8001b6c <HAL_PCD_IRQHandler+0x8c0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d90c      	bls.n	80019c2 <HAL_PCD_IRQHandler+0x716>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <HAL_PCD_IRQHandler+0x8c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d808      	bhi.n	80019c2 <HAL_PCD_IRQHandler+0x716>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	68d2      	ldr	r2, [r2, #12]
 80019ba:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	e07e      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 16000000)&&(hclk < 17200000))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <HAL_PCD_IRQHandler+0x8c4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d90c      	bls.n	80019e4 <HAL_PCD_IRQHandler+0x738>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4a69      	ldr	r2, [pc, #420]	; (8001b74 <HAL_PCD_IRQHandler+0x8c8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d808      	bhi.n	80019e4 <HAL_PCD_IRQHandler+0x738>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	68d2      	ldr	r2, [r2, #12]
 80019dc:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	e06d      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 17200000)&&(hclk < 18500000))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_PCD_IRQHandler+0x8c8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d90c      	bls.n	8001a06 <HAL_PCD_IRQHandler+0x75a>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a62      	ldr	r2, [pc, #392]	; (8001b78 <HAL_PCD_IRQHandler+0x8cc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d808      	bhi.n	8001a06 <HAL_PCD_IRQHandler+0x75a>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	68d2      	ldr	r2, [r2, #12]
 80019fe:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	e05c      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 18500000)&&(hclk < 20000000))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4a5b      	ldr	r2, [pc, #364]	; (8001b78 <HAL_PCD_IRQHandler+0x8cc>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d90c      	bls.n	8001a28 <HAL_PCD_IRQHandler+0x77c>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_PCD_IRQHandler+0x8d0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d808      	bhi.n	8001a28 <HAL_PCD_IRQHandler+0x77c>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	68d2      	ldr	r2, [r2, #12]
 8001a20:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	e04b      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 20000000)&&(hclk < 21800000))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <HAL_PCD_IRQHandler+0x8d0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d90c      	bls.n	8001a4a <HAL_PCD_IRQHandler+0x79e>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_PCD_IRQHandler+0x8d4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d808      	bhi.n	8001a4a <HAL_PCD_IRQHandler+0x79e>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	68d2      	ldr	r2, [r2, #12]
 8001a42:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	e03a      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 21800000)&&(hclk < 24000000))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4a4c      	ldr	r2, [pc, #304]	; (8001b80 <HAL_PCD_IRQHandler+0x8d4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d90c      	bls.n	8001a6c <HAL_PCD_IRQHandler+0x7c0>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4a4b      	ldr	r2, [pc, #300]	; (8001b84 <HAL_PCD_IRQHandler+0x8d8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d808      	bhi.n	8001a6c <HAL_PCD_IRQHandler+0x7c0>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	68d2      	ldr	r2, [r2, #12]
 8001a64:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	e029      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 24000000)&&(hclk < 27700000))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a45      	ldr	r2, [pc, #276]	; (8001b84 <HAL_PCD_IRQHandler+0x8d8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d90c      	bls.n	8001a8e <HAL_PCD_IRQHandler+0x7e2>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a44      	ldr	r2, [pc, #272]	; (8001b88 <HAL_PCD_IRQHandler+0x8dc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d808      	bhi.n	8001a8e <HAL_PCD_IRQHandler+0x7e2>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	68d2      	ldr	r2, [r2, #12]
 8001a86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	e018      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 27700000)&&(hclk < 32000000))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4a3d      	ldr	r2, [pc, #244]	; (8001b88 <HAL_PCD_IRQHandler+0x8dc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d90c      	bls.n	8001ab0 <HAL_PCD_IRQHandler+0x804>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4a3c      	ldr	r2, [pc, #240]	; (8001b8c <HAL_PCD_IRQHandler+0x8e0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d808      	bhi.n	8001ab0 <HAL_PCD_IRQHandler+0x804>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	68d2      	ldr	r2, [r2, #12]
 8001aa8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	e007      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	68d2      	ldr	r2, [r2, #12]
 8001aba:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8001abe:	60da      	str	r2, [r3, #12]
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f004 fffe 	bl	8006ac2 <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 faed 	bl	80050b4 <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d174      	bne.n	8001bce <HAL_PCD_IRQHandler+0x922>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	6992      	ldr	r2, [r2, #24]
 8001aee:	f022 0210 	bic.w	r2, r2, #16
 8001af2:	619a      	str	r2, [r3, #24]
      temp = USBx->GRXSTSP;
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	617b      	str	r3, [r7, #20]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 020f 	and.w	r2, r3, #15
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	0c5b      	lsrs	r3, r3, #17
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d138      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x8e4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d049      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x912>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	68d9      	ldr	r1, [r3, #12]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	6a38      	ldr	r0, [r7, #32]
 8001b3e:	f003 f95d 	bl	8004dfc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b4e:	441a      	add	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b60:	441a      	add	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	619a      	str	r2, [r3, #24]
 8001b66:	e02a      	b.n	8001bbe <HAL_PCD_IRQHandler+0x912>
 8001b68:	00d8acbf 	.word	0x00d8acbf
 8001b6c:	00e4e1bf 	.word	0x00e4e1bf
 8001b70:	00f423ff 	.word	0x00f423ff
 8001b74:	0106737f 	.word	0x0106737f
 8001b78:	011a499f 	.word	0x011a499f
 8001b7c:	01312cff 	.word	0x01312cff
 8001b80:	014ca43f 	.word	0x014ca43f
 8001b84:	016e35ff 	.word	0x016e35ff
 8001b88:	01a6ab1f 	.word	0x01a6ab1f
 8001b8c:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	0c5b      	lsrs	r3, r3, #17
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	2b06      	cmp	r3, #6
 8001b9a:	d110      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x912>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6a38      	ldr	r0, [r7, #32]
 8001ba8:	f003 f928 	bl	8004dfc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	699a      	ldr	r2, [r3, #24]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb8:	441a      	add	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	6992      	ldr	r2, [r2, #24]
 8001bc8:	f042 0210 	orr.w	r2, r2, #16
 8001bcc:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fa6e 	bl	80050b4 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d106      	bne.n	8001bf0 <HAL_PCD_IRQHandler+0x944>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f004 ff5f 	bl	8006aa6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2208      	movs	r2, #8
 8001bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fa5d 	bl	80050b4 <USB_ReadInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c04:	d10a      	bne.n	8001c1c <HAL_PCD_IRQHandler+0x970>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f004 ffc9 	bl	8006ba4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fa47 	bl	80050b4 <USB_ReadInterrupts>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c30:	d10a      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x99c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4619      	mov	r1, r3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f004 ffa1 	bl	8006b80 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fa31 	bl	80050b4 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5c:	d107      	bne.n	8001c6e <HAL_PCD_IRQHandler+0x9c2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f004 ffb2 	bl	8006bc8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fa1e 	bl	80050b4 <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d115      	bne.n	8001cae <HAL_PCD_IRQHandler+0xa02>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	617b      	str	r3, [r7, #20]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_PCD_IRQHandler+0x9ee>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f004 ffa5 	bl	8006be4 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	6851      	ldr	r1, [r2, #4]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	e000      	b.n	8001cae <HAL_PCD_IRQHandler+0xa02>
      return;
 8001cac:	bf00      	nop
    }
  }
}
 8001cae:	3730      	adds	r7, #48	; 0x30
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_PCD_SetAddress+0x1a>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e00f      	b.n	8001cee <HAL_PCD_SetAddress+0x3a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 f994 	bl	800500c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	4608      	mov	r0, r1
 8001d00:	4611      	mov	r1, r2
 8001d02:	461a      	mov	r2, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	70fb      	strb	r3, [r7, #3]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	803b      	strh	r3, [r7, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8001d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da0b      	bge.n	8001d34 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	3338      	adds	r3, #56	; 0x38
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	e00b      	b.n	8001d4c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8001d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	09db      	lsrs	r3, r3, #7
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001d68:	883a      	ldrh	r2, [r7, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	78ba      	ldrb	r2, [r7, #2]
 8001d72:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8001d86:	78bb      	ldrb	r3, [r7, #2]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d102      	bne.n	8001d92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_PCD_EP_Open+0xaa>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e00e      	b.n	8001dbe <HAL_PCD_EP_Open+0xc8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68f9      	ldr	r1, [r7, #12]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fb48 	bl	8004444 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8001dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da0b      	bge.n	8001df2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	3338      	adds	r3, #56	; 0x38
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e00b      	b.n	8001e0a <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8001e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	09db      	lsrs	r3, r3, #7
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_PCD_EP_Close+0x6e>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e00e      	b.n	8001e52 <HAL_PCD_EP_Close+0x8c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 fb86 	bl	8004554 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	460b      	mov	r3, r1
 8001e68:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
 8001e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6979      	ldr	r1, [r7, #20]
 8001ecc:	f002 fe02 	bl	8004ad4 <USB_EP0StartXfer>
 8001ed0:	e008      	b.n	8001ee4 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	6979      	ldr	r1, [r7, #20]
 8001ee0:	f002 fbb4 	bl	800464c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	f003 020f 	and.w	r2, r3, #15
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	3338      	adds	r3, #56	; 0x38
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
 8001f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d102      	bne.n	8001f78 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	6979      	ldr	r1, [r7, #20]
 8001f90:	f002 fda0 	bl	8004ad4 <USB_EP0StartXfer>
 8001f94:	e008      	b.n	8001fa8 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6979      	ldr	r1, [r7, #20]
 8001fa4:	f002 fb52 	bl	800464c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	f003 020f 	and.w	r2, r3, #15
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d901      	bls.n	8001fd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e050      	b.n	8002072 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8001fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da0b      	bge.n	8001ff0 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	3338      	adds	r3, #56	; 0x38
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e009      	b.n	8002004 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	09db      	lsrs	r3, r3, #7
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	705a      	strb	r2, [r3, #1]


  __HAL_LOCK(hpcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_PCD_EP_SetStall+0x82>
 8002030:	2302      	movs	r3, #2
 8002032:	e01e      	b.n	8002072 <HAL_PCD_EP_SetStall+0xc0>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68f9      	ldr	r1, [r7, #12]
 8002042:	4618      	mov	r0, r3
 8002044:	f002 ff04 	bl	8004e50 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <HAL_PCD_EP_SetStall+0xb6>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	b2d9      	uxtb	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002062:	461a      	mov	r2, r3
 8002064:	f003 f8f6 	bl	8005254 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	f003 020f 	and.w	r2, r3, #15
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	d901      	bls.n	8002098 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e040      	b.n	800211a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8002098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209c:	2b00      	cmp	r3, #0
 800209e:	da0b      	bge.n	80020b8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	3338      	adds	r3, #56	; 0x38
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	e009      	b.n	80020cc <HAL_PCD_EP_ClrStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 0;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80020de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	09db      	lsrs	r3, r3, #7
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_PCD_EP_ClrStall+0x82>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e00e      	b.n	800211a <HAL_PCD_EP_ClrStall+0xa0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68f9      	ldr	r1, [r7, #12]
 800210a:	4618      	mov	r0, r3
 800210c:	f002 ff11 	bl	8004f32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b08a      	sub	sp, #40	; 0x28
 8002126:	af02      	add	r7, sp, #8
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	3338      	adds	r3, #56	; 0x38
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	429a      	cmp	r2, r3
 8002160:	d202      	bcs.n	8002168 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61fb      	str	r3, [r7, #28]
  }


  len32b = (len + 3) / 4;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	3303      	adds	r3, #3
 800216c:	2b00      	cmp	r3, #0
 800216e:	da00      	bge.n	8002172 <PCD_WriteEmptyTxFifo+0x50>
 8002170:	3303      	adds	r3, #3
 8002172:	109b      	asrs	r3, r3, #2
 8002174:	61bb      	str	r3, [r7, #24]

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8002176:	e02e      	b.n	80021d6 <PCD_WriteEmptyTxFifo+0xb4>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	429a      	cmp	r2, r3
 800218c:	d202      	bcs.n	8002194 <PCD_WriteEmptyTxFifo+0x72>
    {
      len = ep->maxpacket;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3303      	adds	r3, #3
 8002198:	2b00      	cmp	r3, #0
 800219a:	da00      	bge.n	800219e <PCD_WriteEmptyTxFifo+0x7c>
 800219c:	3303      	adds	r3, #3
 800219e:	109b      	asrs	r3, r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]

    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	b298      	uxth	r0, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4603      	mov	r3, r0
 80021b8:	6978      	ldr	r0, [r7, #20]
 80021ba:	f002 fde7 	bl	8004d8c <USB_WritePacket>

    ep->xfer_buff  += len;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	441a      	add	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	441a      	add	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d909      	bls.n	8002200 <PCD_WriteEmptyTxFifo+0xde>
          ep->xfer_count < ep->xfer_len &&
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d203      	bcs.n	8002200 <PCD_WriteEmptyTxFifo+0xde>
            ep->xfer_len != 0)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1bb      	bne.n	8002178 <PCD_WriteEmptyTxFifo+0x56>
  }

  if(len <= 0)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	dc10      	bgt.n	8002228 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = 0x1 << epnum;
 8002206:	2201      	movs	r2, #1
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002216:	4619      	mov	r1, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800221e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	4013      	ands	r3, r2
 8002226:	634b      	str	r3, [r1, #52]	; 0x34

  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	70fb      	strb	r3, [r7, #3]
 800223e:	4613      	mov	r3, r2
 8002240:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	883a      	ldrh	r2, [r7, #0]
 800225e:	0411      	lsls	r1, r2, #16
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	430a      	orrs	r2, r1
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
 8002266:	e028      	b.n	80022ba <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	0c1b      	lsrs	r3, r3, #16
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4413      	add	r3, r2
 8002274:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e00d      	b.n	8002298 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	3340      	adds	r3, #64	; 0x40
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	0c1b      	lsrs	r3, r3, #16
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	4413      	add	r3, r2
 8002290:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	3301      	adds	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	3b01      	subs	r3, #1
 800229e:	429a      	cmp	r2, r3
 80022a0:	dbec      	blt.n	800227c <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	883a      	ldrh	r2, [r7, #0]
 80022ac:	0410      	lsls	r0, r2, #16
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	4302      	orrs	r2, r0
 80022b2:	3340      	adds	r3, #64	; 0x40
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	887a      	ldrh	r2, [r7, #2]
 80022da:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_PCDEx_ActivateLPM+0x44>)
 800231c:	4313      	orrs	r3, r2
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	10000003 	.word	0x10000003

08002334 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */	
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002358:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800236e:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800237a:	f7fe f937 	bl	80005ec <HAL_GetTick>
 800237e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002380:	e009      	b.n	8002396 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002382:	f7fe f933 	bl	80005ec <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002390:	d901      	bls.n	8002396 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e022      	b.n	80023dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a2:	d1ee      	bne.n	8002382 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023a4:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b0:	f7fe f91c 	bl	80005ec <HAL_GetTick>
 80023b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023b6:	e009      	b.n	80023cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023b8:	f7fe f918 	bl	80005ec <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023c6:	d901      	bls.n	80023cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e007      	b.n	80023dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023d8:	d1ee      	bne.n	80023b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40007000 	.word	0x40007000

080023ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e324      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b0f      	cmp	r3, #15
 8002408:	d904      	bls.n	8002414 <HAL_RCC_OscConfig+0x28>
 800240a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800240e:	4892      	ldr	r0, [pc, #584]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f004 f9ea 	bl	80067e8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 809a 	beq.w	8002556 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00e      	beq.n	8002448 <HAL_RCC_OscConfig+0x5c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002432:	d009      	beq.n	8002448 <HAL_RCC_OscConfig+0x5c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800243c:	d004      	beq.n	8002448 <HAL_RCC_OscConfig+0x5c>
 800243e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002442:	4885      	ldr	r0, [pc, #532]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 8002444:	f004 f9d0 	bl	80067e8 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002448:	4b84      	ldr	r3, [pc, #528]	; (800265c <HAL_RCC_OscConfig+0x270>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b04      	cmp	r3, #4
 8002452:	d00c      	beq.n	800246e <HAL_RCC_OscConfig+0x82>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002454:	4b81      	ldr	r3, [pc, #516]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	2b08      	cmp	r3, #8
 800245e:	d112      	bne.n	8002486 <HAL_RCC_OscConfig+0x9a>
 8002460:	4b7e      	ldr	r3, [pc, #504]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800246c:	d10b      	bne.n	8002486 <HAL_RCC_OscConfig+0x9a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246e:	4b7b      	ldr	r3, [pc, #492]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d06c      	beq.n	8002554 <HAL_RCC_OscConfig+0x168>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d168      	bne.n	8002554 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e2e2      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0xb2>
 8002490:	4a72      	ldr	r2, [pc, #456]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002492:	4b72      	ldr	r3, [pc, #456]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e02e      	b.n	80024fc <HAL_RCC_OscConfig+0x110>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0xd4>
 80024a6:	4a6d      	ldr	r2, [pc, #436]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024a8:	4b6c      	ldr	r3, [pc, #432]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4a6a      	ldr	r2, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024b4:	4b69      	ldr	r3, [pc, #420]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e01d      	b.n	80024fc <HAL_RCC_OscConfig+0x110>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCC_OscConfig+0xf8>
 80024ca:	4a64      	ldr	r2, [pc, #400]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024cc:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	4a61      	ldr	r2, [pc, #388]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024d8:	4b60      	ldr	r3, [pc, #384]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e0:	6013      	str	r3, [r2, #0]
 80024e2:	e00b      	b.n	80024fc <HAL_RCC_OscConfig+0x110>
 80024e4:	4a5d      	ldr	r2, [pc, #372]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024e6:	4b5d      	ldr	r3, [pc, #372]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4a5a      	ldr	r2, [pc, #360]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024f2:	4b5a      	ldr	r3, [pc, #360]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d013      	beq.n	800252c <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe f872 	bl	80005ec <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe f86e 	bl	80005ec <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b64      	cmp	r3, #100	; 0x64
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e296      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b4f      	ldr	r3, [pc, #316]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x120>
 800252a:	e014      	b.n	8002556 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe f85e 	bl	80005ec <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x15a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002534:	f7fe f85a 	bl	80005ec <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e282      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002546:	4b45      	ldr	r3, [pc, #276]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x148>
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8084 	beq.w	800266c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCC_OscConfig+0x192>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d004      	beq.n	800257e <HAL_RCC_OscConfig+0x192>
 8002574:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002578:	4837      	ldr	r0, [pc, #220]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800257a:	f004 f935 	bl	80067e8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b1f      	cmp	r3, #31
 8002584:	d904      	bls.n	8002590 <HAL_RCC_OscConfig+0x1a4>
 8002586:	f240 11ad 	movw	r1, #429	; 0x1ad
 800258a:	4833      	ldr	r0, [pc, #204]	; (8002658 <HAL_RCC_OscConfig+0x26c>)
 800258c:	f004 f92c 	bl	80067e8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002590:	4b32      	ldr	r3, [pc, #200]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00b      	beq.n	80025b4 <HAL_RCC_OscConfig+0x1c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259c:	4b2f      	ldr	r3, [pc, #188]	; (800265c <HAL_RCC_OscConfig+0x270>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d11c      	bne.n	80025e2 <HAL_RCC_OscConfig+0x1f6>
 80025a8:	4b2c      	ldr	r3, [pc, #176]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d116      	bne.n	80025e2 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_OscConfig+0x1e0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e23f      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025cc:	4923      	ldr	r1, [pc, #140]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80025ce:	4b23      	ldr	r3, [pc, #140]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4313      	orrs	r3, r2
 80025de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e0:	e044      	b.n	800266c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d023      	beq.n	8002632 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ea:	4a1c      	ldr	r2, [pc, #112]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_RCC_OscConfig+0x270>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fd fff9 	bl	80005ec <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x224>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fe:	f7fd fff5 	bl	80005ec <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e21d      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	490f      	ldr	r1, [pc, #60]	; (800265c <HAL_RCC_OscConfig+0x270>)
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
 8002630:	e01c      	b.n	800266c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fd ffd5 	bl	80005ec <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002644:	e00c      	b.n	8002660 <HAL_RCC_OscConfig+0x274>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002646:	f7fd ffd1 	bl	80005ec <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d905      	bls.n	8002660 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e1f9      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
 8002658:	08007638 	.word	0x08007638
 800265c:	40023800 	.word	0x40023800
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002660:	4b7e      	ldr	r3, [pc, #504]	; (800285c <HAL_RCC_OscConfig+0x470>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ec      	bne.n	8002646 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d043      	beq.n	8002700 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_OscConfig+0x2a6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d004      	beq.n	8002692 <HAL_RCC_OscConfig+0x2a6>
 8002688:	f240 11ed 	movw	r1, #493	; 0x1ed
 800268c:	4874      	ldr	r0, [pc, #464]	; (8002860 <HAL_RCC_OscConfig+0x474>)
 800268e:	f004 f8ab 	bl	80067e8 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d019      	beq.n	80026ce <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4a70      	ldr	r2, [pc, #448]	; (800285c <HAL_RCC_OscConfig+0x470>)
 800269c:	4b6f      	ldr	r3, [pc, #444]	; (800285c <HAL_RCC_OscConfig+0x470>)
 800269e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7fd ffa1 	bl	80005ec <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ae:	f7fd ff9d 	bl	80005ec <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e1c5      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c0:	4b66      	ldr	r3, [pc, #408]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80026c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2c2>
 80026cc:	e018      	b.n	8002700 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ce:	4a63      	ldr	r2, [pc, #396]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80026d0:	4b62      	ldr	r3, [pc, #392]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026da:	f7fd ff87 	bl	80005ec <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x308>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e2:	f7fd ff83 	bl	80005ec <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1ab      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b59      	ldr	r3, [pc, #356]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f0      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80bc 	beq.w	8002886 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00c      	beq.n	8002730 <HAL_RCC_OscConfig+0x344>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d008      	beq.n	8002730 <HAL_RCC_OscConfig+0x344>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b05      	cmp	r3, #5
 8002724:	d004      	beq.n	8002730 <HAL_RCC_OscConfig+0x344>
 8002726:	f240 2117 	movw	r1, #535	; 0x217
 800272a:	484d      	ldr	r0, [pc, #308]	; (8002860 <HAL_RCC_OscConfig+0x474>)
 800272c:	f004 f85c 	bl	80067e8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002730:	4b4a      	ldr	r3, [pc, #296]	; (800285c <HAL_RCC_OscConfig+0x470>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10d      	bne.n	8002758 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800273c:	4a47      	ldr	r2, [pc, #284]	; (800285c <HAL_RCC_OscConfig+0x470>)
 800273e:	4b47      	ldr	r3, [pc, #284]	; (800285c <HAL_RCC_OscConfig+0x470>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002746:	6413      	str	r3, [r2, #64]	; 0x40
 8002748:	4b44      	ldr	r3, [pc, #272]	; (800285c <HAL_RCC_OscConfig+0x470>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002754:	2301      	movs	r3, #1
 8002756:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002758:	4b42      	ldr	r3, [pc, #264]	; (8002864 <HAL_RCC_OscConfig+0x478>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d118      	bne.n	8002796 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002764:	4a3f      	ldr	r2, [pc, #252]	; (8002864 <HAL_RCC_OscConfig+0x478>)
 8002766:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCC_OscConfig+0x478>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002770:	f7fd ff3c 	bl	80005ec <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002778:	f7fd ff38 	bl	80005ec <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e160      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278a:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RCC_OscConfig+0x478>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d106      	bne.n	80027ac <HAL_RCC_OscConfig+0x3c0>
 800279e:	4a2f      	ldr	r2, [pc, #188]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	e02d      	b.n	8002808 <HAL_RCC_OscConfig+0x41c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10c      	bne.n	80027ce <HAL_RCC_OscConfig+0x3e2>
 80027b4:	4a29      	ldr	r2, [pc, #164]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027b6:	4b29      	ldr	r3, [pc, #164]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	4a26      	ldr	r2, [pc, #152]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027c2:	4b26      	ldr	r3, [pc, #152]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	f023 0304 	bic.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
 80027cc:	e01c      	b.n	8002808 <HAL_RCC_OscConfig+0x41c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b05      	cmp	r3, #5
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCC_OscConfig+0x404>
 80027d6:	4a21      	ldr	r2, [pc, #132]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027d8:	4b20      	ldr	r3, [pc, #128]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	f043 0304 	orr.w	r3, r3, #4
 80027e0:	6713      	str	r3, [r2, #112]	; 0x70
 80027e2:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6713      	str	r3, [r2, #112]	; 0x70
 80027ee:	e00b      	b.n	8002808 <HAL_RCC_OscConfig+0x41c>
 80027f0:	4a1a      	ldr	r2, [pc, #104]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027f2:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	f023 0301 	bic.w	r3, r3, #1
 80027fa:	6713      	str	r3, [r2, #112]	; 0x70
 80027fc:	4a17      	ldr	r2, [pc, #92]	; (800285c <HAL_RCC_OscConfig+0x470>)
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <HAL_RCC_OscConfig+0x470>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	f023 0304 	bic.w	r3, r3, #4
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fd feec 	bl	80005ec <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002816:	e00a      	b.n	800282e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002818:	f7fd fee8 	bl	80005ec <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e10e      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <HAL_RCC_OscConfig+0x470>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0ee      	beq.n	8002818 <HAL_RCC_OscConfig+0x42c>
 800283a:	e01b      	b.n	8002874 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7fd fed6 	bl	80005ec <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002842:	e011      	b.n	8002868 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002844:	f7fd fed2 	bl	80005ec <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002852:	4293      	cmp	r3, r2
 8002854:	d908      	bls.n	8002868 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e0f8      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	08007638 	.word	0x08007638
 8002864:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002868:	4b7a      	ldr	r3, [pc, #488]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e7      	bne.n	8002844 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d105      	bne.n	8002886 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287a:	4a76      	ldr	r2, [pc, #472]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 800287c:	4b75      	ldr	r3, [pc, #468]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00c      	beq.n	80028a8 <HAL_RCC_OscConfig+0x4bc>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d008      	beq.n	80028a8 <HAL_RCC_OscConfig+0x4bc>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d004      	beq.n	80028a8 <HAL_RCC_OscConfig+0x4bc>
 800289e:	f240 215b 	movw	r1, #603	; 0x25b
 80028a2:	486d      	ldr	r0, [pc, #436]	; (8002a58 <HAL_RCC_OscConfig+0x66c>)
 80028a4:	f003 ffa0 	bl	80067e8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80cc 	beq.w	8002a4a <HAL_RCC_OscConfig+0x65e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b2:	4b68      	ldr	r3, [pc, #416]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	f000 80c3 	beq.w	8002a46 <HAL_RCC_OscConfig+0x65a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	f040 80a4 	bne.w	8002a12 <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_RCC_OscConfig+0x4fa>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028da:	d004      	beq.n	80028e6 <HAL_RCC_OscConfig+0x4fa>
 80028dc:	f44f 7119 	mov.w	r1, #612	; 0x264
 80028e0:	485d      	ldr	r0, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x66c>)
 80028e2:	f003 ff81 	bl	80067e8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d903      	bls.n	80028f6 <HAL_RCC_OscConfig+0x50a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	2b3f      	cmp	r3, #63	; 0x3f
 80028f4:	d904      	bls.n	8002900 <HAL_RCC_OscConfig+0x514>
 80028f6:	f240 2165 	movw	r1, #613	; 0x265
 80028fa:	4857      	ldr	r0, [pc, #348]	; (8002a58 <HAL_RCC_OscConfig+0x66c>)
 80028fc:	f003 ff74 	bl	80067e8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	2b31      	cmp	r3, #49	; 0x31
 8002906:	d904      	bls.n	8002912 <HAL_RCC_OscConfig+0x526>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002910:	d904      	bls.n	800291c <HAL_RCC_OscConfig+0x530>
 8002912:	f240 2166 	movw	r1, #614	; 0x266
 8002916:	4850      	ldr	r0, [pc, #320]	; (8002a58 <HAL_RCC_OscConfig+0x66c>)
 8002918:	f003 ff66 	bl	80067e8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	2b02      	cmp	r3, #2
 8002922:	d010      	beq.n	8002946 <HAL_RCC_OscConfig+0x55a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	2b04      	cmp	r3, #4
 800292a:	d00c      	beq.n	8002946 <HAL_RCC_OscConfig+0x55a>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	2b06      	cmp	r3, #6
 8002932:	d008      	beq.n	8002946 <HAL_RCC_OscConfig+0x55a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	2b08      	cmp	r3, #8
 800293a:	d004      	beq.n	8002946 <HAL_RCC_OscConfig+0x55a>
 800293c:	f240 2167 	movw	r1, #615	; 0x267
 8002940:	4845      	ldr	r0, [pc, #276]	; (8002a58 <HAL_RCC_OscConfig+0x66c>)
 8002942:	f003 ff51 	bl	80067e8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	2b01      	cmp	r3, #1
 800294c:	d903      	bls.n	8002956 <HAL_RCC_OscConfig+0x56a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	2b0f      	cmp	r3, #15
 8002954:	d904      	bls.n	8002960 <HAL_RCC_OscConfig+0x574>
 8002956:	f44f 711a 	mov.w	r1, #616	; 0x268
 800295a:	483f      	ldr	r0, [pc, #252]	; (8002a58 <HAL_RCC_OscConfig+0x66c>)
 800295c:	f003 ff44 	bl	80067e8 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	2b01      	cmp	r3, #1
 8002966:	d903      	bls.n	8002970 <HAL_RCC_OscConfig+0x584>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	2b07      	cmp	r3, #7
 800296e:	d904      	bls.n	800297a <HAL_RCC_OscConfig+0x58e>
 8002970:	f240 216a 	movw	r1, #618	; 0x26a
 8002974:	4838      	ldr	r0, [pc, #224]	; (8002a58 <HAL_RCC_OscConfig+0x66c>)
 8002976:	f003 ff37 	bl	80067e8 <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4a36      	ldr	r2, [pc, #216]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 800297c:	4b35      	ldr	r3, [pc, #212]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002986:	f7fd fe31 	bl	80005ec <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x5b4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298e:	f7fd fe2d 	bl	80005ec <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e055      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a0:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ac:	4929      	ldr	r1, [pc, #164]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	019b      	lsls	r3, r3, #6
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	085b      	lsrs	r3, r3, #1
 80029c6:	3b01      	subs	r3, #1
 80029c8:	041b      	lsls	r3, r3, #16
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	061b      	lsls	r3, r3, #24
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	071b      	lsls	r3, r3, #28
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ea:	f7fd fdff 	bl	80005ec <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fd fdfb 	bl	80005ec <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e023      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f0      	beq.n	80029f2 <HAL_RCC_OscConfig+0x606>
 8002a10:	e01b      	b.n	8002a4a <HAL_RCC_OscConfig+0x65e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a12:	4a10      	ldr	r2, [pc, #64]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fd fde5 	bl	80005ec <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fd fde1 	bl	80005ec <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e009      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_OscConfig+0x668>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x63a>
 8002a44:	e001      	b.n	8002a4a <HAL_RCC_OscConfig+0x65e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x660>
    }
  }
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40023800 	.word	0x40023800
 8002a58:	08007638 	.word	0x08007638

08002a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e18a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x28>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b0f      	cmp	r3, #15
 8002a82:	d904      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x32>
 8002a84:	f240 21da 	movw	r1, #730	; 0x2da
 8002a88:	4887      	ldr	r0, [pc, #540]	; (8002ca8 <HAL_RCC_ClockConfig+0x24c>)
 8002a8a:	f003 fead 	bl	80067e8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d031      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d02e      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d02b      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d028      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d025      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b05      	cmp	r3, #5
 8002ab0:	d022      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b06      	cmp	r3, #6
 8002ab6:	d01f      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b07      	cmp	r3, #7
 8002abc:	d01c      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d019      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b09      	cmp	r3, #9
 8002ac8:	d016      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b0a      	cmp	r3, #10
 8002ace:	d013      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b0b      	cmp	r3, #11
 8002ad4:	d010      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	d00d      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2b0d      	cmp	r3, #13
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b0e      	cmp	r3, #14
 8002ae6:	d007      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d004      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x9c>
 8002aee:	f240 21db 	movw	r1, #731	; 0x2db
 8002af2:	486d      	ldr	r0, [pc, #436]	; (8002ca8 <HAL_RCC_ClockConfig+0x24c>)
 8002af4:	f003 fe78 	bl	80067e8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af8:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <HAL_RCC_ClockConfig+0x250>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 020f 	and.w	r2, r3, #15
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d210      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4969      	ldr	r1, [pc, #420]	; (8002cac <HAL_RCC_ClockConfig+0x250>)
 8002b08:	4b68      	ldr	r3, [pc, #416]	; (8002cac <HAL_RCC_ClockConfig+0x250>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 020f 	bic.w	r2, r3, #15
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b65      	ldr	r3, [pc, #404]	; (8002cac <HAL_RCC_ClockConfig+0x250>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 020f 	and.w	r2, r3, #15
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e130      	b.n	8002d8a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d049      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b40:	4a5b      	ldr	r2, [pc, #364]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002b42:	4b5b      	ldr	r3, [pc, #364]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b58:	4a55      	ldr	r2, [pc, #340]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002b5a:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d024      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x15a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b80      	cmp	r3, #128	; 0x80
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x15a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b90      	cmp	r3, #144	; 0x90
 8002b7a:	d01c      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x15a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2ba0      	cmp	r3, #160	; 0xa0
 8002b82:	d018      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x15a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2bb0      	cmp	r3, #176	; 0xb0
 8002b8a:	d014      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x15a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2bc0      	cmp	r3, #192	; 0xc0
 8002b92:	d010      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x15a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2bd0      	cmp	r3, #208	; 0xd0
 8002b9a:	d00c      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x15a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2be0      	cmp	r3, #224	; 0xe0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x15a>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2bf0      	cmp	r3, #240	; 0xf0
 8002baa:	d004      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x15a>
 8002bac:	f240 21ff 	movw	r1, #767	; 0x2ff
 8002bb0:	483d      	ldr	r0, [pc, #244]	; (8002ca8 <HAL_RCC_ClockConfig+0x24c>)
 8002bb2:	f003 fe19 	bl	80067e8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb6:	493e      	ldr	r1, [pc, #248]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002bb8:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d051      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00c      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x19a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x19a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d004      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x19a>
 8002bec:	f240 3106 	movw	r1, #774	; 0x306
 8002bf0:	482d      	ldr	r0, [pc, #180]	; (8002ca8 <HAL_RCC_ClockConfig+0x24c>)
 8002bf2:	f003 fdf9 	bl	80067e8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d115      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0bd      	b.n	8002d8a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0b1      	b.n	8002d8a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c26:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0a9      	b.n	8002d8a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c36:	491e      	ldr	r1, [pc, #120]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f023 0203 	bic.w	r2, r3, #3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c48:	f7fd fcd0 	bl	80005ec <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c50:	f7fd fccc 	bl	80005ec <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e091      	b.n	8002d8a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <HAL_RCC_ClockConfig+0x254>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 020c 	and.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d1eb      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_RCC_ClockConfig+0x250>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 020f 	and.w	r2, r3, #15
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d916      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4909      	ldr	r1, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x250>)
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <HAL_RCC_ClockConfig+0x250>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 020f 	bic.w	r2, r3, #15
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_ClockConfig+0x250>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 020f 	and.w	r2, r3, #15
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d007      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e070      	b.n	8002d8a <HAL_RCC_ClockConfig+0x32e>
 8002ca8:	08007638 	.word	0x08007638
 8002cac:	40023c00 	.word	0x40023c00
 8002cb0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d025      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d018      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x29e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd0:	d013      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x29e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002cda:	d00e      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x29e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x29e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002cee:	d004      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x29e>
 8002cf0:	f240 3143 	movw	r1, #835	; 0x343
 8002cf4:	4827      	ldr	r0, [pc, #156]	; (8002d94 <HAL_RCC_ClockConfig+0x338>)
 8002cf6:	f003 fd77 	bl	80067e8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfa:	4927      	ldr	r1, [pc, #156]	; (8002d98 <HAL_RCC_ClockConfig+0x33c>)
 8002cfc:	4b26      	ldr	r3, [pc, #152]	; (8002d98 <HAL_RCC_ClockConfig+0x33c>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d026      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d018      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x2f6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d28:	d013      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x2f6>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d32:	d00e      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x2f6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x2f6>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002d46:	d004      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x2f6>
 8002d48:	f240 314a 	movw	r1, #842	; 0x34a
 8002d4c:	4811      	ldr	r0, [pc, #68]	; (8002d94 <HAL_RCC_ClockConfig+0x338>)
 8002d4e:	f003 fd4b 	bl	80067e8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d52:	4911      	ldr	r1, [pc, #68]	; (8002d98 <HAL_RCC_ClockConfig+0x33c>)
 8002d54:	4b10      	ldr	r3, [pc, #64]	; (8002d98 <HAL_RCC_ClockConfig+0x33c>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d66:	f000 f81d 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002d6a:	4601      	mov	r1, r0
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <HAL_RCC_ClockConfig+0x33c>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x340>)
 8002d78:	5cd3      	ldrb	r3, [r2, r3]
 8002d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <HAL_RCC_ClockConfig+0x344>)
 8002d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7fd fbee 	bl	8000564 <HAL_InitTick>

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	08007638 	.word	0x08007638
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08007724 	.word	0x08007724
 8002da0:	20000118 	.word	0x20000118

08002da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002da8:	b087      	sub	sp, #28
 8002daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002dac:	2200      	movs	r2, #0
 8002dae:	60fa      	str	r2, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	617a      	str	r2, [r7, #20]
 8002db4:	2200      	movs	r2, #0
 8002db6:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8002db8:	2200      	movs	r2, #0
 8002dba:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dbc:	4a51      	ldr	r2, [pc, #324]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dbe:	6892      	ldr	r2, [r2, #8]
 8002dc0:	f002 020c 	and.w	r2, r2, #12
 8002dc4:	2a04      	cmp	r2, #4
 8002dc6:	d007      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dc8:	2a08      	cmp	r2, #8
 8002dca:	d008      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x3a>
 8002dcc:	2a00      	cmp	r2, #0
 8002dce:	f040 8090 	bne.w	8002ef2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd2:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x164>)
 8002dd4:	613b      	str	r3, [r7, #16]
       break;
 8002dd6:	e08f      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dd8:	4b4c      	ldr	r3, [pc, #304]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x168>)
 8002dda:	613b      	str	r3, [r7, #16]
      break;
 8002ddc:	e08c      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dde:	4a49      	ldr	r2, [pc, #292]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x160>)
 8002de0:	6852      	ldr	r2, [r2, #4]
 8002de2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002de6:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002de8:	4a46      	ldr	r2, [pc, #280]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dea:	6852      	ldr	r2, [r2, #4]
 8002dec:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002df0:	2a00      	cmp	r2, #0
 8002df2:	d023      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df4:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x160>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	f04f 0400 	mov.w	r4, #0
 8002dfe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	ea03 0301 	and.w	r3, r3, r1
 8002e0a:	ea04 0402 	and.w	r4, r4, r2
 8002e0e:	4a3f      	ldr	r2, [pc, #252]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x168>)
 8002e10:	fb02 f104 	mul.w	r1, r2, r4
 8002e14:	2200      	movs	r2, #0
 8002e16:	fb02 f203 	mul.w	r2, r2, r3
 8002e1a:	440a      	add	r2, r1
 8002e1c:	493b      	ldr	r1, [pc, #236]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x168>)
 8002e1e:	fba3 0101 	umull	r0, r1, r3, r1
 8002e22:	1853      	adds	r3, r2, r1
 8002e24:	4619      	mov	r1, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f04f 0400 	mov.w	r4, #0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4623      	mov	r3, r4
 8002e30:	f7fd fa02 	bl	8000238 <__aeabi_uldivmod>
 8002e34:	4603      	mov	r3, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e04c      	b.n	8002ed6 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e3c:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e3e:	6852      	ldr	r2, [r2, #4]
 8002e40:	0992      	lsrs	r2, r2, #6
 8002e42:	4611      	mov	r1, r2
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002e4c:	f04f 0600 	mov.w	r6, #0
 8002e50:	ea05 0501 	and.w	r5, r5, r1
 8002e54:	ea06 0602 	and.w	r6, r6, r2
 8002e58:	4629      	mov	r1, r5
 8002e5a:	4632      	mov	r2, r6
 8002e5c:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002e60:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002e64:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002e68:	4651      	mov	r1, sl
 8002e6a:	465a      	mov	r2, fp
 8002e6c:	46aa      	mov	sl, r5
 8002e6e:	46b3      	mov	fp, r6
 8002e70:	4655      	mov	r5, sl
 8002e72:	465e      	mov	r6, fp
 8002e74:	1b4d      	subs	r5, r1, r5
 8002e76:	eb62 0606 	sbc.w	r6, r2, r6
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	4632      	mov	r2, r6
 8002e7e:	0194      	lsls	r4, r2, #6
 8002e80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e84:	018b      	lsls	r3, r1, #6
 8002e86:	1a5b      	subs	r3, r3, r1
 8002e88:	eb64 0402 	sbc.w	r4, r4, r2
 8002e8c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002e90:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002e94:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002e98:	4643      	mov	r3, r8
 8002e9a:	464c      	mov	r4, r9
 8002e9c:	4655      	mov	r5, sl
 8002e9e:	465e      	mov	r6, fp
 8002ea0:	18ed      	adds	r5, r5, r3
 8002ea2:	eb46 0604 	adc.w	r6, r6, r4
 8002ea6:	462b      	mov	r3, r5
 8002ea8:	4634      	mov	r4, r6
 8002eaa:	02a2      	lsls	r2, r4, #10
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	029b      	lsls	r3, r3, #10
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f04f 0400 	mov.w	r4, #0
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4623      	mov	r3, r4
 8002ecc:	f7fd f9b4 	bl	8000238 <__aeabi_uldivmod>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	460c      	mov	r4, r1
 8002ed4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0c1b      	lsrs	r3, r3, #16
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eee:	613b      	str	r3, [r7, #16]
      break;
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x164>)
 8002ef4:	613b      	str	r3, [r7, #16]
      break;
 8002ef6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef8:	693b      	ldr	r3, [r7, #16]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f04:	40023800 	.word	0x40023800
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	00b71b00 	.word	0x00b71b00

08002f10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	20000118 	.word	0x20000118

08002f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f040 8097 	bne.w	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f040 8090 	bne.w	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f040 8089 	bne.w	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 8082 	bne.w	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d17b      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d175      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d16f      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d169      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d163      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d15d      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d157      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d151      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d14b      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d145      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d13f      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d139      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d133      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d12d      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d127      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d121      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d11b      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d115      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10f      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d109      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003078:	2183      	movs	r1, #131	; 0x83
 800307a:	48a3      	ldr	r0, [pc, #652]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800307c:	f003 fbb4 	bl	80067e8 <assert_failed>
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01f      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800309c:	d003      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800309e:	2189      	movs	r1, #137	; 0x89
 80030a0:	4899      	ldr	r0, [pc, #612]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a2:	f003 fba1 	bl	80067e8 <assert_failed>
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030a6:	4a99      	ldr	r2, [pc, #612]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030a8:	4b98      	ldr	r3, [pc, #608]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030b0:	6093      	str	r3, [r2, #8]
 80030b2:	4996      	ldr	r1, [pc, #600]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b4:	4b95      	ldr	r3, [pc, #596]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	4313      	orrs	r3, r2
 80030be:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      plli2sused = 1; 
 80030c8:	2301      	movs	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d02e      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d012      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030e8:	d00d      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030f2:	d008      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030fc:	d003      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1de>
 80030fe:	2199      	movs	r1, #153	; 0x99
 8003100:	4881      	ldr	r0, [pc, #516]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003102:	f003 fb71 	bl	80067e8 <assert_failed>
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003106:	4981      	ldr	r1, [pc, #516]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003108:	4b80      	ldr	r3, [pc, #512]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800310a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800310e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003124:	d101      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      plli2sused = 1; 
 8003126:	2301      	movs	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      pllsaiused = 1; 
 8003132:	2301      	movs	r3, #1
 8003134:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d02e      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	2b00      	cmp	r3, #0
 8003148:	d012      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003152:	d00d      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800315c:	d008      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003166:	d003      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8003168:	21ad      	movs	r1, #173	; 0xad
 800316a:	4867      	ldr	r0, [pc, #412]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316c:	f003 fb3c 	bl	80067e8 <assert_failed>
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003170:	4966      	ldr	r1, [pc, #408]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003172:	4b66      	ldr	r3, [pc, #408]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800318e:	d101      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    {
      plli2sused = 1; 
 8003190:	2301      	movs	r3, #1
 8003192:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x278>
    {
      pllsaiused = 1; 
 800319c:	2301      	movs	r3, #1
 800319e:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {    
      plli2sused = 1; 
 80031ac:	2301      	movs	r3, #1
 80031ae:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 8188 	beq.w	80034ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c6:	f000 80ec 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031d2:	f000 80e6 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a4d      	ldr	r2, [pc, #308]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	f000 80e0 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	4a4b      	ldr	r2, [pc, #300]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	f000 80da 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a49      	ldr	r2, [pc, #292]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	f000 80d4 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	4a47      	ldr	r2, [pc, #284]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	f000 80ce 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a45      	ldr	r2, [pc, #276]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	f000 80c8 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a43      	ldr	r2, [pc, #268]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	f000 80c2 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a41      	ldr	r2, [pc, #260]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003224:	4293      	cmp	r3, r2
 8003226:	f000 80bc 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a3f      	ldr	r2, [pc, #252]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8003230:	4293      	cmp	r3, r2
 8003232:	f000 80b6 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a3d      	ldr	r2, [pc, #244]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 800323c:	4293      	cmp	r3, r2
 800323e:	f000 80b0 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a3b      	ldr	r2, [pc, #236]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	f000 80aa 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a39      	ldr	r2, [pc, #228]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8003254:	4293      	cmp	r3, r2
 8003256:	f000 80a4 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a37      	ldr	r2, [pc, #220]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003260:	4293      	cmp	r3, r2
 8003262:	f000 809e 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a35      	ldr	r2, [pc, #212]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 800326c:	4293      	cmp	r3, r2
 800326e:	f000 8098 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a33      	ldr	r2, [pc, #204]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	f000 8092 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a31      	ldr	r2, [pc, #196]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8003284:	4293      	cmp	r3, r2
 8003286:	f000 808c 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a2f      	ldr	r2, [pc, #188]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003290:	4293      	cmp	r3, r2
 8003292:	f000 8086 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a2d      	ldr	r2, [pc, #180]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800329c:	4293      	cmp	r3, r2
 800329e:	f000 8080 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d07a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d075      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a28      	ldr	r2, [pc, #160]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d070      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d06b      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a25      	ldr	r2, [pc, #148]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d066      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	4a23      	ldr	r2, [pc, #140]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d061      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	4a22      	ldr	r2, [pc, #136]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d05c      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	4a20      	ldr	r2, [pc, #128]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d057      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d052      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d04d      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003306:	e039      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x454>
 8003308:	08007670 	.word	0x08007670
 800330c:	40023800 	.word	0x40023800
 8003310:	00020300 	.word	0x00020300
 8003314:	00030300 	.word	0x00030300
 8003318:	00040300 	.word	0x00040300
 800331c:	00050300 	.word	0x00050300
 8003320:	00060300 	.word	0x00060300
 8003324:	00070300 	.word	0x00070300
 8003328:	00080300 	.word	0x00080300
 800332c:	00090300 	.word	0x00090300
 8003330:	000a0300 	.word	0x000a0300
 8003334:	000b0300 	.word	0x000b0300
 8003338:	000c0300 	.word	0x000c0300
 800333c:	000d0300 	.word	0x000d0300
 8003340:	000e0300 	.word	0x000e0300
 8003344:	000f0300 	.word	0x000f0300
 8003348:	00100300 	.word	0x00100300
 800334c:	00110300 	.word	0x00110300
 8003350:	00120300 	.word	0x00120300
 8003354:	00130300 	.word	0x00130300
 8003358:	00140300 	.word	0x00140300
 800335c:	00150300 	.word	0x00150300
 8003360:	00160300 	.word	0x00160300
 8003364:	00170300 	.word	0x00170300
 8003368:	00180300 	.word	0x00180300
 800336c:	00190300 	.word	0x00190300
 8003370:	001a0300 	.word	0x001a0300
 8003374:	001b0300 	.word	0x001b0300
 8003378:	001c0300 	.word	0x001c0300
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003380:	4a44      	ldr	r2, [pc, #272]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00d      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a43      	ldr	r2, [pc, #268]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d008      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	4a41      	ldr	r2, [pc, #260]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800339a:	21c8      	movs	r1, #200	; 0xc8
 800339c:	4840      	ldr	r0, [pc, #256]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800339e:	f003 fa23 	bl	80067e8 <assert_failed>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	4a40      	ldr	r2, [pc, #256]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 80033a4:	4b3f      	ldr	r3, [pc, #252]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ac:	6413      	str	r3, [r2, #64]	; 0x40
 80033ae:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033ba:	4a3b      	ldr	r2, [pc, #236]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80033bc:	4b3a      	ldr	r3, [pc, #232]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c4:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c6:	f7fd f911 	bl	80005ec <HAL_GetTick>
 80033ca:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033cc:	e009      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ce:	f7fd f90d 	bl	80005ec <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b64      	cmp	r3, #100	; 0x64
 80033da:	d902      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      {
        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	f000 bda8 	b.w	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x100a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033e2:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ef      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033ee:	4b2d      	ldr	r3, [pc, #180]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d036      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x544>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	429a      	cmp	r2, r3
 800340a:	d02f      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003416:	4a23      	ldr	r2, [pc, #140]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003418:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003420:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003422:	4a20      	ldr	r2, [pc, #128]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800342e:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d015      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fd f8d4 	bl	80005ec <HAL_GetTick>
 8003444:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003446:	e00b      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7fd f8d0 	bl	80005ec <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d902      	bls.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x538>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	f000 bd69 	b.w	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ed      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x520>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003478:	d11a      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800347a:	480a      	ldr	r0, [pc, #40]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003488:	4b08      	ldr	r3, [pc, #32]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800348a:	400b      	ands	r3, r1
 800348c:	4313      	orrs	r3, r2
 800348e:	6083      	str	r3, [r0, #8]
 8003490:	e014      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003492:	bf00      	nop
 8003494:	001d0300 	.word	0x001d0300
 8003498:	001e0300 	.word	0x001e0300
 800349c:	001f0300 	.word	0x001f0300
 80034a0:	08007670 	.word	0x08007670
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40007000 	.word	0x40007000
 80034ac:	0ffffcff 	.word	0x0ffffcff
 80034b0:	4aa8      	ldr	r2, [pc, #672]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034b2:	4ba8      	ldr	r3, [pc, #672]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034ba:	6093      	str	r3, [r2, #8]
 80034bc:	49a5      	ldr	r1, [pc, #660]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034be:	4ba5      	ldr	r3, [pc, #660]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ca:	4313      	orrs	r3, r2
 80034cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01e      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ea:	d004      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
 80034ec:	f44f 7181 	mov.w	r1, #258	; 0x102
 80034f0:	4899      	ldr	r0, [pc, #612]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80034f2:	f003 f979 	bl	80067e8 <assert_failed>
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034f6:	4a97      	ldr	r2, [pc, #604]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034f8:	4b96      	ldr	r3, [pc, #600]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003502:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003506:	4993      	ldr	r1, [pc, #588]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8003508:	4b92      	ldr	r3, [pc, #584]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800350a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01d      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x638>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00e      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x622>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d009      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x622>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800353a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800353e:	d004      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x622>
 8003540:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8003544:	4884      	ldr	r0, [pc, #528]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8003546:	f003 f94f 	bl	80067e8 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800354a:	4982      	ldr	r1, [pc, #520]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800354c:	4b81      	ldr	r3, [pc, #516]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800354e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003552:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01d      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x680>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003578:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800357c:	d009      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003582:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003586:	d004      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003588:	f44f 718b 	mov.w	r1, #278	; 0x116
 800358c:	4872      	ldr	r0, [pc, #456]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800358e:	f003 f92b 	bl	80067e8 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003592:	4970      	ldr	r1, [pc, #448]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8003594:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d01d      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00e      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c4:	d009      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035ce:	d004      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80035d0:	f44f 7190 	mov.w	r1, #288	; 0x120
 80035d4:	4860      	ldr	r0, [pc, #384]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80035d6:	f003 f907 	bl	80067e8 <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035da:	495e      	ldr	r1, [pc, #376]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80035dc:	4b5d      	ldr	r3, [pc, #372]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01d      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x710>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360c:	d009      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003616:	d004      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8003618:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800361c:	484e      	ldr	r0, [pc, #312]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800361e:	f003 f8e3 	bl	80067e8 <assert_failed>
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003622:	494c      	ldr	r1, [pc, #304]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8003624:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01f      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	2b00      	cmp	r3, #0
 800364a:	d010      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x746>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	2b01      	cmp	r3, #1
 8003652:	d00c      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x746>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	2b03      	cmp	r3, #3
 800365a:	d008      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x746>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003660:	2b02      	cmp	r3, #2
 8003662:	d004      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x746>
 8003664:	f44f 719a 	mov.w	r1, #308	; 0x134
 8003668:	483b      	ldr	r0, [pc, #236]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800366a:	f003 f8bd 	bl	80067e8 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800366e:	4939      	ldr	r1, [pc, #228]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8003670:	4b38      	ldr	r3, [pc, #224]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4313      	orrs	r3, r2
 8003680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01f      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	2b00      	cmp	r3, #0
 8003696:	d010      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x792>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	2b04      	cmp	r3, #4
 800369e:	d00c      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x792>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a4:	2b0c      	cmp	r3, #12
 80036a6:	d008      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x792>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d004      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x792>
 80036b0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80036b4:	4828      	ldr	r0, [pc, #160]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80036b6:	f003 f897 	bl	80067e8 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036ba:	4926      	ldr	r1, [pc, #152]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80036bc:	4b25      	ldr	r3, [pc, #148]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f023 020c 	bic.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d01f      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x7f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d010      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d00c      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f0:	2b30      	cmp	r3, #48	; 0x30
 80036f2:	d008      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d004      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80036fc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003700:	4815      	ldr	r0, [pc, #84]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8003702:	f003 f871 	bl	80067e8 <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003706:	4913      	ldr	r1, [pc, #76]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003724:	2b00      	cmp	r3, #0
 8003726:	d024      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x84a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	2b00      	cmp	r3, #0
 800372e:	d015      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x834>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003734:	2b40      	cmp	r3, #64	; 0x40
 8003736:	d011      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x834>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	2bc0      	cmp	r3, #192	; 0xc0
 800373e:	d00d      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x834>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003744:	2b80      	cmp	r3, #128	; 0x80
 8003746:	d009      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x834>
 8003748:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800374e:	f003 f84b 	bl	80067e8 <assert_failed>
 8003752:	e003      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x834>
 8003754:	40023800 	.word	0x40023800
 8003758:	08007670 	.word	0x08007670
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800375c:	49af      	ldr	r1, [pc, #700]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 800375e:	4baf      	ldr	r3, [pc, #700]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003764:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377a:	2b00      	cmp	r3, #0
 800377c:	d022      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	2b00      	cmp	r3, #0
 8003784:	d013      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378e:	d00e      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003798:	d009      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x886>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a2:	d004      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x886>
 80037a4:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80037a8:	489d      	ldr	r0, [pc, #628]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80037aa:	f003 f81d 	bl	80067e8 <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037ae:	499b      	ldr	r1, [pc, #620]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80037b0:	4b9a      	ldr	r3, [pc, #616]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d022      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e0:	d00e      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037ea:	d009      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f4:	d004      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80037f6:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80037fa:	4889      	ldr	r0, [pc, #548]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80037fc:	f002 fff4 	bl	80067e8 <assert_failed>
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003800:	4986      	ldr	r1, [pc, #536]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003802:	4b86      	ldr	r3, [pc, #536]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003808:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d022      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x940>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d013      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003832:	d00e      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800383c:	d009      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003846:	d004      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8003848:	f44f 71b8 	mov.w	r1, #368	; 0x170
 800384c:	4874      	ldr	r0, [pc, #464]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800384e:	f002 ffcb 	bl	80067e8 <assert_failed>
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003852:	4972      	ldr	r1, [pc, #456]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003854:	4b71      	ldr	r3, [pc, #452]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	4313      	orrs	r3, r2
 8003864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d022      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x992>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003878:	2b00      	cmp	r3, #0
 800387a:	d013      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003884:	d00e      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800388e:	d009      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003898:	d004      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800389a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800389e:	4860      	ldr	r0, [pc, #384]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80038a0:	f002 ffa2 	bl	80067e8 <assert_failed>
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038a4:	495d      	ldr	r1, [pc, #372]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80038a6:	4b5d      	ldr	r3, [pc, #372]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d018      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d004      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80038d8:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80038dc:	4850      	ldr	r0, [pc, #320]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80038de:	f002 ff83 	bl	80067e8 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038e2:	494e      	ldr	r1, [pc, #312]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80038e4:	4b4d      	ldr	r3, [pc, #308]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01f      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390c:	d008      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
 8003916:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800391a:	4841      	ldr	r0, [pc, #260]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800391c:	f002 ff64 	bl	80067e8 <assert_failed>
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003920:	493e      	ldr	r1, [pc, #248]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003922:	4b3e      	ldr	r3, [pc, #248]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800393a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800393e:	d101      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      pllsaiused = 1; 
 8003940:	2301      	movs	r3, #1
 8003942:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d022      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	2b00      	cmp	r3, #0
 8003956:	d013      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003960:	d00e      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800396a:	d009      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003970:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003974:	d004      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003976:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800397a:	4829      	ldr	r0, [pc, #164]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800397c:	f002 ff34 	bl	80067e8 <assert_failed>
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003980:	4926      	ldr	r1, [pc, #152]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003982:	4b26      	ldr	r3, [pc, #152]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01b      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xab2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ac:	d009      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 80039b8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80039bc:	4818      	ldr	r0, [pc, #96]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80039be:	f002 ff13 	bl	80067e8 <assert_failed>
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039c2:	4916      	ldr	r1, [pc, #88]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80039c4:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80039c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d021      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xb02>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f0:	d009      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xade>
 80039fc:	f240 11bb 	movw	r1, #443	; 0x1bb
 8003a00:	4807      	ldr	r0, [pc, #28]	; (8003a20 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003a02:	f002 fef1 	bl	80067e8 <assert_failed>
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003a06:	4905      	ldr	r1, [pc, #20]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a18:	e004      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	08007670 	.word	0x08007670
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01b      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xb46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a4a:	d004      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003a4c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003a50:	4826      	ldr	r0, [pc, #152]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003a52:	f002 fec9 	bl	80067e8 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a56:	4926      	ldr	r1, [pc, #152]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003a58:	4b25      	ldr	r3, [pc, #148]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d01b      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a8e:	d004      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003a90:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003a94:	4815      	ldr	r0, [pc, #84]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003a96:	f002 fea7 	bl	80067e8 <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a9a:	4915      	ldr	r1, [pc, #84]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003a9c:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d005      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ac0:	f040 8154 	bne.w	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xe44>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8003ac4:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ace:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad0:	f7fc fd8c 	bl	80005ec <HAL_GetTick>
 8003ad4:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ad6:	e00d      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ad8:	f7fc fd88 	bl	80005ec <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d906      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e223      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x100a>
 8003aea:	bf00      	nop
 8003aec:	08007670 	.word	0x08007670
 8003af0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003af4:	4ba9      	ldr	r3, [pc, #676]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
      }
    }
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b31      	cmp	r3, #49	; 0x31
 8003b06:	d904      	bls.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xbea>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003b10:	d904      	bls.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003b12:	f240 11eb 	movw	r1, #491	; 0x1eb
 8003b16:	48a2      	ldr	r0, [pc, #648]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003b18:	f002 fe66 	bl	80067e8 <assert_failed>
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d02e      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d12a      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xc5e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d903      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b07      	cmp	r3, #7
 8003b3e:	d904      	bls.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003b40:	f240 11f1 	movw	r1, #497	; 0x1f1
 8003b44:	4896      	ldr	r0, [pc, #600]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003b46:	f002 fe4f 	bl	80067e8 <assert_failed>
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b4a:	4b94      	ldr	r3, [pc, #592]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b58:	4b90      	ldr	r3, [pc, #576]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5e:	0e1b      	lsrs	r3, r3, #24
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b66:	498d      	ldr	r1, [pc, #564]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	019a      	lsls	r2, r3, #6
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	431a      	orrs	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	061b      	lsls	r3, r3, #24
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	071b      	lsls	r3, r3, #28
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xc8a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d048      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xd12>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb0:	d143      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d903      	bls.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b0f      	cmp	r3, #15
 8003bc0:	d904      	bls.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8003bc2:	f240 2101 	movw	r1, #513	; 0x201
 8003bc6:	4876      	ldr	r0, [pc, #472]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003bc8:	f002 fe0e 	bl	80067e8 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d904      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
 8003bdc:	f240 2103 	movw	r1, #515	; 0x203
 8003be0:	486f      	ldr	r0, [pc, #444]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003be2:	f002 fe01 	bl	80067e8 <assert_failed>
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003be6:	4b6d      	ldr	r3, [pc, #436]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bec:	0c1b      	lsrs	r3, r3, #16
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bf4:	4b69      	ldr	r3, [pc, #420]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfa:	0f1b      	lsrs	r3, r3, #28
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c02:	4966      	ldr	r1, [pc, #408]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	019a      	lsls	r2, r3, #6
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	061b      	lsls	r3, r3, #24
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	071b      	lsls	r3, r3, #28
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8003c22:	495e      	ldr	r1, [pc, #376]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003c24:	4b5d      	ldr	r3, [pc, #372]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c2a:	f023 021f 	bic.w	r2, r3, #31
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	3b01      	subs	r3, #1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d032      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xd84>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d010      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d00c      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d008      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d004      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003c66:	f240 2116 	movw	r1, #534	; 0x216
 8003c6a:	484d      	ldr	r0, [pc, #308]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003c6c:	f002 fdbc 	bl	80067e8 <assert_failed>
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c70:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c76:	0e1b      	lsrs	r3, r3, #24
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c7e:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c84:	0f1b      	lsrs	r3, r3, #28
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c8c:	4943      	ldr	r1, [pc, #268]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	019a      	lsls	r2, r3, #6
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	061b      	lsls	r3, r3, #24
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	071b      	lsls	r3, r3, #28
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d040      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xe12>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d010      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d00c      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d008      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d004      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
 8003cd8:	f240 2125 	movw	r1, #549	; 0x225
 8003cdc:	4830      	ldr	r0, [pc, #192]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003cde:	f002 fd83 	bl	80067e8 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d903      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0xdca>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b07      	cmp	r3, #7
 8003cf0:	d904      	bls.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 8003cf2:	f240 2126 	movw	r1, #550	; 0x226
 8003cf6:	482a      	ldr	r0, [pc, #168]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003cf8:	f002 fd76 	bl	80067e8 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d903      	bls.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b0f      	cmp	r3, #15
 8003d0a:	d904      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8003d0c:	f240 2127 	movw	r1, #551	; 0x227
 8003d10:	4823      	ldr	r0, [pc, #140]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003d12:	f002 fd69 	bl	80067e8 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d16:	4921      	ldr	r1, [pc, #132]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	019a      	lsls	r2, r3, #6
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	061b      	lsls	r3, r3, #24
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	071b      	lsls	r3, r3, #28
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d3a:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d3c:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d44:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d46:	f7fc fc51 	bl	80005ec <HAL_GetTick>
 8003d4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xe38>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d4e:	f7fc fc4d 	bl	80005ec <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b64      	cmp	r3, #100	; 0x64
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xe38>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0e8      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x100a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d60:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	f040 80de 	bne.w	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1008>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8003d74:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d80:	f7fc fc34 	bl	80005ec <HAL_GetTick>
 8003d84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d86:	e00d      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d88:	f7fc fc30 	bl	80005ec <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d906      	bls.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e0cb      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x100a>
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	08007670 	.word	0x08007670
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003da4:	4b65      	ldr	r3, [pc, #404]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db0:	d0ea      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe60>
      }
    } 
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	2b31      	cmp	r3, #49	; 0x31
 8003db8:	d904      	bls.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003dc2:	d904      	bls.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xea6>
 8003dc4:	f240 2155 	movw	r1, #597	; 0x255
 8003dc8:	485d      	ldr	r0, [pc, #372]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1018>)
 8003dca:	f002 fd0d 	bl	80067e8 <assert_failed>
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xeba>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xece>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d048      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xf58>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d144      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xf58>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d903      	bls.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xede>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b0f      	cmp	r3, #15
 8003e04:	d904      	bls.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xee8>
 8003e06:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8003e0a:	484d      	ldr	r0, [pc, #308]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1018>)
 8003e0c:	f002 fcec 	bl	80067e8 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xef8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d904      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xf02>
 8003e20:	f240 215e 	movw	r1, #606	; 0x25e
 8003e24:	4846      	ldr	r0, [pc, #280]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1018>)
 8003e26:	f002 fcdf 	bl	80067e8 <assert_failed>
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e2a:	4b44      	ldr	r3, [pc, #272]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e38:	4b40      	ldr	r3, [pc, #256]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	0f1b      	lsrs	r3, r3, #28
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e46:	493d      	ldr	r1, [pc, #244]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	019a      	lsls	r2, r3, #6
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	061b      	lsls	r3, r3, #24
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	071b      	lsls	r3, r3, #28
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e66:	4935      	ldr	r1, [pc, #212]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003e68:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003e6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e6e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	3b01      	subs	r3, #1
 8003e78:	021b      	lsls	r3, r3, #8
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d037      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e94:	d132      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d010      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xf98>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d00c      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xf98>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d008      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xf98>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d004      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xf98>
 8003eb6:	f240 2171 	movw	r1, #625	; 0x271
 8003eba:	4821      	ldr	r0, [pc, #132]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1018>)
 8003ebc:	f002 fc94 	bl	80067e8 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	0e1b      	lsrs	r3, r3, #24
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ece:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	0f1b      	lsrs	r3, r3, #28
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003edc:	4917      	ldr	r1, [pc, #92]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	019a      	lsls	r2, r3, #6
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	071b      	lsls	r3, r3, #28
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003efc:	4a0f      	ldr	r2, [pc, #60]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003efe:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f06:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f08:	f7fc fb70 	bl	80005ec <HAL_GetTick>
 8003f0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xffa>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f10:	f7fc fb6c 	bl	80005ec <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xffa>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e007      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x100a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f2e:	d1ef      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	08007670 	.word	0x08007670

08003f44 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f44:	b084      	sub	sp, #16
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	f107 0014 	add.w	r0, r7, #20
 8003f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d11e      	bne.n	8003f9a <USB_CoreInit+0x56>
  {

    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <USB_CoreInit+0xa0>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 8003f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d105      	bne.n	8003f92 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f001 f9a4 	bl	80052e0 <USB_CoreReset>
 8003f98:	e00c      	b.n	8003fb4 <USB_CoreInit+0x70>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f001 f99a 	bl	80052e0 <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(cfg.dma_enable == ENABLE)
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d10b      	bne.n	8003fd2 <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f043 0206 	orr.w	r2, r3, #6
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f043 0220 	orr.w	r2, r3, #32
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fde:	b004      	add	sp, #16
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	ffbdffbf 	.word	0xffbdffbf

08003fe8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f043 0201 	orr.w	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 0201 	bic.w	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]

  if ( mode == USB_OTG_HOST_MODE)
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d106      	bne.n	8004058 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	e008      	b.n	800406a <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 800406a:	2032      	movs	r0, #50	; 0x32
 800406c:	f7fc faca 	bl	8000604 <HAL_Delay>

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800407c:	b084      	sub	sp, #16
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	f107 001c 	add.w	r0, r7, #28
 800408a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38

  if (cfg.vbus_sensing_enable == 0)
 800409e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d111      	bne.n	80040c8 <USB_DevInit+0x4c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable*/
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	601a      	str	r2, [r3, #0]
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040ce:	461a      	mov	r2, r3
 80040d0:	2300      	movs	r3, #0
 80040d2:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	461a      	mov	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6013      	str	r3, [r2, #0]

  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10c      	bne.n	8004106 <USB_DevInit+0x8a>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <USB_DevInit+0x80>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 80040f2:	2100      	movs	r1, #0
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f957 	bl	80043a8 <USB_SetDevSpeed>
 80040fa:	e018      	b.n	800412e <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80040fc:	2101      	movs	r1, #1
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f952 	bl	80043a8 <USB_SetDevSpeed>
 8004104:	e013      	b.n	800412e <USB_DevInit+0xb2>
    }
  }

  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	2b03      	cmp	r3, #3
 800410a:	d10c      	bne.n	8004126 <USB_DevInit+0xaa>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d104      	bne.n	800411c <USB_DevInit+0xa0>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8004112:	2100      	movs	r1, #0
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f947 	bl	80043a8 <USB_SetDevSpeed>
 800411a:	e008      	b.n	800412e <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800411c:	2101      	movs	r1, #1
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f942 	bl	80043a8 <USB_SetDevSpeed>
 8004124:	e003      	b.n	800412e <USB_DevInit+0xb2>
  }

  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8004126:	2103      	movs	r1, #3
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f93d 	bl	80043a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 800412e:	2110      	movs	r1, #16
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8f1 	bl	8004318 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f914 	bl	8004364 <USB_FlushRxFifo>

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	461a      	mov	r2, r3
 8004144:	2300      	movs	r3, #0
 8004146:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	461a      	mov	r2, r3
 8004150:	2300      	movs	r3, #0
 8004152:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415a:	461a      	mov	r2, r3
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004168:	461a      	mov	r2, r3
 800416a:	2300      	movs	r3, #0
 800416c:	61d3      	str	r3, [r2, #28]

  for (i = 0; i < cfg.dev_endpoints; i++)
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e034      	b.n	80041de <USB_DevInit+0x162>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800418a:	d10a      	bne.n	80041a2 <USB_DevInit+0x126>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004198:	461a      	mov	r2, r3
 800419a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	e008      	b.n	80041b4 <USB_DevInit+0x138>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ae:	461a      	mov	r2, r3
 80041b0:	2300      	movs	r3, #0
 80041b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	461a      	mov	r2, r3
 80041c2:	2300      	movs	r3, #0
 80041c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	461a      	mov	r2, r3
 80041d4:	23ff      	movs	r3, #255	; 0xff
 80041d6:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	3301      	adds	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d8c6      	bhi.n	8004174 <USB_DevInit+0xf8>
  }

  for (i = 0; i < cfg.dev_endpoints; i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	e034      	b.n	8004256 <USB_DevInit+0x1da>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004202:	d10a      	bne.n	800421a <USB_DevInit+0x19e>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004210:	461a      	mov	r2, r3
 8004212:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	e008      	b.n	800422c <USB_DevInit+0x1b0>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	2300      	movs	r3, #0
 800422a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004238:	461a      	mov	r2, r3
 800423a:	2300      	movs	r3, #0
 800423c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424a:	461a      	mov	r2, r3
 800424c:	23ff      	movs	r3, #255	; 0xff
 800424e:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3301      	adds	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	429a      	cmp	r2, r3
 800425c:	d8c6      	bhi.n	80041ec <USB_DevInit+0x170>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004264:	461a      	mov	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004272:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1)
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	2b01      	cmp	r3, #1
 8004278:	d115      	bne.n	80042a6 <USB_DevInit+0x22a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	461a      	mov	r2, r3
 8004282:	4b21      	ldr	r3, [pc, #132]	; (8004308 <USB_DevInit+0x28c>)
 8004284:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428c:	4619      	mov	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <USB_DevInit+0x290>)
 8004298:	4313      	orrs	r3, r2
 800429a:	630b      	str	r3, [r1, #48]	; 0x30

    i= USBx_DEVICE->DTHRCTL;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80042b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d105      	bne.n	80042c6 <USB_DevInit+0x24a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f043 0210 	orr.w	r2, r3, #16
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <USB_DevInit+0x294>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 80042d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <USB_DevInit+0x268>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f043 0208 	orr.w	r2, r3, #8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80042e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d105      	bne.n	80042f6 <USB_DevInit+0x27a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <USB_DevInit+0x298>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6193      	str	r3, [r2, #24]
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004302:	b004      	add	sp, #16
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	00800100 	.word	0x00800100
 800430c:	00010003 	.word	0x00010003
 8004310:	803c3800 	.word	0x803c3800
 8004314:	40000004 	.word	0x40000004

08004318 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	019b      	lsls	r3, r3, #6
 800432a:	f043 0220 	orr.w	r2, r3, #32
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3301      	adds	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a09      	ldr	r2, [pc, #36]	; (8004360 <USB_FlushTxFifo+0x48>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e006      	b.n	8004352 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b20      	cmp	r3, #32
 800434e:	d0f0      	beq.n	8004332 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	00030d40 	.word	0x00030d40

08004364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2210      	movs	r2, #16
 8004374:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3301      	adds	r3, #1
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <USB_FlushRxFifo+0x40>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e006      	b.n	8004396 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b10      	cmp	r3, #16
 8004392:	d0f0      	beq.n	8004376 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	00030d40 	.word	0x00030d40

080043a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ba:	4619      	mov	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	73fb      	strb	r3, [r7, #15]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0306 	and.w	r3, r3, #6
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 80043f4:	2300      	movs	r3, #0
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	e01c      	b.n	8004434 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0306 	and.w	r3, r3, #6
 8004406:	2b02      	cmp	r3, #2
 8004408:	d007      	beq.n	800441a <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8004416:	2b06      	cmp	r3, #6
 8004418:	d102      	bne.n	8004420 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 800441a:	2303      	movs	r3, #3
 800441c:	73fb      	strb	r3, [r7, #15]
 800441e:	e009      	b.n	8004434 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0306 	and.w	r3, r3, #6
 800442c:	2b04      	cmp	r3, #4
 800442e:	d101      	bne.n	8004434 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8004430:	2302      	movs	r3, #2
 8004432:	73fb      	strb	r3, [r7, #15]
  }

  return speed;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	785b      	ldrb	r3, [r3, #1]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d13c      	bne.n	80044d0 <USB_ActivateEndpoint+0x8c>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445c:	4619      	mov	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004464:	69da      	ldr	r2, [r3, #28]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4083      	lsls	r3, r0
 8004470:	b29b      	uxth	r3, r3
 8004472:	4313      	orrs	r3, r2
 8004474:	61cb      	str	r3, [r1, #28]

    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d158      	bne.n	8004540 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	4618      	mov	r0, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044b6:	6839      	ldr	r1, [r7, #0]
 80044b8:	78c9      	ldrb	r1, [r1, #3]
 80044ba:	0489      	lsls	r1, r1, #18
 80044bc:	430b      	orrs	r3, r1
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP));
 80044be:	6839      	ldr	r1, [r7, #0]
 80044c0:	7809      	ldrb	r1, [r1, #0]
 80044c2:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80044c4:	430b      	orrs	r3, r1
 80044c6:	431a      	orrs	r2, r3
 80044c8:	4b21      	ldr	r3, [pc, #132]	; (8004550 <USB_ActivateEndpoint+0x10c>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	6003      	str	r3, [r0, #0]
 80044ce:	e037      	b.n	8004540 <USB_ActivateEndpoint+0xfc>
    }

  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	4619      	mov	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	7812      	ldrb	r2, [r2, #0]
 80044e4:	4610      	mov	r0, r2
 80044e6:	2201      	movs	r2, #1
 80044e8:	4082      	lsls	r2, r0
 80044ea:	0412      	lsls	r2, r2, #16
 80044ec:	4313      	orrs	r3, r2
 80044ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d11b      	bne.n	8004540 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004516:	4618      	mov	r0, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004530:	6839      	ldr	r1, [r7, #0]
 8004532:	78c9      	ldrb	r1, [r1, #3]
 8004534:	0489      	lsls	r1, r1, #18
 8004536:	430b      	orrs	r3, r1
 8004538:	431a      	orrs	r2, r3
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <USB_ActivateEndpoint+0x10c>)
 800453c:	4313      	orrs	r3, r2
 800453e:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	10008000 	.word	0x10008000

08004554 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	785b      	ldrb	r3, [r3, #1]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d135      	bne.n	80045d2 <USB_DeactivateEndpoint+0x7e>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456c:	4619      	mov	r1, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	2301      	movs	r3, #1
 800457e:	4083      	lsls	r3, r0
 8004580:	b29b      	uxth	r3, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	4013      	ands	r3, r2
 8004586:	63cb      	str	r3, [r1, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	4619      	mov	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	2301      	movs	r3, #1
 80045a0:	4083      	lsls	r3, r0
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	4013      	ands	r3, r2
 80045a8:	61cb      	str	r3, [r1, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b8:	4619      	mov	r1, r3
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045ce:	600b      	str	r3, [r1, #0]
 80045d0:	e034      	b.n	800463c <USB_DeactivateEndpoint+0xe8>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d8:	4619      	mov	r1, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	2301      	movs	r3, #1
 80045ea:	4083      	lsls	r3, r0
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	43db      	mvns	r3, r3
 80045f0:	4013      	ands	r3, r2
 80045f2:	63cb      	str	r3, [r1, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	4619      	mov	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	2301      	movs	r3, #1
 800460c:	4083      	lsls	r3, r0
 800460e:	041b      	lsls	r3, r3, #16
 8004610:	43db      	mvns	r3, r3
 8004612:	4013      	ands	r3, r2
 8004614:	61cb      	str	r3, [r1, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004624:	4619      	mov	r1, r3
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800463a:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	4613      	mov	r3, r2
 8004658:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0;
 800465a:	2300      	movs	r3, #0
 800465c:	82fb      	strh	r3, [r7, #22]

  /* IN endpoint */
  if (ep->is_in == 1)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b01      	cmp	r3, #1
 8004664:	f040 8148 	bne.w	80048f8 <USB_EPStartXfer+0x2ac>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d139      	bne.n	80046e4 <USB_EPStartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	4619      	mov	r1, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	4b96      	ldr	r3, [pc, #600]	; (80048ec <USB_EPStartXfer+0x2a0>)
 8004692:	4013      	ands	r3, r2
 8004694:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a4:	4619      	mov	r1, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	4619      	mov	r1, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	4b84      	ldr	r3, [pc, #528]	; (80048f0 <USB_EPStartXfer+0x2a4>)
 80046de:	4013      	ands	r3, r2
 80046e0:	610b      	str	r3, [r1, #16]
 80046e2:	e084      	b.n	80047ee <USB_EPStartXfer+0x1a2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	4619      	mov	r1, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	4b7a      	ldr	r3, [pc, #488]	; (80048f0 <USB_EPStartXfer+0x2a4>)
 8004706:	4013      	ands	r3, r2
 8004708:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	4619      	mov	r1, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	4b70      	ldr	r3, [pc, #448]	; (80048ec <USB_EPStartXfer+0x2a0>)
 800472c:	4013      	ands	r3, r2
 800472e:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	4618      	mov	r0, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	6959      	ldr	r1, [r3, #20]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	440b      	add	r3, r1
 800475a:	1e59      	subs	r1, r3, #1
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	fbb1 f3f3 	udiv	r3, r1, r3
 8004764:	04d9      	lsls	r1, r3, #19
 8004766:	4b63      	ldr	r3, [pc, #396]	; (80048f4 <USB_EPStartXfer+0x2a8>)
 8004768:	400b      	ands	r3, r1
 800476a:	4313      	orrs	r3, r2
 800476c:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477c:	4619      	mov	r1, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478c:	691a      	ldr	r2, [r3, #16]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004796:	4313      	orrs	r3, r2
 8004798:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	78db      	ldrb	r3, [r3, #3]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d125      	bne.n	80047ee <USB_EPStartXfer+0x1a2>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b0:	4619      	mov	r1, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047c6:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	4619      	mov	r1, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047ec:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1)
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d10b      	bne.n	800480c <USB_EPStartXfer+0x1c0>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	461a      	mov	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	6153      	str	r3, [r2, #20]
 800480a:	e016      	b.n	800483a <USB_EPStartXfer+0x1ee>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	78db      	ldrb	r3, [r3, #3]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d012      	beq.n	800483a <USB_EPStartXfer+0x1ee>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00e      	beq.n	800483a <USB_EPStartXfer+0x1ee>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004822:	4619      	mov	r1, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	7812      	ldrb	r2, [r2, #0]
 8004830:	4610      	mov	r0, r2
 8004832:	2201      	movs	r2, #1
 8004834:	4082      	lsls	r2, r0
 8004836:	4313      	orrs	r3, r2
 8004838:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	78db      	ldrb	r3, [r3, #3]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d12e      	bne.n	80048a0 <USB_EPStartXfer+0x254>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d113      	bne.n	800487a <USB_EPStartXfer+0x22e>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004860:	4619      	mov	r1, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004876:	600b      	str	r3, [r1, #0]
 8004878:	e012      	b.n	80048a0 <USB_EPStartXfer+0x254>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	4619      	mov	r1, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489e:	600b      	str	r3, [r1, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	4619      	mov	r1, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048c4:	600b      	str	r3, [r1, #0]

    if (ep->type == EP_TYPE_ISOC)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	78db      	ldrb	r3, [r3, #3]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	f040 80f7 	bne.w	8004abe <USB_EPStartXfer+0x472>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	68d9      	ldr	r1, [r3, #12]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	b298      	uxth	r0, r3
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	4603      	mov	r3, r0
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fa51 	bl	8004d8c <USB_WritePacket>
 80048ea:	e0e8      	b.n	8004abe <USB_EPStartXfer+0x472>
 80048ec:	e007ffff 	.word	0xe007ffff
 80048f0:	fff80000 	.word	0xfff80000
 80048f4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	4619      	mov	r1, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	4b6b      	ldr	r3, [pc, #428]	; (8004ac8 <USB_EPStartXfer+0x47c>)
 800491a:	4013      	ands	r3, r2
 800491c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	4619      	mov	r1, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493c:	691a      	ldr	r2, [r3, #16]
 800493e:	4b63      	ldr	r3, [pc, #396]	; (8004acc <USB_EPStartXfer+0x480>)
 8004940:	4013      	ands	r3, r2
 8004942:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d129      	bne.n	80049a0 <USB_EPStartXfer+0x354>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	4619      	mov	r1, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004974:	4313      	orrs	r3, r2
 8004976:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	4619      	mov	r1, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800499c:	610b      	str	r3, [r1, #16]
 800499e:	e03a      	b.n	8004a16 <USB_EPStartXfer+0x3ca>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	695a      	ldr	r2, [r3, #20]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4413      	add	r3, r2
 80049aa:	1e5a      	subs	r2, r3, #1
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c4:	4619      	mov	r1, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	8afb      	ldrh	r3, [r7, #22]
 80049d8:	04db      	lsls	r3, r3, #19
 80049da:	4618      	mov	r0, r3
 80049dc:	4b3c      	ldr	r3, [pc, #240]	; (8004ad0 <USB_EPStartXfer+0x484>)
 80049de:	4003      	ands	r3, r0
 80049e0:	4313      	orrs	r3, r2
 80049e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	4618      	mov	r0, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	8af9      	ldrh	r1, [r7, #22]
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a12:	4313      	orrs	r3, r2
 8004a14:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1)
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10a      	bne.n	8004a32 <USB_EPStartXfer+0x3e6>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	6153      	str	r3, [r2, #20]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	78db      	ldrb	r3, [r3, #3]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d12e      	bne.n	8004a98 <USB_EPStartXfer+0x44c>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d113      	bne.n	8004a72 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	4619      	mov	r1, r3
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a6e:	600b      	str	r3, [r1, #0]
 8004a70:	e012      	b.n	8004a98 <USB_EPStartXfer+0x44c>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	4619      	mov	r1, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a96:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004abc:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	fff80000 	.word	0xfff80000
 8004acc:	e007ffff 	.word	0xe007ffff
 8004ad0:	1ff80000 	.word	0x1ff80000

08004ad4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	f040 80cd 	bne.w	8004c86 <USB_EP0StartXfer+0x1b2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d139      	bne.n	8004b68 <USB_EP0StartXfer+0x94>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b02:	4619      	mov	r1, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	4b9b      	ldr	r3, [pc, #620]	; (8004d84 <USB_EP0StartXfer+0x2b0>)
 8004b16:	4013      	ands	r3, r2
 8004b18:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	4619      	mov	r1, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b3e:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	4b89      	ldr	r3, [pc, #548]	; (8004d88 <USB_EP0StartXfer+0x2b4>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	610b      	str	r3, [r1, #16]
 8004b66:	e058      	b.n	8004c1a <USB_EP0StartXfer+0x146>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b76:	4619      	mov	r1, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	4b7f      	ldr	r3, [pc, #508]	; (8004d88 <USB_EP0StartXfer+0x2b4>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	4b75      	ldr	r3, [pc, #468]	; (8004d84 <USB_EP0StartXfer+0x2b0>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	610b      	str	r3, [r1, #16]

      if(ep->xfer_len > ep->maxpacket)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d903      	bls.n	8004bc8 <USB_EP0StartXfer+0xf4>
      {
        ep->xfer_len = ep->maxpacket;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bec:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c16:	4313      	orrs	r3, r2
 8004c18:	610b      	str	r3, [r1, #16]

    }

    if (dma == 1)
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10b      	bne.n	8004c38 <USB_EP0StartXfer+0x164>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	6153      	str	r3, [r2, #20]
 8004c36:	e012      	b.n	8004c5e <USB_EP0StartXfer+0x18a>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00e      	beq.n	8004c5e <USB_EP0StartXfer+0x18a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c46:	4619      	mov	r1, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	2301      	movs	r3, #1
 8004c58:	4083      	lsls	r3, r0
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c82:	600b      	str	r3, [r1, #0]
 8004c84:	e077      	b.n	8004d76 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c94:	4619      	mov	r1, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	4b38      	ldr	r3, [pc, #224]	; (8004d88 <USB_EP0StartXfer+0x2b4>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	4619      	mov	r1, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	4b2d      	ldr	r3, [pc, #180]	; (8004d84 <USB_EP0StartXfer+0x2b0>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <USB_EP0StartXfer+0x20e>
    {
      ep->xfer_len = ep->maxpacket;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d06:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d16:	4619      	mov	r1, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d30:	4313      	orrs	r3, r2
 8004d32:	610b      	str	r3, [r1, #16]


    if (dma == 1)
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d10a      	bne.n	8004d50 <USB_EP0StartXfer+0x27c>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	6153      	str	r3, [r2, #20]
    }

    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5e:	4619      	mov	r1, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d74:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	e007ffff 	.word	0xe007ffff
 8004d88:	fff80000 	.word	0xfff80000

08004d8c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	4611      	mov	r1, r2
 8004d98:	461a      	mov	r2, r3
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	71fb      	strb	r3, [r7, #7]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b= 0 , i= 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]

  if (dma == 0)
 8004daa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d11d      	bne.n	8004dee <USB_WritePacket+0x62>
  {
    count32b =  (len + 3) / 4;
 8004db2:	88bb      	ldrh	r3, [r7, #4]
 8004db4:	3303      	adds	r3, #3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da00      	bge.n	8004dbc <USB_WritePacket+0x30>
 8004dba:	3303      	adds	r3, #3
 8004dbc:	109b      	asrs	r3, r3, #2
 8004dbe:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src += 4)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	e00f      	b.n	8004de6 <USB_WritePacket+0x5a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004dc6:	79fb      	ldrb	r3, [r7, #7]
 8004dc8:	031a      	lsls	r2, r3, #12
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6013      	str	r3, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	3304      	adds	r3, #4
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d3eb      	bcc.n	8004dc6 <USB_WritePacket+0x3a>
    }
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	4613      	mov	r3, r2
 8004e08:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	3303      	adds	r3, #3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	da00      	bge.n	8004e18 <USB_ReadPacket+0x1c>
 8004e16:	3303      	adds	r3, #3
 8004e18:	109b      	asrs	r3, r3, #2
 8004e1a:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e00b      	b.n	8004e3a <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	3301      	adds	r3, #1
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	3304      	adds	r3, #4
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d3ef      	bcc.n	8004e22 <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 8004e42:	68bb      	ldr	r3, [r7, #8]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d130      	bne.n	8004ec4 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	db12      	blt.n	8004e9c <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	4619      	mov	r1, r3
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e9a:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	4619      	mov	r1, r3
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ec0:	600b      	str	r3, [r1, #0]
 8004ec2:	e02f      	b.n	8004f24 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	db12      	blt.n	8004efe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004efc:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f22:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d12e      	bne.n	8004fa2 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f52:	4619      	mov	r1, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f68:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	78db      	ldrb	r3, [r3, #3]
 8004f6e:	2b03      	cmp	r3, #3
 8004f70:	d003      	beq.n	8004f7a <USB_EPClearStall+0x48>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	78db      	ldrb	r3, [r3, #3]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d141      	bne.n	8004ffe <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f88:	4619      	mov	r1, r3
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	600b      	str	r3, [r1, #0]
 8004fa0:	e02d      	b.n	8004ffe <USB_EPClearStall+0xcc>
    }
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fc6:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	78db      	ldrb	r3, [r3, #3]
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d003      	beq.n	8004fd8 <USB_EPClearStall+0xa6>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	78db      	ldrb	r3, [r3, #3]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d112      	bne.n	8004ffe <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501e:	461a      	mov	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800502c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005034:	4619      	mov	r1, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005046:	4313      	orrs	r3, r2
 8005048:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005066:	461a      	mov	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f023 0302 	bic.w	r3, r3, #2
 8005074:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 8005076:	2003      	movs	r0, #3
 8005078:	f7fb fac4 	bl	8000604 <HAL_Delay>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f043 0302 	orr.w	r3, r3, #2
 80050a2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 80050a4:	2003      	movs	r0, #3
 80050a6:	f7fb faad 	bl	8000604 <HAL_Delay>

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4013      	ands	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  return v;
 80050d0:	68fb      	ldr	r3, [r7, #12]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4013      	ands	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	0c1b      	lsrs	r3, r3, #16
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4013      	ands	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFF));
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	b29b      	uxth	r3, r3
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	460b      	mov	r3, r1
 8005148:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4013      	ands	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  return v;
 8005168:	68fb      	ldr	r3, [r7, #12]
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8005176:	b480      	push	{r7}
 8005178:	b087      	sub	sp, #28
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	460b      	mov	r3, r1
 8005180:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005194:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	fa22 f303 	lsr.w	r3, r2, r3
 800519e:	01db      	lsls	r3, r3, #7
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	4013      	ands	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  return v;
 80051bc:	68fb      	ldr	r3, [r7, #12]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0301 	and.w	r3, r3, #1
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f6:	4619      	mov	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4b13      	ldr	r3, [pc, #76]	; (8005250 <USB_ActivateSetup+0x68>)
 8005202:	4013      	ands	r3, r2
 8005204:	600b      	str	r3, [r1, #0]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0306 	and.w	r3, r3, #6
 8005212:	2b04      	cmp	r3, #4
 8005214:	d10a      	bne.n	800522c <USB_ActivateSetup+0x44>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521c:	461a      	mov	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f043 0303 	orr.w	r3, r3, #3
 800522a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	461a      	mov	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	fffff800 	.word	0xfffff800

08005254 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	460b      	mov	r3, r1
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	461a      	mov	r2, r3
 800526a:	2300      	movs	r3, #0
 800526c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	461a      	mov	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005282:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528a:	461a      	mov	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	f043 0318 	orr.w	r3, r3, #24
 8005298:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a0:	461a      	mov	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052ae:	6113      	str	r3, [r2, #16]

  if (dma == 1)
 80052b0:	7afb      	ldrb	r3, [r7, #11]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d10c      	bne.n	80052d0 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	461a      	mov	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c8:	461a      	mov	r2, r3
 80052ca:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80052ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4a13      	ldr	r2, [pc, #76]	; (8005344 <USB_CoreReset+0x64>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e01b      	b.n	8005336 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	daf2      	bge.n	80052ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f043 0201 	orr.w	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3301      	adds	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <USB_CoreReset+0x64>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e006      	b.n	8005336 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d0f0      	beq.n	8005316 <USB_CoreReset+0x36>

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	00030d40 	.word	0x00030d40

08005348 <USBD_UVC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_UVC_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	73fb      	strb	r3, [r7, #15]
  USBD_UVC_HandleTypeDef   *hUVC;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	7c1b      	ldrb	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10e      	bne.n	800537e <USBD_UVC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005364:	2202      	movs	r2, #2
 8005366:	2181      	movs	r1, #129	; 0x81
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f001 fccf 	bl	8006d0c <USBD_LL_OpenEP>
                   UVC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   UVC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800536e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005372:	2202      	movs	r2, #2
 8005374:	2101      	movs	r1, #1
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f001 fcc8 	bl	8006d0c <USBD_LL_OpenEP>
 800537c:	e00b      	b.n	8005396 <USBD_UVC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800537e:	2340      	movs	r3, #64	; 0x40
 8005380:	2202      	movs	r2, #2
 8005382:	2181      	movs	r1, #129	; 0x81
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fcc1 	bl	8006d0c <USBD_LL_OpenEP>
                   UVC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   UVC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800538a:	2340      	movs	r3, #64	; 0x40
 800538c:	2202      	movs	r2, #2
 800538e:	2101      	movs	r1, #1
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f001 fcbb 	bl	8006d0c <USBD_LL_OpenEP>
                   UVC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   UVC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8005396:	2308      	movs	r3, #8
 8005398:	2203      	movs	r2, #3
 800539a:	2182      	movs	r1, #130	; 0x82
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f001 fcb5 	bl	8006d0c <USBD_LL_OpenEP>
                 UVC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 UVC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_UVC_HandleTypeDef));
 80053a2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80053a6:	f002 f807 	bl	80073b8 <malloc>
 80053aa:	4603      	mov	r3, r0
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <USBD_UVC_Init+0x7c>
  {
    ret = 1; 
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
 80053c2:	e026      	b.n	8005412 <USBD_UVC_Init+0xca>
  }
  else
  {
    hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80053ca:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Init();
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4798      	blx	r3
    
    /* Init Xfer states */
    hUVC->TxState =0;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2200      	movs	r2, #0
 80053da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hUVC->RxState =0;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	7c1b      	ldrb	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <USBD_UVC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f8:	2101      	movs	r1, #1
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fe02 	bl	8007004 <USBD_LL_PrepareReceive>
 8005400:	e007      	b.n	8005412 <USBD_UVC_Init+0xca>
                             UVC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005408:	2340      	movs	r3, #64	; 0x40
 800540a:	2101      	movs	r1, #1
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f001 fdf9 	bl	8007004 <USBD_LL_PrepareReceive>
                             UVC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <USBD_UVC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_UVC_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800542c:	2181      	movs	r1, #129	; 0x81
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f001 fcaa 	bl	8006d88 <USBD_LL_CloseEP>
              UVC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8005434:	2101      	movs	r1, #1
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f001 fca6 	bl	8006d88 <USBD_LL_CloseEP>
              UVC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800543c:	2182      	movs	r1, #130	; 0x82
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f001 fca2 	bl	8006d88 <USBD_LL_CloseEP>
              UVC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <USBD_UVC_DeInit+0x50>
  {
    ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800545e:	4618      	mov	r0, r3
 8005460:	f001 ffb2 	bl	80073c8 <free>
    pdev->pClassData = NULL;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <USBD_UVC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_UVC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005488:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005492:	2b00      	cmp	r3, #0
 8005494:	d03a      	beq.n	800550c <USBD_UVC_Setup+0x94>
 8005496:	2b20      	cmp	r3, #32
 8005498:	d000      	beq.n	800549c <USBD_UVC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800549a:	e043      	b.n	8005524 <USBD_UVC_Setup+0xac>
    if (req->wLength)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	88db      	ldrh	r3, [r3, #6]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d029      	beq.n	80054f8 <USBD_UVC_Setup+0x80>
      if (req->bmRequest & 0x80)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	b25b      	sxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	da11      	bge.n	80054d2 <USBD_UVC_Setup+0x5a>
        ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hUVC->data,
 80054ba:	68f9      	ldr	r1, [r7, #12]
        ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	88d2      	ldrh	r2, [r2, #6]
 80054c0:	4798      	blx	r3
                            (uint8_t *)hUVC->data,
 80054c2:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	88db      	ldrh	r3, [r3, #6]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f001 f82c 	bl	8006528 <USBD_CtlSendData>
    break;
 80054d0:	e029      	b.n	8005526 <USBD_UVC_Setup+0xae>
        hUVC->CmdOpCode = req->bRequest;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	785a      	ldrb	r2, [r3, #1]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hUVC->CmdLength = req->wLength;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	88db      	ldrh	r3, [r3, #6]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hUVC->data,
 80054e8:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	88db      	ldrh	r3, [r3, #6]
 80054ee:	461a      	mov	r2, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 f847 	bl	8006584 <USBD_CtlPrepareRx>
    break;
 80054f6:	e016      	b.n	8005526 <USBD_UVC_Setup+0xae>
      ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	7850      	ldrb	r0, [r2, #1]
 8005504:	2200      	movs	r2, #0
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	4798      	blx	r3
    break;
 800550a:	e00c      	b.n	8005526 <USBD_UVC_Setup+0xae>
    switch (req->bRequest)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	785b      	ldrb	r3, [r3, #1]
 8005510:	2b0a      	cmp	r3, #10
 8005512:	d001      	beq.n	8005518 <USBD_UVC_Setup+0xa0>
 8005514:	2b0b      	cmp	r3, #11
      break;
 8005516:	e005      	b.n	8005524 <USBD_UVC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8005518:	2201      	movs	r2, #1
 800551a:	4905      	ldr	r1, [pc, #20]	; (8005530 <USBD_UVC_Setup+0xb8>)
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f001 f803 	bl	8006528 <USBD_CtlSendData>
      break;
 8005522:	bf00      	nop
    break;
 8005524:	bf00      	nop
  }
  return USBD_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	200001e0 	.word	0x200001e0

08005534 <USBD_UVC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_UVC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005546:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800554e:	2b00      	cmp	r3, #0
 8005550:	d005      	beq.n	800555e <USBD_UVC_DataIn+0x2a>
  {
    
    hUVC->TxState = 0;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e000      	b.n	8005560 <USBD_UVC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800555e:	2302      	movs	r3, #2
  }
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USBD_UVC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_UVC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800557e:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hUVC->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f001 fd77 	bl	8007078 <USBD_LL_GetRxDataSize>
 800558a:	4602      	mov	r2, r0
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00d      	beq.n	80055b8 <USBD_UVC_DataOut+0x4c>
  {
    ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Receive(hUVC->RxBuffer, &hUVC->RxLength);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80055b0:	4611      	mov	r1, r2
 80055b2:	4798      	blx	r3

    return USBD_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	e000      	b.n	80055ba <USBD_UVC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80055b8:	2302      	movs	r3, #2
  }
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <USBD_UVC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_UVC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055d0:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hUVC->CmdOpCode != 0xFF))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d015      	beq.n	8005608 <USBD_UVC_EP0_RxReady+0x46>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80055e2:	2bff      	cmp	r3, #255	; 0xff
 80055e4:	d010      	beq.n	8005608 <USBD_UVC_EP0_RxReady+0x46>
  {
    ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Control(hUVC->CmdOpCode,
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hUVC->data,
 80055f4:	68f9      	ldr	r1, [r7, #12]
                                                      hUVC->CmdLength);
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Control(hUVC->CmdOpCode,
 80055fc:	b292      	uxth	r2, r2
 80055fe:	4798      	blx	r3
      hUVC->CmdOpCode = 0xFF;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	22ff      	movs	r2, #255	; 0xff
 8005604:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <USBD_UVC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_UVC_GetFSCfgDesc (uint16_t *length)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_UVC_CfgFSDesc);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2243      	movs	r2, #67	; 0x43
 8005620:	801a      	strh	r2, [r3, #0]
  return USBD_UVC_CfgFSDesc;
 8005622:	4b03      	ldr	r3, [pc, #12]	; (8005630 <USBD_UVC_GetFSCfgDesc+0x1c>)
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	20000090 	.word	0x20000090

08005634 <USBD_UVC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_UVC_GetHSCfgDesc (uint16_t *length)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_UVC_CfgHSDesc);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2243      	movs	r2, #67	; 0x43
 8005640:	801a      	strh	r2, [r3, #0]
  return USBD_UVC_CfgHSDesc;
 8005642:	4b03      	ldr	r3, [pc, #12]	; (8005650 <USBD_UVC_GetHSCfgDesc+0x1c>)
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	2000004c 	.word	0x2000004c

08005654 <USBD_UVC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_UVC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_UVC_OtherSpeedCfgDesc);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2243      	movs	r2, #67	; 0x43
 8005660:	801a      	strh	r2, [r3, #0]
  return USBD_UVC_OtherSpeedCfgDesc;
 8005662:	4b03      	ldr	r3, [pc, #12]	; (8005670 <USBD_UVC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	200000d4 	.word	0x200000d4

08005674 <USBD_UVC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_UVC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_UVC_DeviceQualifierDesc);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	220a      	movs	r2, #10
 8005680:	801a      	strh	r2, [r3, #0]
  return USBD_UVC_DeviceQualifierDesc;
 8005682:	4b03      	ldr	r3, [pc, #12]	; (8005690 <USBD_UVC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	20000008 	.word	0x20000008

08005694 <USBD_UVC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_UVC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_UVC_ItfTypeDef *fops)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800569e:	2302      	movs	r3, #2
 80056a0:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <USBD_UVC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 80056b0:	2300      	movs	r3, #0
 80056b2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <USBD_UVC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_UVC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b087      	sub	sp, #28
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	4613      	mov	r3, r2
 80056ce:	80fb      	strh	r3, [r7, #6]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056d6:	617b      	str	r3, [r7, #20]
  
  hUVC->TxBuffer = pbuff;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hUVC->TxLength = length;
 80056e0:	88fa      	ldrh	r2, [r7, #6]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <USBD_UVC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_UVC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005706:	60fb      	str	r3, [r7, #12]
  
  hUVC->RxBuffer = pbuff;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <USBD_UVC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_UVC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800572c:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005734:	2b00      	cmp	r3, #0
 8005736:	d017      	beq.n	8005768 <USBD_UVC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	7c1b      	ldrb	r3, [r3, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <USBD_UVC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005746:	f44f 7300 	mov.w	r3, #512	; 0x200
 800574a:	2101      	movs	r1, #1
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f001 fc59 	bl	8007004 <USBD_LL_PrepareReceive>
 8005752:	e007      	b.n	8005764 <USBD_UVC_ReceivePacket+0x46>
                             UVC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800575a:	2340      	movs	r3, #64	; 0x40
 800575c:	2101      	movs	r1, #1
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f001 fc50 	bl	8007004 <USBD_LL_PrepareReceive>
                             UVC_OUT_EP,
                             hUVC->RxBuffer,
                             UVC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	e000      	b.n	800576a <USBD_UVC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005768:	2302      	movs	r3, #2
  }
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	4613      	mov	r3, r2
 800577e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8005786:	2302      	movs	r3, #2
 8005788:	e01a      	b.n	80057c0 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	79fa      	ldrb	r2, [r7, #7]
 80057b6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f001 fa21 	bl	8006c00 <USBD_LL_Init>
  
  return USBD_OK; 
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d006      	beq.n	80057ea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	73fb      	strb	r3, [r7, #15]
 80057e8:	e001      	b.n	80057ee <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80057ea:	2302      	movs	r3, #2
 80057ec:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 fa4f 	bl	8006ca8 <USBD_LL_Start>
  
  return USBD_OK;  
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	460b      	mov	r3, r1
 8005834:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8005836:	2302      	movs	r3, #2
 8005838:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00c      	beq.n	800585e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	78fa      	ldrb	r2, [r7, #3]
 800584e:	4611      	mov	r1, r2
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	4798      	blx	r3
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 800585e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	4611      	mov	r1, r2
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	4798      	blx	r3
  return USBD_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fd98 	bl	80063d6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80058b4:	461a      	mov	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d00b      	beq.n	80058e2 <USBD_LL_SetupStage+0x54>
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d011      	beq.n	80058f2 <USBD_LL_SetupStage+0x64>
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d117      	bne.n	8005902 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058d8:	4619      	mov	r1, r3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f9c6 	bl	8005c6c <USBD_StdDevReq>
    break;
 80058e0:	e01a      	b.n	8005918 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 fa0e 	bl	8005d0c <USBD_StdItfReq>
    break;
 80058f0:	e012      	b.n	8005918 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa39 	bl	8005d72 <USBD_StdEPReq>
    break;
 8005900:	e00a      	b.n	8005918 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005908:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800590c:	b2db      	uxtb	r3, r3
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 fa6f 	bl	8006df4 <USBD_LL_StallEP>
    break;
 8005916:	bf00      	nop
  }  
  return USBD_OK;  
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b086      	sub	sp, #24
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	460b      	mov	r3, r1
 800592c:	607a      	str	r2, [r7, #4]
 800592e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8005930:	7afb      	ldrb	r3, [r7, #11]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d138      	bne.n	80059a8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800593c:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8005944:	2b03      	cmp	r3, #3
 8005946:	d142      	bne.n	80059ce <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	429a      	cmp	r2, r3
 8005952:	d914      	bls.n	800597e <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	1ad2      	subs	r2, r2, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	4293      	cmp	r3, r2
 800596c:	bf28      	it	cs
 800596e:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8005970:	b29b      	uxth	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fe22 	bl	80065c0 <USBD_CtlContinueRx>
 800597c:	e027      	b.n	80059ce <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005990:	2b03      	cmp	r3, #3
 8005992:	d105      	bne.n	80059a0 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fe1f 	bl	80065e4 <USBD_CtlSendStatus>
 80059a6:	e012      	b.n	80059ce <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00c      	beq.n	80059ce <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d107      	bne.n	80059ce <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	7afa      	ldrb	r2, [r7, #11]
 80059c8:	4611      	mov	r1, r2
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	4798      	blx	r3
  }  
  return USBD_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	460b      	mov	r3, r1
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80059e6:	7afb      	ldrb	r3, [r7, #11]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d16c      	bne.n	8005ac6 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	3314      	adds	r3, #20
 80059f0:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d157      	bne.n	8005aac <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d915      	bls.n	8005a34 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	1ad2      	subs	r2, r2, r3
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 fd9d 	bl	8006560 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005a26:	2300      	movs	r3, #0
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f001 fae9 	bl	8007004 <USBD_LL_PrepareReceive>
 8005a32:	e03b      	b.n	8005aac <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	68d2      	ldr	r2, [r2, #12]
 8005a3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a40:	fb02 f201 	mul.w	r2, r2, r1
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d11c      	bne.n	8005a84 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d316      	bcc.n	8005a84 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d20f      	bcs.n	8005a84 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005a64:	2200      	movs	r2, #0
 8005a66:	2100      	movs	r1, #0
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fd79 	bl	8006560 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005a76:	2300      	movs	r3, #0
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f001 fac1 	bl	8007004 <USBD_LL_PrepareReceive>
 8005a82:	e013      	b.n	8005aac <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00a      	beq.n	8005aa6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d105      	bne.n	8005aa6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 fdaf 	bl	800660a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d11a      	bne.n	8005aec <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff feac 	bl	8005814 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8005ac4:	e012      	b.n	8005aec <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d107      	bne.n	8005aec <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	7afa      	ldrb	r2, [r7, #11]
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	4798      	blx	r3
  }  
  return USBD_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005afe:	2340      	movs	r3, #64	; 0x40
 8005b00:	2200      	movs	r2, #0
 8005b02:	2100      	movs	r1, #0
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 f901 	bl	8006d0c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2240      	movs	r2, #64	; 0x40
 8005b0e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005b12:	2340      	movs	r3, #64	; 0x40
 8005b14:	2200      	movs	r2, #0
 8005b16:	2180      	movs	r1, #128	; 0x80
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 f8f7 	bl	8006d0c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2240      	movs	r2, #64	; 0x40
 8005b22:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d009      	beq.n	8005b4a <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6852      	ldr	r2, [r2, #4]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	4611      	mov	r1, r2
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	4798      	blx	r3
 
  
  return USBD_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d10b      	bne.n	8005bea <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6852      	ldr	r2, [r2, #4]
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
   
  return USBD_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8005c76:	2300      	movs	r3, #0
 8005c78:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	785b      	ldrb	r3, [r3, #1]
 8005c7e:	2b09      	cmp	r3, #9
 8005c80:	d839      	bhi.n	8005cf6 <USBD_StdDevReq+0x8a>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <USBD_StdDevReq+0x1c>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005cd9 	.word	0x08005cd9
 8005c8c:	08005ced 	.word	0x08005ced
 8005c90:	08005cf7 	.word	0x08005cf7
 8005c94:	08005ce3 	.word	0x08005ce3
 8005c98:	08005cf7 	.word	0x08005cf7
 8005c9c:	08005cbb 	.word	0x08005cbb
 8005ca0:	08005cb1 	.word	0x08005cb1
 8005ca4:	08005cf7 	.word	0x08005cf7
 8005ca8:	08005ccf 	.word	0x08005ccf
 8005cac:	08005cc5 	.word	0x08005cc5
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f936 	bl	8005f24 <USBD_GetDescriptor>
    break;
 8005cb8:	e022      	b.n	8005d00 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fa25 	bl	800610c <USBD_SetAddress>
    break;
 8005cc2:	e01d      	b.n	8005d00 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fa5e 	bl	8006188 <USBD_SetConfig>
    break;
 8005ccc:	e018      	b.n	8005d00 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fae1 	bl	8006298 <USBD_GetConfig>
    break;
 8005cd6:	e013      	b.n	8005d00 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fb0e 	bl	80062fc <USBD_GetStatus>
    break;
 8005ce0:	e00e      	b.n	8005d00 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fb33 	bl	8006350 <USBD_SetFeature>
    break;
 8005cea:	e009      	b.n	8005d00 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fb49 	bl	8006386 <USBD_ClrFeature>
    break;
 8005cf4:	e004      	b.n	8005d00 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fba9 	bl	8006450 <USBD_CtlError>
    break;
 8005cfe:	bf00      	nop
  }
  
  return ret;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop

08005d0c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d11b      	bne.n	8005d5c <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	889b      	ldrh	r3, [r3, #4]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d811      	bhi.n	8005d52 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	88db      	ldrh	r3, [r3, #6]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d110      	bne.n	8005d66 <USBD_StdItfReq+0x5a>
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10d      	bne.n	8005d66 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fc4a 	bl	80065e4 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8005d50:	e009      	b.n	8005d66 <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fb7b 	bl	8006450 <USBD_CtlError>
    break;
 8005d5a:	e004      	b.n	8005d66 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fb76 	bl	8006450 <USBD_CtlError>
    break;
 8005d64:	e000      	b.n	8005d68 <USBD_StdItfReq+0x5c>
    break;
 8005d66:	bf00      	nop
  }
  return USBD_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	889b      	ldrh	r3, [r3, #4]
 8005d84:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d108      	bne.n	8005da4 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	4798      	blx	r3
    
    return USBD_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e0ba      	b.n	8005f1a <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d039      	beq.n	8005e20 <USBD_StdEPReq+0xae>
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d002      	beq.n	8005db6 <USBD_StdEPReq+0x44>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d06b      	beq.n	8005e8c <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8005db4:	e0b0      	b.n	8005f18 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d002      	beq.n	8005dc6 <USBD_StdEPReq+0x54>
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d00c      	beq.n	8005dde <USBD_StdEPReq+0x6c>
 8005dc4:	e025      	b.n	8005e12 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005dc6:	7bbb      	ldrb	r3, [r7, #14]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d027      	beq.n	8005e1c <USBD_StdEPReq+0xaa>
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	2b80      	cmp	r3, #128	; 0x80
 8005dd0:	d024      	beq.n	8005e1c <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 f80c 	bl	8006df4 <USBD_LL_StallEP>
      break;	
 8005ddc:	e01e      	b.n	8005e1c <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	885b      	ldrh	r3, [r3, #2]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10a      	bne.n	8005dfc <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005de6:	7bbb      	ldrb	r3, [r7, #14]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <USBD_StdEPReq+0x8a>
 8005dec:	7bbb      	ldrb	r3, [r7, #14]
 8005dee:	2b80      	cmp	r3, #128	; 0x80
 8005df0:	d004      	beq.n	8005dfc <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	4619      	mov	r1, r3
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fffc 	bl	8006df4 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fbea 	bl	80065e4 <USBD_CtlSendStatus>
      break;
 8005e10:	e005      	b.n	8005e1e <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fb1b 	bl	8006450 <USBD_CtlError>
      break;    
 8005e1a:	e000      	b.n	8005e1e <USBD_StdEPReq+0xac>
      break;	
 8005e1c:	bf00      	nop
    break;
 8005e1e:	e07b      	b.n	8005f18 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d002      	beq.n	8005e30 <USBD_StdEPReq+0xbe>
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d00c      	beq.n	8005e48 <USBD_StdEPReq+0xd6>
 8005e2e:	e024      	b.n	8005e7a <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d026      	beq.n	8005e84 <USBD_StdEPReq+0x112>
 8005e36:	7bbb      	ldrb	r3, [r7, #14]
 8005e38:	2b80      	cmp	r3, #128	; 0x80
 8005e3a:	d023      	beq.n	8005e84 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8005e3c:	7bbb      	ldrb	r3, [r7, #14]
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 ffd7 	bl	8006df4 <USBD_LL_StallEP>
      break;	
 8005e46:	e01d      	b.n	8005e84 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	885b      	ldrh	r3, [r3, #2]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d11b      	bne.n	8005e88 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8005e5a:	7bbb      	ldrb	r3, [r7, #14]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fffe 	bl	8006e60 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fbb6 	bl	80065e4 <USBD_CtlSendStatus>
      break;
 8005e78:	e006      	b.n	8005e88 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8005e7a:	6839      	ldr	r1, [r7, #0]
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fae7 	bl	8006450 <USBD_CtlError>
      break;    
 8005e82:	e002      	b.n	8005e8a <USBD_StdEPReq+0x118>
      break;	
 8005e84:	bf00      	nop
 8005e86:	e047      	b.n	8005f18 <USBD_StdEPReq+0x1a6>
      break;
 8005e88:	bf00      	nop
    break;
 8005e8a:	e045      	b.n	8005f18 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d002      	beq.n	8005e9c <USBD_StdEPReq+0x12a>
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d00b      	beq.n	8005eb2 <USBD_StdEPReq+0x140>
 8005e9a:	e036      	b.n	8005f0a <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d036      	beq.n	8005f14 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8005ea6:	7bbb      	ldrb	r3, [r7, #14]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 ffa2 	bl	8006df4 <USBD_LL_StallEP>
      break;	
 8005eb0:	e030      	b.n	8005f14 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005eb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	da08      	bge.n	8005ecc <USBD_StdEPReq+0x15a>
 8005eba:	7bbb      	ldrb	r3, [r7, #14]
 8005ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	3304      	adds	r3, #4
 8005eca:	e007      	b.n	8005edc <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005ed2:	3310      	adds	r3, #16
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4413      	add	r3, r2
 8005eda:	3304      	adds	r3, #4
 8005edc:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005ede:	7bbb      	ldrb	r3, [r7, #14]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fff2 	bl	8006ecc <USBD_LL_IsStallEP>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e002      	b.n	8005efc <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8005efc:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8005efe:	2202      	movs	r2, #2
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fb10 	bl	8006528 <USBD_CtlSendData>
      break;
 8005f08:	e005      	b.n	8005f16 <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fa9f 	bl	8006450 <USBD_CtlError>
      break;
 8005f12:	e000      	b.n	8005f16 <USBD_StdEPReq+0x1a4>
      break;	
 8005f14:	bf00      	nop
    break;
 8005f16:	bf00      	nop
  }
  return ret;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	885b      	ldrh	r3, [r3, #2]
 8005f32:	0a1b      	lsrs	r3, r3, #8
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	2b06      	cmp	r3, #6
 8005f3a:	f200 80c9 	bhi.w	80060d0 <USBD_GetDescriptor+0x1ac>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <USBD_GetDescriptor+0x20>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005f61 	.word	0x08005f61
 8005f48:	08005f79 	.word	0x08005f79
 8005f4c:	08005fb9 	.word	0x08005fb9
 8005f50:	080060d1 	.word	0x080060d1
 8005f54:	080060d1 	.word	0x080060d1
 8005f58:	0800607d 	.word	0x0800607d
 8005f5c:	080060a3 	.word	0x080060a3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	7c12      	ldrb	r2, [r2, #16]
 8005f6c:	f107 010a 	add.w	r1, r7, #10
 8005f70:	4610      	mov	r0, r2
 8005f72:	4798      	blx	r3
 8005f74:	60f8      	str	r0, [r7, #12]
    break;
 8005f76:	e0b0      	b.n	80060da <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	7c1b      	ldrb	r3, [r3, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10d      	bne.n	8005f9c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	f107 020a 	add.w	r2, r7, #10
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4798      	blx	r3
 8005f90:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3301      	adds	r3, #1
 8005f96:	2202      	movs	r2, #2
 8005f98:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005f9a:	e09e      	b.n	80060da <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	f107 020a 	add.w	r2, r7, #10
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4798      	blx	r3
 8005fac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	701a      	strb	r2, [r3, #0]
    break;
 8005fb6:	e090      	b.n	80060da <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	885b      	ldrh	r3, [r3, #2]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b05      	cmp	r3, #5
 8005fc0:	d856      	bhi.n	8006070 <USBD_GetDescriptor+0x14c>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <USBD_GetDescriptor+0xa4>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fe1 	.word	0x08005fe1
 8005fcc:	08005ff9 	.word	0x08005ff9
 8005fd0:	08006011 	.word	0x08006011
 8005fd4:	08006029 	.word	0x08006029
 8005fd8:	08006041 	.word	0x08006041
 8005fdc:	08006059 	.word	0x08006059
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	7c12      	ldrb	r2, [r2, #16]
 8005fec:	f107 010a 	add.w	r1, r7, #10
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4798      	blx	r3
 8005ff4:	60f8      	str	r0, [r7, #12]
      break;
 8005ff6:	e040      	b.n	800607a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	7c12      	ldrb	r2, [r2, #16]
 8006004:	f107 010a 	add.w	r1, r7, #10
 8006008:	4610      	mov	r0, r2
 800600a:	4798      	blx	r3
 800600c:	60f8      	str	r0, [r7, #12]
      break;
 800600e:	e034      	b.n	800607a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	7c12      	ldrb	r2, [r2, #16]
 800601c:	f107 010a 	add.w	r1, r7, #10
 8006020:	4610      	mov	r0, r2
 8006022:	4798      	blx	r3
 8006024:	60f8      	str	r0, [r7, #12]
      break;
 8006026:	e028      	b.n	800607a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	7c12      	ldrb	r2, [r2, #16]
 8006034:	f107 010a 	add.w	r1, r7, #10
 8006038:	4610      	mov	r0, r2
 800603a:	4798      	blx	r3
 800603c:	60f8      	str	r0, [r7, #12]
      break;
 800603e:	e01c      	b.n	800607a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	7c12      	ldrb	r2, [r2, #16]
 800604c:	f107 010a 	add.w	r1, r7, #10
 8006050:	4610      	mov	r0, r2
 8006052:	4798      	blx	r3
 8006054:	60f8      	str	r0, [r7, #12]
      break;
 8006056:	e010      	b.n	800607a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	7c12      	ldrb	r2, [r2, #16]
 8006064:	f107 010a 	add.w	r1, r7, #10
 8006068:	4610      	mov	r0, r2
 800606a:	4798      	blx	r3
 800606c:	60f8      	str	r0, [r7, #12]
      break;
 800606e:	e004      	b.n	800607a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f9ec 	bl	8006450 <USBD_CtlError>
      return;
 8006078:	e044      	b.n	8006104 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 800607a:	e02e      	b.n	80060da <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	7c1b      	ldrb	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800608a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608c:	f107 020a 	add.w	r2, r7, #10
 8006090:	4610      	mov	r0, r2
 8006092:	4798      	blx	r3
 8006094:	60f8      	str	r0, [r7, #12]
      break;
 8006096:	e020      	b.n	80060da <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f9d8 	bl	8006450 <USBD_CtlError>
      return;
 80060a0:	e030      	b.n	8006104 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7c1b      	ldrb	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10d      	bne.n	80060c6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	f107 020a 	add.w	r2, r7, #10
 80060b6:	4610      	mov	r0, r2
 80060b8:	4798      	blx	r3
 80060ba:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3301      	adds	r3, #1
 80060c0:	2207      	movs	r2, #7
 80060c2:	701a      	strb	r2, [r3, #0]
      break; 
 80060c4:	e009      	b.n	80060da <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f9c1 	bl	8006450 <USBD_CtlError>
      return;
 80060ce:	e019      	b.n	8006104 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f9bc 	bl	8006450 <USBD_CtlError>
    return;
 80060d8:	e014      	b.n	8006104 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80060da:	897b      	ldrh	r3, [r7, #10]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d011      	beq.n	8006104 <USBD_GetDescriptor+0x1e0>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	88db      	ldrh	r3, [r3, #6]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	88da      	ldrh	r2, [r3, #6]
 80060ec:	897b      	ldrh	r3, [r7, #10]
 80060ee:	4293      	cmp	r3, r2
 80060f0:	bf28      	it	cs
 80060f2:	4613      	movcs	r3, r2
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80060f8:	897b      	ldrh	r3, [r7, #10]
 80060fa:	461a      	mov	r2, r3
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fa12 	bl	8006528 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop

0800610c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	889b      	ldrh	r3, [r3, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d12c      	bne.n	8006178 <USBD_SetAddress+0x6c>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	88db      	ldrh	r3, [r3, #6]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d128      	bne.n	8006178 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	885b      	ldrh	r3, [r3, #2]
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006130:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006138:	2b03      	cmp	r3, #3
 800613a:	d104      	bne.n	8006146 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f986 	bl	8006450 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006144:	e01c      	b.n	8006180 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7bfa      	ldrb	r2, [r7, #15]
 800614a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fee6 	bl	8006f24 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fa43 	bl	80065e4 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800616c:	e008      	b.n	8006180 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006176:	e003      	b.n	8006180 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f968 	bl	8006450 <USBD_CtlError>
  } 
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	885b      	ldrh	r3, [r3, #2]
 8006196:	b2da      	uxtb	r2, r3
 8006198:	4b3e      	ldr	r3, [pc, #248]	; (8006294 <USBD_SetConfig+0x10c>)
 800619a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800619c:	4b3d      	ldr	r3, [pc, #244]	; (8006294 <USBD_SetConfig+0x10c>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d904      	bls.n	80061ae <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f952 	bl	8006450 <USBD_CtlError>
 80061ac:	e06f      	b.n	800628e <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d002      	beq.n	80061be <USBD_SetConfig+0x36>
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d023      	beq.n	8006204 <USBD_SetConfig+0x7c>
 80061bc:	e062      	b.n	8006284 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80061be:	4b35      	ldr	r3, [pc, #212]	; (8006294 <USBD_SetConfig+0x10c>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d01a      	beq.n	80061fc <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80061c6:	4b33      	ldr	r3, [pc, #204]	; (8006294 <USBD_SetConfig+0x10c>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2203      	movs	r2, #3
 80061d4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80061d8:	4b2e      	ldr	r3, [pc, #184]	; (8006294 <USBD_SetConfig+0x10c>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff fb23 	bl	800582a <USBD_SetClassConfig>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d104      	bne.n	80061f4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80061ea:	6839      	ldr	r1, [r7, #0]
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f92f 	bl	8006450 <USBD_CtlError>
          return;
 80061f2:	e04c      	b.n	800628e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f9f5 	bl	80065e4 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80061fa:	e048      	b.n	800628e <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f9f1 	bl	80065e4 <USBD_CtlSendStatus>
      break;
 8006202:	e044      	b.n	800628e <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8006204:	4b23      	ldr	r3, [pc, #140]	; (8006294 <USBD_SetConfig+0x10c>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d112      	bne.n	8006232 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8006214:	4b1f      	ldr	r3, [pc, #124]	; (8006294 <USBD_SetConfig+0x10c>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800621e:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <USBD_SetConfig+0x10c>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	4619      	mov	r1, r3
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fb1f 	bl	8005868 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f9da 	bl	80065e4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006230:	e02d      	b.n	800628e <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8006232:	4b18      	ldr	r3, [pc, #96]	; (8006294 <USBD_SetConfig+0x10c>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	429a      	cmp	r2, r3
 800623e:	d01d      	beq.n	800627c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff fb0d 	bl	8005868 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800624e:	4b11      	ldr	r3, [pc, #68]	; (8006294 <USBD_SetConfig+0x10c>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006258:	4b0e      	ldr	r3, [pc, #56]	; (8006294 <USBD_SetConfig+0x10c>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fae3 	bl	800582a <USBD_SetClassConfig>
 8006264:	4603      	mov	r3, r0
 8006266:	2b02      	cmp	r3, #2
 8006268:	d104      	bne.n	8006274 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f8ef 	bl	8006450 <USBD_CtlError>
          return;
 8006272:	e00c      	b.n	800628e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f9b5 	bl	80065e4 <USBD_CtlSendStatus>
      break;
 800627a:	e008      	b.n	800628e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f9b1 	bl	80065e4 <USBD_CtlSendStatus>
      break;
 8006282:	e004      	b.n	800628e <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f8e2 	bl	8006450 <USBD_CtlError>
      break;
 800628c:	bf00      	nop
    }
  }
}
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	200001e1 	.word	0x200001e1

08006298 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	88db      	ldrh	r3, [r3, #6]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d004      	beq.n	80062b4 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8cf 	bl	8006450 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80062b2:	e01f      	b.n	80062f4 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d002      	beq.n	80062c4 <USBD_GetConfig+0x2c>
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d00b      	beq.n	80062da <USBD_GetConfig+0x42>
 80062c2:	e012      	b.n	80062ea <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80062ce:	2201      	movs	r2, #1
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f928 	bl	8006528 <USBD_CtlSendData>
      break;
 80062d8:	e00c      	b.n	80062f4 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80062de:	2201      	movs	r2, #1
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f920 	bl	8006528 <USBD_CtlSendData>
      break;
 80062e8:	e004      	b.n	80062f4 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f8af 	bl	8006450 <USBD_CtlError>
      break;
 80062f2:	bf00      	nop
}
 80062f4:	bf00      	nop
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800630c:	3b02      	subs	r3, #2
 800630e:	2b01      	cmp	r3, #1
 8006310:	d815      	bhi.n	800633e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f043 0202 	orr.w	r2, r3, #2
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8006332:	2202      	movs	r2, #2
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f8f6 	bl	8006528 <USBD_CtlSendData>
                      2);
    break;
 800633c:	e004      	b.n	8006348 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f885 	bl	8006450 <USBD_CtlError>
    break;
 8006346:	bf00      	nop
  }
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	885b      	ldrh	r3, [r3, #2]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d10d      	bne.n	800637e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f933 	bl	80065e4 <USBD_CtlSendStatus>
  }

}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006396:	3b02      	subs	r3, #2
 8006398:	2b01      	cmp	r3, #1
 800639a:	d812      	bhi.n	80063c2 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	885b      	ldrh	r3, [r3, #2]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d113      	bne.n	80063cc <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f912 	bl	80065e4 <USBD_CtlSendStatus>
    }
    break;
 80063c0:	e004      	b.n	80063cc <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f843 	bl	8006450 <USBD_CtlError>
    break;
 80063ca:	e000      	b.n	80063ce <USBD_ClrFeature+0x48>
    break;
 80063cc:	bf00      	nop
  }
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781a      	ldrb	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	785a      	ldrb	r2, [r3, #1]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	3302      	adds	r3, #2
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	3303      	adds	r3, #3
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	b29b      	uxth	r3, r3
 8006404:	4413      	add	r3, r2
 8006406:	b29a      	uxth	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	3304      	adds	r3, #4
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	b29a      	uxth	r2, r3
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	3305      	adds	r3, #5
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	b29b      	uxth	r3, r3
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	b29b      	uxth	r3, r3
 8006420:	4413      	add	r3, r2
 8006422:	b29a      	uxth	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	3306      	adds	r3, #6
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	b29a      	uxth	r2, r3
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	3307      	adds	r3, #7
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	b29b      	uxth	r3, r3
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	b29b      	uxth	r3, r3
 800643c:	4413      	add	r3, r2
 800643e:	b29a      	uxth	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	80da      	strh	r2, [r3, #6]

}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800645a:	2180      	movs	r1, #128	; 0x80
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fcc9 	bl	8006df4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8006462:	2100      	movs	r1, #0
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fcc5 	bl	8006df4 <USBD_LL_StallEP>
}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b086      	sub	sp, #24
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d033      	beq.n	80064f0 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 f835 	bl	80064f8 <USBD_GetLen>
 800648e:	4603      	mov	r3, r0
 8006490:	3301      	adds	r3, #1
 8006492:	b29b      	uxth	r3, r3
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	75fa      	strb	r2, [r7, #23]
 80064a2:	461a      	mov	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4413      	add	r3, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	8812      	ldrh	r2, [r2, #0]
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80064b0:	7dfb      	ldrb	r3, [r7, #23]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	75fa      	strb	r2, [r7, #23]
 80064b6:	461a      	mov	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4413      	add	r3, r2
 80064bc:	2203      	movs	r2, #3
 80064be:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80064c0:	e012      	b.n	80064e8 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	75fa      	strb	r2, [r7, #23]
 80064c8:	461a      	mov	r2, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	441a      	add	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1c59      	adds	r1, r3, #1
 80064d2:	60f9      	str	r1, [r7, #12]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	75fa      	strb	r2, [r7, #23]
 80064de:	461a      	mov	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4413      	add	r3, r2
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e8      	bne.n	80064c2 <USBD_GetString+0x50>
    }
  } 
}
 80064f0:	bf00      	nop
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8006504:	e005      	b.n	8006512 <USBD_GetLen+0x1a>
    {
        len++;
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	3301      	adds	r3, #1
 800650a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3301      	adds	r3, #1
 8006510:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f5      	bne.n	8006506 <USBD_GetLen+0xe>
    }

    return len;
 800651a:	7bfb      	ldrb	r3, [r7, #15]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	4613      	mov	r3, r2
 8006534:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2202      	movs	r2, #2
 800653a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800653e:	88fa      	ldrh	r2, [r7, #6]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8006544:	88fa      	ldrh	r2, [r7, #6]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	2100      	movs	r1, #0
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fd1d 	bl	8006f90 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	4613      	mov	r3, r2
 800656c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800656e:	88fb      	ldrh	r3, [r7, #6]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	2100      	movs	r1, #0
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 fd0b 	bl	8006f90 <USBD_LL_Transmit>
  
  return USBD_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	4613      	mov	r3, r2
 8006590:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2203      	movs	r2, #3
 8006596:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800659a:	88fa      	ldrh	r2, [r7, #6]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80065a2:	88fa      	ldrh	r2, [r7, #6]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80065aa:	88fb      	ldrh	r3, [r7, #6]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	2100      	movs	r1, #0
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fd27 	bl	8007004 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	2100      	movs	r1, #0
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 fd15 	bl	8007004 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2204      	movs	r2, #4
 80065f0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80065f4:	2300      	movs	r3, #0
 80065f6:	2200      	movs	r2, #0
 80065f8:	2100      	movs	r1, #0
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fcc8 	bl	8006f90 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2205      	movs	r2, #5
 8006616:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800661a:	2300      	movs	r3, #0
 800661c:	2200      	movs	r2, #0
 800661e:	2100      	movs	r1, #0
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fcef 	bl	8007004 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006636:	4a15      	ldr	r2, [pc, #84]	; (800668c <MX_GPIO_Init+0x5c>)
 8006638:	4b14      	ldr	r3, [pc, #80]	; (800668c <MX_GPIO_Init+0x5c>)
 800663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006640:	6313      	str	r3, [r2, #48]	; 0x30
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <MX_GPIO_Init+0x5c>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800664e:	4a0f      	ldr	r2, [pc, #60]	; (800668c <MX_GPIO_Init+0x5c>)
 8006650:	4b0e      	ldr	r3, [pc, #56]	; (800668c <MX_GPIO_Init+0x5c>)
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	6313      	str	r3, [r2, #48]	; 0x30
 800665a:	4b0c      	ldr	r3, [pc, #48]	; (800668c <MX_GPIO_Init+0x5c>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	60bb      	str	r3, [r7, #8]
 8006664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <MX_GPIO_Init+0x5c>)
 8006668:	4b08      	ldr	r3, [pc, #32]	; (800668c <MX_GPIO_Init+0x5c>)
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	f043 0304 	orr.w	r3, r3, #4
 8006670:	6313      	str	r3, [r2, #48]	; 0x30
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <MX_GPIO_Init+0x5c>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	607b      	str	r3, [r7, #4]
 800667c:	687b      	ldr	r3, [r7, #4]

}
 800667e:	bf00      	nop
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	40023800 	.word	0x40023800

08006690 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006694:	f7f9 ff58 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006698:	f000 f806 	bl	80066a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800669c:	f7ff ffc8 	bl	8006630 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80066a0:	f000 f94e 	bl	8006940 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80066a4:	e7fe      	b.n	80066a4 <main+0x14>
	...

080066a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b0b8      	sub	sp, #224	; 0xe0
 80066ac:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80066ae:	4a47      	ldr	r2, [pc, #284]	; (80067cc <SystemClock_Config+0x124>)
 80066b0:	4b46      	ldr	r3, [pc, #280]	; (80067cc <SystemClock_Config+0x124>)
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066b8:	6413      	str	r3, [r2, #64]	; 0x40
 80066ba:	4b44      	ldr	r3, [pc, #272]	; (80067cc <SystemClock_Config+0x124>)
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c2:	607b      	str	r3, [r7, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80066c6:	4a42      	ldr	r2, [pc, #264]	; (80067d0 <SystemClock_Config+0x128>)
 80066c8:	4b41      	ldr	r3, [pc, #260]	; (80067d0 <SystemClock_Config+0x128>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066d0:	6013      	str	r3, [r2, #0]
 80066d2:	4b3f      	ldr	r3, [pc, #252]	; (80067d0 <SystemClock_Config+0x128>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80066de:	2301      	movs	r3, #1
 80066e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80066e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066ec:	2302      	movs	r3, #2
 80066ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80066f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80066f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 6;
 80066fa:	2306      	movs	r3, #6
 80066fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8006700:	23d8      	movs	r3, #216	; 0xd8
 8006702:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006706:	2302      	movs	r3, #2
 8006708:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800670c:	2309      	movs	r3, #9
 800670e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006712:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006716:	4618      	mov	r0, r3
 8006718:	f7fb fe68 	bl	80023ec <HAL_RCC_OscConfig>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006722:	219b      	movs	r1, #155	; 0x9b
 8006724:	482b      	ldr	r0, [pc, #172]	; (80067d4 <SystemClock_Config+0x12c>)
 8006726:	f000 f859 	bl	80067dc <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800672a:	f7fb fe0f 	bl	800234c <HAL_PWREx_EnableOverDrive>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <SystemClock_Config+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006734:	21a2      	movs	r1, #162	; 0xa2
 8006736:	4827      	ldr	r0, [pc, #156]	; (80067d4 <SystemClock_Config+0x12c>)
 8006738:	f000 f850 	bl	80067dc <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800673c:	230f      	movs	r3, #15
 800673e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006742:	2302      	movs	r3, #2
 8006744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006748:	2300      	movs	r3, #0
 800674a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800674e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800675a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800675e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006762:	2107      	movs	r1, #7
 8006764:	4618      	mov	r0, r3
 8006766:	f7fc f979 	bl	8002a5c <HAL_RCC_ClockConfig>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <SystemClock_Config+0xd0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006770:	21b0      	movs	r1, #176	; 0xb0
 8006772:	4818      	ldr	r0, [pc, #96]	; (80067d4 <SystemClock_Config+0x12c>)
 8006774:	f000 f832 	bl	80067dc <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006778:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800677c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800677e:	2300      	movs	r3, #0
 8006780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006784:	f107 0308 	add.w	r3, r7, #8
 8006788:	4618      	mov	r0, r3
 800678a:	f7fc fbcd 	bl	8002f28 <HAL_RCCEx_PeriphCLKConfig>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d003      	beq.n	800679c <SystemClock_Config+0xf4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006794:	21b7      	movs	r1, #183	; 0xb7
 8006796:	480f      	ldr	r0, [pc, #60]	; (80067d4 <SystemClock_Config+0x12c>)
 8006798:	f000 f820 	bl	80067dc <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800679c:	f7fc fbb8 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 80067a0:	4602      	mov	r2, r0
 80067a2:	4b0d      	ldr	r3, [pc, #52]	; (80067d8 <SystemClock_Config+0x130>)
 80067a4:	fba3 2302 	umull	r2, r3, r3, r2
 80067a8:	099b      	lsrs	r3, r3, #6
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fa f87a 	bl	80008a4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80067b0:	2004      	movs	r0, #4
 80067b2:	f7fa f883 	bl	80008bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	f04f 30ff 	mov.w	r0, #4294967295
 80067be:	f7fa f82d 	bl	800081c <HAL_NVIC_SetPriority>
}
 80067c2:	bf00      	nop
 80067c4:	37e0      	adds	r7, #224	; 0xe0
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	40023800 	.word	0x40023800
 80067d0:	40007000 	.word	0x40007000
 80067d4:	080076ac 	.word	0x080076ac
 80067d8:	10624dd3 	.word	0x10624dd3

080067dc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80067e6:	e7fe      	b.n	80067e6 <_Error_Handler+0xa>

080067e8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006802:	2003      	movs	r0, #3
 8006804:	f7f9 ffea 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8006808:	2200      	movs	r2, #0
 800680a:	2100      	movs	r1, #0
 800680c:	f06f 000b 	mvn.w	r0, #11
 8006810:	f7fa f804 	bl	800081c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8006814:	2200      	movs	r2, #0
 8006816:	2100      	movs	r1, #0
 8006818:	f06f 000a 	mvn.w	r0, #10
 800681c:	f7f9 fffe 	bl	800081c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8006820:	2200      	movs	r2, #0
 8006822:	2100      	movs	r1, #0
 8006824:	f06f 0009 	mvn.w	r0, #9
 8006828:	f7f9 fff8 	bl	800081c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800682c:	2200      	movs	r2, #0
 800682e:	2100      	movs	r1, #0
 8006830:	f06f 0004 	mvn.w	r0, #4
 8006834:	f7f9 fff2 	bl	800081c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006838:	2200      	movs	r2, #0
 800683a:	2100      	movs	r1, #0
 800683c:	f06f 0003 	mvn.w	r0, #3
 8006840:	f7f9 ffec 	bl	800081c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006844:	2200      	movs	r2, #0
 8006846:	2100      	movs	r1, #0
 8006848:	f06f 0001 	mvn.w	r0, #1
 800684c:	f7f9 ffe6 	bl	800081c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006850:	2200      	movs	r2, #0
 8006852:	2100      	movs	r1, #0
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	f7f9 ffe0 	bl	800081c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800685c:	bf00      	nop
 800685e:	bd80      	pop	{r7, pc}

08006860 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006864:	bf00      	nop
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800686e:	b480      	push	{r7}
 8006870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006872:	e7fe      	b.n	8006872 <HardFault_Handler+0x4>

08006874 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006878:	e7fe      	b.n	8006878 <MemManage_Handler+0x4>

0800687a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800687a:	b480      	push	{r7}
 800687c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800687e:	e7fe      	b.n	800687e <BusFault_Handler+0x4>

08006880 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006884:	e7fe      	b.n	8006884 <UsageFault_Handler+0x4>

08006886 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8006886:	b480      	push	{r7}
 8006888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800688a:	bf00      	nop
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006898:	bf00      	nop
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80068a2:	b480      	push	{r7}
 80068a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068a6:	bf00      	nop
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068b4:	f7f9 fe86 	bl	80005c4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80068b8:	f7fa f828 	bl	800090c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068bc:	bf00      	nop
 80068be:	bd80      	pop	{r7, pc}

080068c0 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80068c4:	4802      	ldr	r0, [pc, #8]	; (80068d0 <OTG_FS_IRQHandler+0x10>)
 80068c6:	f7fa fcf1 	bl	80012ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80068ca:	bf00      	nop
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20000418 	.word	0x20000418

080068d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068d8:	4a15      	ldr	r2, [pc, #84]	; (8006930 <SystemInit+0x5c>)
 80068da:	4b15      	ldr	r3, [pc, #84]	; (8006930 <SystemInit+0x5c>)
 80068dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80068e8:	4a12      	ldr	r2, [pc, #72]	; (8006934 <SystemInit+0x60>)
 80068ea:	4b12      	ldr	r3, [pc, #72]	; (8006934 <SystemInit+0x60>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f043 0301 	orr.w	r3, r3, #1
 80068f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80068f4:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <SystemInit+0x60>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80068fa:	490e      	ldr	r1, [pc, #56]	; (8006934 <SystemInit+0x60>)
 80068fc:	4b0d      	ldr	r3, [pc, #52]	; (8006934 <SystemInit+0x60>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <SystemInit+0x64>)
 8006902:	4013      	ands	r3, r2
 8006904:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006906:	4b0b      	ldr	r3, [pc, #44]	; (8006934 <SystemInit+0x60>)
 8006908:	4a0c      	ldr	r2, [pc, #48]	; (800693c <SystemInit+0x68>)
 800690a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800690c:	4a09      	ldr	r2, [pc, #36]	; (8006934 <SystemInit+0x60>)
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <SystemInit+0x60>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006916:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <SystemInit+0x60>)
 800691a:	2200      	movs	r2, #0
 800691c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800691e:	4b04      	ldr	r3, [pc, #16]	; (8006930 <SystemInit+0x5c>)
 8006920:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006924:	609a      	str	r2, [r3, #8]
#endif
}
 8006926:	bf00      	nop
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	e000ed00 	.word	0xe000ed00
 8006934:	40023800 	.word	0x40023800
 8006938:	fef6ffff 	.word	0xfef6ffff
 800693c:	24003010 	.word	0x24003010

08006940 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8006944:	2200      	movs	r2, #0
 8006946:	4908      	ldr	r1, [pc, #32]	; (8006968 <MX_USB_DEVICE_Init+0x28>)
 8006948:	4808      	ldr	r0, [pc, #32]	; (800696c <MX_USB_DEVICE_Init+0x2c>)
 800694a:	f7fe ff12 	bl	8005772 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_UVC);
 800694e:	4908      	ldr	r1, [pc, #32]	; (8006970 <MX_USB_DEVICE_Init+0x30>)
 8006950:	4806      	ldr	r0, [pc, #24]	; (800696c <MX_USB_DEVICE_Init+0x2c>)
 8006952:	f7fe ff39 	bl	80057c8 <USBD_RegisterClass>

  USBD_UVC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8006956:	4907      	ldr	r1, [pc, #28]	; (8006974 <MX_USB_DEVICE_Init+0x34>)
 8006958:	4804      	ldr	r0, [pc, #16]	; (800696c <MX_USB_DEVICE_Init+0x2c>)
 800695a:	f7fe fe9b 	bl	8005694 <USBD_UVC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800695e:	4803      	ldr	r0, [pc, #12]	; (800696c <MX_USB_DEVICE_Init+0x2c>)
 8006960:	f7fe ff4c 	bl	80057fc <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006964:	bf00      	nop
 8006966:	bd80      	pop	{r7, pc}
 8006968:	2000011c 	.word	0x2000011c
 800696c:	200001f4 	.word	0x200001f4
 8006970:	20000014 	.word	0x20000014
 8006974:	20000150 	.word	0x20000150

08006978 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006988:	d13d      	bne.n	8006a06 <HAL_PCD_MspInit+0x8e>
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800698a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800698e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006990:	2300      	movs	r3, #0
 8006992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006998:	f107 0314 	add.w	r3, r7, #20
 800699c:	4619      	mov	r1, r3
 800699e:	481c      	ldr	r0, [pc, #112]	; (8006a10 <HAL_PCD_MspInit+0x98>)
 80069a0:	f7f9 ffc2 	bl	8000928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80069a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80069a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069aa:	2302      	movs	r3, #2
 80069ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b2:	2303      	movs	r3, #3
 80069b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80069b6:	230a      	movs	r3, #10
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ba:	f107 0314 	add.w	r3, r7, #20
 80069be:	4619      	mov	r1, r3
 80069c0:	4813      	ldr	r0, [pc, #76]	; (8006a10 <HAL_PCD_MspInit+0x98>)
 80069c2:	f7f9 ffb1 	bl	8000928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80069c6:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <HAL_PCD_MspInit+0x9c>)
 80069c8:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <HAL_PCD_MspInit+0x9c>)
 80069ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d0:	6353      	str	r3, [r2, #52]	; 0x34
 80069d2:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <HAL_PCD_MspInit+0x9c>)
 80069d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4a0d      	ldr	r2, [pc, #52]	; (8006a14 <HAL_PCD_MspInit+0x9c>)
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <HAL_PCD_MspInit+0x9c>)
 80069e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069e8:	6453      	str	r3, [r2, #68]	; 0x44
 80069ea:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <HAL_PCD_MspInit+0x9c>)
 80069ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80069f6:	2200      	movs	r2, #0
 80069f8:	2100      	movs	r1, #0
 80069fa:	2043      	movs	r0, #67	; 0x43
 80069fc:	f7f9 ff0e 	bl	800081c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a00:	2043      	movs	r0, #67	; 0x43
 8006a02:	f7f9 ff37 	bl	8000874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a06:	bf00      	nop
 8006a08:	3728      	adds	r7, #40	; 0x28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	40020000 	.word	0x40020000
 8006a14:	40023800 	.word	0x40023800

08006a18 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f7fe ff2d 	bl	800588e <USBD_LL_SetupStage>
}
 8006a34:	bf00      	nop
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006a4e:	78fa      	ldrb	r2, [r7, #3]
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	4613      	mov	r3, r2
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	1a9b      	subs	r3, r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	440b      	add	r3, r1
 8006a5c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	4619      	mov	r1, r3
 8006a66:	f7fe ff5c 	bl	8005922 <USBD_LL_DataOutStage>
}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b082      	sub	sp, #8
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006a84:	78fa      	ldrb	r2, [r7, #3]
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	1a9b      	subs	r3, r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	440b      	add	r3, r1
 8006a92:	3344      	adds	r3, #68	; 0x44
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	f7fe ff9d 	bl	80059d8 <USBD_LL_DataInStage>
}
 8006a9e:	bf00      	nop
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff f883 	bl	8005bc0 <USBD_LL_SOF>
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006aca:	2301      	movs	r3, #1
 8006acc:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_PCD_ResetCallback+0x1a>
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d003      	beq.n	8006ae2 <HAL_PCD_ResetCallback+0x20>
 8006ada:	e005      	b.n	8006ae8 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73fb      	strb	r3, [r7, #15]
    break;
 8006ae0:	e005      	b.n	8006aee <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ae6:	e002      	b.n	8006aee <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
    break;    
 8006aec:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006af4:	7bfa      	ldrb	r2, [r7, #15]
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff f82b 	bl	8005b54 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fe fff6 	bl	8005af6 <USBD_LL_Reset>
}
 8006b0a:	bf00      	nop
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff f826 	bl	8005b74 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b30:	461a      	mov	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f043 0301 	orr.w	r3, r3, #1
 8006b40:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b4a:	4a05      	ldr	r2, [pc, #20]	; (8006b60 <HAL_PCD_SuspendCallback+0x4c>)
 8006b4c:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <HAL_PCD_SuspendCallback+0x4c>)
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f043 0306 	orr.w	r3, r3, #6
 8006b54:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	e000ed00 	.word	0xe000ed00

08006b64 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff f813 	bl	8005b9e <USBD_LL_Resume>
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b92:	78fa      	ldrb	r2, [r7, #3]
 8006b94:	4611      	mov	r1, r2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff f839 	bl	8005c0e <USBD_LL_IsoOUTIncomplete>
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bb6:	78fa      	ldrb	r2, [r7, #3]
 8006bb8:	4611      	mov	r1, r2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff f81a 	bl	8005bf4 <USBD_LL_IsoINIncomplete>
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff f826 	bl	8005c28 <USBD_LL_DevConnected>
}
 8006bdc:	bf00      	nop
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff f823 	bl	8005c3e <USBD_LL_DevDisconnected>
}
 8006bf8:	bf00      	nop
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d142      	bne.n	8006c96 <USBD_LL_Init+0x96>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006c10:	4a23      	ldr	r2, [pc, #140]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a21      	ldr	r2, [pc, #132]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c1c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006c20:	4b1f      	ldr	r3, [pc, #124]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006c28:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c2a:	2206      	movs	r2, #6
 8006c2c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006c2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c30:	2202      	movs	r2, #2
 8006c32:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006c34:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8006c3a:	4b19      	ldr	r3, [pc, #100]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c40:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c42:	2202      	movs	r2, #2
 8006c44:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006c46:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006c4c:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006c52:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006c58:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006c5e:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006c64:	480e      	ldr	r0, [pc, #56]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c66:	f7fa f9df 	bl	8001028 <HAL_PCD_Init>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006c70:	f240 1151 	movw	r1, #337	; 0x151
 8006c74:	480b      	ldr	r0, [pc, #44]	; (8006ca4 <USBD_LL_Init+0xa4>)
 8006c76:	f7ff fdb1 	bl	80067dc <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006c7a:	2180      	movs	r1, #128	; 0x80
 8006c7c:	4808      	ldr	r0, [pc, #32]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c7e:	f7fb fb23 	bl	80022c8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006c82:	2240      	movs	r2, #64	; 0x40
 8006c84:	2100      	movs	r1, #0
 8006c86:	4806      	ldr	r0, [pc, #24]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c88:	f7fb fad3 	bl	8002232 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006c8c:	2280      	movs	r2, #128	; 0x80
 8006c8e:	2101      	movs	r1, #1
 8006c90:	4803      	ldr	r0, [pc, #12]	; (8006ca0 <USBD_LL_Init+0xa0>)
 8006c92:	f7fb face 	bl	8002232 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20000418 	.word	0x20000418
 8006ca4:	080076bc 	.word	0x080076bc

08006ca8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fa fad2 	bl	8001268 <HAL_PCD_Start>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d816      	bhi.n	8006cfc <USBD_LL_Start+0x54>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <USBD_LL_Start+0x2c>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006ce5 	.word	0x08006ce5
 8006cd8:	08006ceb 	.word	0x08006ceb
 8006cdc:	08006cf1 	.word	0x08006cf1
 8006ce0:	08006cf7 	.word	0x08006cf7
    case HAL_OK :
      usb_status = USBD_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ce8:	e00b      	b.n	8006d02 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cea:	2302      	movs	r3, #2
 8006cec:	73fb      	strb	r3, [r7, #15]
    break;
 8006cee:	e008      	b.n	8006d02 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8006cf4:	e005      	b.n	8006d02 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8006cfa:	e002      	b.n	8006d02 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8006d00:	bf00      	nop
  }
  return usb_status;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	4608      	mov	r0, r1
 8006d16:	4611      	mov	r1, r2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	70fb      	strb	r3, [r7, #3]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70bb      	strb	r3, [r7, #2]
 8006d22:	4613      	mov	r3, r2
 8006d24:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006d34:	78bb      	ldrb	r3, [r7, #2]
 8006d36:	883a      	ldrh	r2, [r7, #0]
 8006d38:	78f9      	ldrb	r1, [r7, #3]
 8006d3a:	f7fa ffdc 	bl	8001cf6 <HAL_PCD_EP_Open>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d817      	bhi.n	8006d78 <USBD_LL_OpenEP+0x6c>
 8006d48:	a201      	add	r2, pc, #4	; (adr r2, 8006d50 <USBD_LL_OpenEP+0x44>)
 8006d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4e:	bf00      	nop
 8006d50:	08006d61 	.word	0x08006d61
 8006d54:	08006d67 	.word	0x08006d67
 8006d58:	08006d6d 	.word	0x08006d6d
 8006d5c:	08006d73 	.word	0x08006d73
    case HAL_OK :
      usb_status = USBD_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
    break;
 8006d64:	e00b      	b.n	8006d7e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d66:	2302      	movs	r3, #2
 8006d68:	73fb      	strb	r3, [r7, #15]
    break;
 8006d6a:	e008      	b.n	8006d7e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d70:	e005      	b.n	8006d7e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d72:	2302      	movs	r3, #2
 8006d74:	73fb      	strb	r3, [r7, #15]
    break;
 8006d76:	e002      	b.n	8006d7e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006d78:	2302      	movs	r3, #2
 8006d7a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d7c:	bf00      	nop
  }
  return usb_status;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	4611      	mov	r1, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fb f80d 	bl	8001dc6 <HAL_PCD_EP_Close>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d816      	bhi.n	8006de4 <USBD_LL_CloseEP+0x5c>
 8006db6:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <USBD_LL_CloseEP+0x34>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006dcd 	.word	0x08006dcd
 8006dc0:	08006dd3 	.word	0x08006dd3
 8006dc4:	08006dd9 	.word	0x08006dd9
 8006dc8:	08006ddf 	.word	0x08006ddf
    case HAL_OK :
      usb_status = USBD_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73fb      	strb	r3, [r7, #15]
    break;
 8006dd0:	e00b      	b.n	8006dea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8006dd6:	e008      	b.n	8006dea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	73fb      	strb	r3, [r7, #15]
    break;
 8006ddc:	e005      	b.n	8006dea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006dde:	2302      	movs	r3, #2
 8006de0:	73fb      	strb	r3, [r7, #15]
    break;
 8006de2:	e002      	b.n	8006dea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006de4:	2302      	movs	r3, #2
 8006de6:	73fb      	strb	r3, [r7, #15]
    break;
 8006de8:	bf00      	nop
  }
  return usb_status;  
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	4611      	mov	r1, r2
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fb f8cd 	bl	8001fb2 <HAL_PCD_EP_SetStall>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d816      	bhi.n	8006e50 <USBD_LL_StallEP+0x5c>
 8006e22:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <USBD_LL_StallEP+0x34>)
 8006e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e28:	08006e39 	.word	0x08006e39
 8006e2c:	08006e3f 	.word	0x08006e3f
 8006e30:	08006e45 	.word	0x08006e45
 8006e34:	08006e4b 	.word	0x08006e4b
    case HAL_OK :
      usb_status = USBD_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e3c:	e00b      	b.n	8006e56 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e3e:	2302      	movs	r3, #2
 8006e40:	73fb      	strb	r3, [r7, #15]
    break;
 8006e42:	e008      	b.n	8006e56 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e44:	2301      	movs	r3, #1
 8006e46:	73fb      	strb	r3, [r7, #15]
    break;
 8006e48:	e005      	b.n	8006e56 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e4e:	e002      	b.n	8006e56 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006e50:	2302      	movs	r3, #2
 8006e52:	73fb      	strb	r3, [r7, #15]
    break;
 8006e54:	bf00      	nop
  }
  return usb_status;  
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fb f8fb 	bl	800207a <HAL_PCD_EP_ClrStall>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d816      	bhi.n	8006ebc <USBD_LL_ClearStallEP+0x5c>
 8006e8e:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <USBD_LL_ClearStallEP+0x34>)
 8006e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e94:	08006ea5 	.word	0x08006ea5
 8006e98:	08006eab 	.word	0x08006eab
 8006e9c:	08006eb1 	.word	0x08006eb1
 8006ea0:	08006eb7 	.word	0x08006eb7
    case HAL_OK :
      usb_status = USBD_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea8:	e00b      	b.n	8006ec2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006eaa:	2302      	movs	r3, #2
 8006eac:	73fb      	strb	r3, [r7, #15]
    break;
 8006eae:	e008      	b.n	8006ec2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8006eb4:	e005      	b.n	8006ec2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8006eba:	e002      	b.n	8006ec2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec0:	bf00      	nop
  }
  return usb_status; 
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006ede:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	da0b      	bge.n	8006f00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006ee8:	78fb      	ldrb	r3, [r7, #3]
 8006eea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eee:	68f9      	ldr	r1, [r7, #12]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	333a      	adds	r3, #58	; 0x3a
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	e00b      	b.n	8006f18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f06:	68f9      	ldr	r1, [r7, #12]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	1a9b      	subs	r3, r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8006f16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fa feb6 	bl	8001cb4 <HAL_PCD_SetAddress>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d816      	bhi.n	8006f80 <USBD_LL_SetUSBAddress+0x5c>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <USBD_LL_SetUSBAddress+0x34>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006f69 	.word	0x08006f69
 8006f5c:	08006f6f 	.word	0x08006f6f
 8006f60:	08006f75 	.word	0x08006f75
 8006f64:	08006f7b 	.word	0x08006f7b
    case HAL_OK :
      usb_status = USBD_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f6c:	e00b      	b.n	8006f86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	73fb      	strb	r3, [r7, #15]
    break;
 8006f72:	e008      	b.n	8006f86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f74:	2301      	movs	r3, #1
 8006f76:	73fb      	strb	r3, [r7, #15]
    break;
 8006f78:	e005      	b.n	8006f86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f7e:	e002      	b.n	8006f86 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006f80:	2302      	movs	r3, #2
 8006f82:	73fb      	strb	r3, [r7, #15]
    break;
 8006f84:	bf00      	nop
  }
  return usb_status;  
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	607a      	str	r2, [r7, #4]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	72fb      	strb	r3, [r7, #11]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006fb2:	893b      	ldrh	r3, [r7, #8]
 8006fb4:	7af9      	ldrb	r1, [r7, #11]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	f7fa ffb2 	bl	8001f20 <HAL_PCD_EP_Transmit>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006fc0:	7dbb      	ldrb	r3, [r7, #22]
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d816      	bhi.n	8006ff4 <USBD_LL_Transmit+0x64>
 8006fc6:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <USBD_LL_Transmit+0x3c>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	08006fdd 	.word	0x08006fdd
 8006fd0:	08006fe3 	.word	0x08006fe3
 8006fd4:	08006fe9 	.word	0x08006fe9
 8006fd8:	08006fef 	.word	0x08006fef
    case HAL_OK :
      usb_status = USBD_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	75fb      	strb	r3, [r7, #23]
    break;
 8006fe0:	e00b      	b.n	8006ffa <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	75fb      	strb	r3, [r7, #23]
    break;
 8006fe6:	e008      	b.n	8006ffa <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	75fb      	strb	r3, [r7, #23]
    break;
 8006fec:	e005      	b.n	8006ffa <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fee:	2302      	movs	r3, #2
 8006ff0:	75fb      	strb	r3, [r7, #23]
    break;
 8006ff2:	e002      	b.n	8006ffa <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	75fb      	strb	r3, [r7, #23]
    break;
 8006ff8:	bf00      	nop
  }
  return usb_status;    
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	607a      	str	r2, [r7, #4]
 800700e:	461a      	mov	r2, r3
 8007010:	460b      	mov	r3, r1
 8007012:	72fb      	strb	r3, [r7, #11]
 8007014:	4613      	mov	r3, r2
 8007016:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007026:	893b      	ldrh	r3, [r7, #8]
 8007028:	7af9      	ldrb	r1, [r7, #11]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	f7fa ff15 	bl	8001e5a <HAL_PCD_EP_Receive>
 8007030:	4603      	mov	r3, r0
 8007032:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007034:	7dbb      	ldrb	r3, [r7, #22]
 8007036:	2b03      	cmp	r3, #3
 8007038:	d816      	bhi.n	8007068 <USBD_LL_PrepareReceive+0x64>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <USBD_LL_PrepareReceive+0x3c>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007051 	.word	0x08007051
 8007044:	08007057 	.word	0x08007057
 8007048:	0800705d 	.word	0x0800705d
 800704c:	08007063 	.word	0x08007063
    case HAL_OK :
      usb_status = USBD_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	75fb      	strb	r3, [r7, #23]
    break;
 8007054:	e00b      	b.n	800706e <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007056:	2302      	movs	r3, #2
 8007058:	75fb      	strb	r3, [r7, #23]
    break;
 800705a:	e008      	b.n	800706e <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800705c:	2301      	movs	r3, #1
 800705e:	75fb      	strb	r3, [r7, #23]
    break;
 8007060:	e005      	b.n	800706e <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007062:	2302      	movs	r3, #2
 8007064:	75fb      	strb	r3, [r7, #23]
    break;
 8007066:	e002      	b.n	800706e <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007068:	2302      	movs	r3, #2
 800706a:	75fb      	strb	r3, [r7, #23]
    break;
 800706c:	bf00      	nop
  }
  return usb_status; 
 800706e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	460b      	mov	r3, r1
 8007082:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	4611      	mov	r1, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f7fa ff2d 	bl	8001eee <HAL_PCD_EP_GetRxCount>
 8007094:	4603      	mov	r3, r0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	4603      	mov	r3, r0
 80070a8:	6039      	str	r1, [r7, #0]
 80070aa:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2212      	movs	r2, #18
 80070b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070b2:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	20000138 	.word	0x20000138

080070c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2204      	movs	r2, #4
 80070d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070d6:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	2000014c 	.word	0x2000014c

080070e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	4603      	mov	r3, r0
 80070f0:	6039      	str	r1, [r7, #0]
 80070f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070f4:	79fb      	ldrb	r3, [r7, #7]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d105      	bne.n	8007106 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	4907      	ldr	r1, [pc, #28]	; (800711c <USBD_FS_ProductStrDescriptor+0x34>)
 80070fe:	4808      	ldr	r0, [pc, #32]	; (8007120 <USBD_FS_ProductStrDescriptor+0x38>)
 8007100:	f7ff f9b7 	bl	8006472 <USBD_GetString>
 8007104:	e004      	b.n	8007110 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	4904      	ldr	r1, [pc, #16]	; (800711c <USBD_FS_ProductStrDescriptor+0x34>)
 800710a:	4805      	ldr	r0, [pc, #20]	; (8007120 <USBD_FS_ProductStrDescriptor+0x38>)
 800710c:	f7ff f9b1 	bl	8006472 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007110:	4b02      	ldr	r3, [pc, #8]	; (800711c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000818 	.word	0x20000818
 8007120:	080076d0 	.word	0x080076d0

08007124 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	6039      	str	r1, [r7, #0]
 800712e:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	4904      	ldr	r1, [pc, #16]	; (8007144 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007134:	4804      	ldr	r0, [pc, #16]	; (8007148 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007136:	f7ff f99c 	bl	8006472 <USBD_GetString>
  return USBD_StrDesc;
 800713a:	4b02      	ldr	r3, [pc, #8]	; (8007144 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000818 	.word	0x20000818
 8007148:	080076e4 	.word	0x080076e4

0800714c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	6039      	str	r1, [r7, #0]
 8007156:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007158:	79fb      	ldrb	r3, [r7, #7]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d105      	bne.n	800716a <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	4907      	ldr	r1, [pc, #28]	; (8007180 <USBD_FS_SerialStrDescriptor+0x34>)
 8007162:	4808      	ldr	r0, [pc, #32]	; (8007184 <USBD_FS_SerialStrDescriptor+0x38>)
 8007164:	f7ff f985 	bl	8006472 <USBD_GetString>
 8007168:	e004      	b.n	8007174 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	4904      	ldr	r1, [pc, #16]	; (8007180 <USBD_FS_SerialStrDescriptor+0x34>)
 800716e:	4805      	ldr	r0, [pc, #20]	; (8007184 <USBD_FS_SerialStrDescriptor+0x38>)
 8007170:	f7ff f97f 	bl	8006472 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20000818 	.word	0x20000818
 8007184:	080076f8 	.word	0x080076f8

08007188 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	4603      	mov	r3, r0
 8007190:	6039      	str	r1, [r7, #0]
 8007192:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d105      	bne.n	80071a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	4907      	ldr	r1, [pc, #28]	; (80071bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800719e:	4808      	ldr	r0, [pc, #32]	; (80071c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071a0:	f7ff f967 	bl	8006472 <USBD_GetString>
 80071a4:	e004      	b.n	80071b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	4904      	ldr	r1, [pc, #16]	; (80071bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80071aa:	4805      	ldr	r0, [pc, #20]	; (80071c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071ac:	f7ff f961 	bl	8006472 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b0:	4b02      	ldr	r3, [pc, #8]	; (80071bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000818 	.word	0x20000818
 80071c0:	08007708 	.word	0x08007708

080071c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	6039      	str	r1, [r7, #0]
 80071ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d105      	bne.n	80071e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	4907      	ldr	r1, [pc, #28]	; (80071f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071da:	4808      	ldr	r0, [pc, #32]	; (80071fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071dc:	f7ff f949 	bl	8006472 <USBD_GetString>
 80071e0:	e004      	b.n	80071ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	4904      	ldr	r1, [pc, #16]	; (80071f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071e6:	4805      	ldr	r0, [pc, #20]	; (80071fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071e8:	f7ff f943 	bl	8006472 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071ec:	4b02      	ldr	r3, [pc, #8]	; (80071f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	20000818 	.word	0x20000818
 80071fc:	08007714 	.word	0x08007714

08007200 <UVC_Init_FS>:
/**
  * @brief  Initializes the UVC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t UVC_Init_FS(void)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_UVC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007204:	2200      	movs	r2, #0
 8007206:	4905      	ldr	r1, [pc, #20]	; (800721c <UVC_Init_FS+0x1c>)
 8007208:	4805      	ldr	r0, [pc, #20]	; (8007220 <UVC_Init_FS+0x20>)
 800720a:	f7fe fa5a 	bl	80056c2 <USBD_UVC_SetTxBuffer>
  USBD_UVC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800720e:	4905      	ldr	r1, [pc, #20]	; (8007224 <UVC_Init_FS+0x24>)
 8007210:	4803      	ldr	r0, [pc, #12]	; (8007220 <UVC_Init_FS+0x20>)
 8007212:	f7fe fa70 	bl	80056f6 <USBD_UVC_SetRxBuffer>
  return (USBD_OK);
 8007216:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007218:	4618      	mov	r0, r3
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20001218 	.word	0x20001218
 8007220:	200001f4 	.word	0x200001f4
 8007224:	20000a18 	.word	0x20000a18

08007228 <UVC_DeInit_FS>:
/**
  * @brief  DeInitializes the UVC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t UVC_DeInit_FS(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800722c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800722e:	4618      	mov	r0, r3
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <UVC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t UVC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	71fb      	strb	r3, [r7, #7]
 8007244:	4613      	mov	r3, r2
 8007246:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	2b23      	cmp	r3, #35	; 0x23
 800724c:	d84a      	bhi.n	80072e4 <UVC_Control_FS+0xac>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <UVC_Control_FS+0x1c>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	080072e5 	.word	0x080072e5
 8007258:	080072e5 	.word	0x080072e5
 800725c:	080072e5 	.word	0x080072e5
 8007260:	080072e5 	.word	0x080072e5
 8007264:	080072e5 	.word	0x080072e5
 8007268:	080072e5 	.word	0x080072e5
 800726c:	080072e5 	.word	0x080072e5
 8007270:	080072e5 	.word	0x080072e5
 8007274:	080072e5 	.word	0x080072e5
 8007278:	080072e5 	.word	0x080072e5
 800727c:	080072e5 	.word	0x080072e5
 8007280:	080072e5 	.word	0x080072e5
 8007284:	080072e5 	.word	0x080072e5
 8007288:	080072e5 	.word	0x080072e5
 800728c:	080072e5 	.word	0x080072e5
 8007290:	080072e5 	.word	0x080072e5
 8007294:	080072e5 	.word	0x080072e5
 8007298:	080072e5 	.word	0x080072e5
 800729c:	080072e5 	.word	0x080072e5
 80072a0:	080072e5 	.word	0x080072e5
 80072a4:	080072e5 	.word	0x080072e5
 80072a8:	080072e5 	.word	0x080072e5
 80072ac:	080072e5 	.word	0x080072e5
 80072b0:	080072e5 	.word	0x080072e5
 80072b4:	080072e5 	.word	0x080072e5
 80072b8:	080072e5 	.word	0x080072e5
 80072bc:	080072e5 	.word	0x080072e5
 80072c0:	080072e5 	.word	0x080072e5
 80072c4:	080072e5 	.word	0x080072e5
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	080072e5 	.word	0x080072e5
 80072d0:	080072e5 	.word	0x080072e5
 80072d4:	080072e5 	.word	0x080072e5
 80072d8:	080072e5 	.word	0x080072e5
 80072dc:	080072e5 	.word	0x080072e5
 80072e0:	080072e5 	.word	0x080072e5
    case UVC_SEND_BREAK:

    break;

  default:
    break;
 80072e4:	bf00      	nop
  }

  return (USBD_OK);
 80072e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <UVC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t UVC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_UVC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	4805      	ldr	r0, [pc, #20]	; (8007318 <UVC_Receive_FS+0x24>)
 8007302:	f7fe f9f8 	bl	80056f6 <USBD_UVC_SetRxBuffer>
  USBD_UVC_ReceivePacket(&hUsbDeviceFS);
 8007306:	4804      	ldr	r0, [pc, #16]	; (8007318 <UVC_Receive_FS+0x24>)
 8007308:	f7fe fa09 	bl	800571e <USBD_UVC_ReceivePacket>
  return (USBD_OK);
 800730c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	200001f4 	.word	0x200001f4

0800731c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800731c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007354 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007320:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007322:	e003      	b.n	800732c <LoopCopyDataInit>

08007324 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007324:	4b0c      	ldr	r3, [pc, #48]	; (8007358 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007326:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007328:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800732a:	3104      	adds	r1, #4

0800732c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800732c:	480b      	ldr	r0, [pc, #44]	; (800735c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800732e:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007330:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007332:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007334:	d3f6      	bcc.n	8007324 <CopyDataInit>
  ldr  r2, =_sbss
 8007336:	4a0b      	ldr	r2, [pc, #44]	; (8007364 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007338:	e002      	b.n	8007340 <LoopFillZerobss>

0800733a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800733a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800733c:	f842 3b04 	str.w	r3, [r2], #4

08007340 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007340:	4b09      	ldr	r3, [pc, #36]	; (8007368 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007342:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007344:	d3f9      	bcc.n	800733a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007346:	f7ff fac5 	bl	80068d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800734a:	f000 f811 	bl	8007370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800734e:	f7ff f99f 	bl	8006690 <main>
  bx  lr    
 8007352:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007354:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007358:	08007744 	.word	0x08007744
  ldr  r0, =_sdata
 800735c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007360:	200001c4 	.word	0x200001c4
  ldr  r2, =_sbss
 8007364:	200001c4 	.word	0x200001c4
  ldr  r3, = _ebss
 8007368:	20001a1c 	.word	0x20001a1c

0800736c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800736c:	e7fe      	b.n	800736c <ADC_IRQHandler>
	...

08007370 <__libc_init_array>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	4e0d      	ldr	r6, [pc, #52]	; (80073a8 <__libc_init_array+0x38>)
 8007374:	4c0d      	ldr	r4, [pc, #52]	; (80073ac <__libc_init_array+0x3c>)
 8007376:	1ba4      	subs	r4, r4, r6
 8007378:	10a4      	asrs	r4, r4, #2
 800737a:	2500      	movs	r5, #0
 800737c:	42a5      	cmp	r5, r4
 800737e:	d109      	bne.n	8007394 <__libc_init_array+0x24>
 8007380:	4e0b      	ldr	r6, [pc, #44]	; (80073b0 <__libc_init_array+0x40>)
 8007382:	4c0c      	ldr	r4, [pc, #48]	; (80073b4 <__libc_init_array+0x44>)
 8007384:	f000 f8f4 	bl	8007570 <_init>
 8007388:	1ba4      	subs	r4, r4, r6
 800738a:	10a4      	asrs	r4, r4, #2
 800738c:	2500      	movs	r5, #0
 800738e:	42a5      	cmp	r5, r4
 8007390:	d105      	bne.n	800739e <__libc_init_array+0x2e>
 8007392:	bd70      	pop	{r4, r5, r6, pc}
 8007394:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007398:	4798      	blx	r3
 800739a:	3501      	adds	r5, #1
 800739c:	e7ee      	b.n	800737c <__libc_init_array+0xc>
 800739e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073a2:	4798      	blx	r3
 80073a4:	3501      	adds	r5, #1
 80073a6:	e7f2      	b.n	800738e <__libc_init_array+0x1e>
 80073a8:	0800773c 	.word	0x0800773c
 80073ac:	0800773c 	.word	0x0800773c
 80073b0:	0800773c 	.word	0x0800773c
 80073b4:	08007740 	.word	0x08007740

080073b8 <malloc>:
 80073b8:	4b02      	ldr	r3, [pc, #8]	; (80073c4 <malloc+0xc>)
 80073ba:	4601      	mov	r1, r0
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	f000 b859 	b.w	8007474 <_malloc_r>
 80073c2:	bf00      	nop
 80073c4:	20000160 	.word	0x20000160

080073c8 <free>:
 80073c8:	4b02      	ldr	r3, [pc, #8]	; (80073d4 <free+0xc>)
 80073ca:	4601      	mov	r1, r0
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	f000 b803 	b.w	80073d8 <_free_r>
 80073d2:	bf00      	nop
 80073d4:	20000160 	.word	0x20000160

080073d8 <_free_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4605      	mov	r5, r0
 80073dc:	2900      	cmp	r1, #0
 80073de:	d045      	beq.n	800746c <_free_r+0x94>
 80073e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e4:	1f0c      	subs	r4, r1, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	bfb8      	it	lt
 80073ea:	18e4      	addlt	r4, r4, r3
 80073ec:	f000 f8b0 	bl	8007550 <__malloc_lock>
 80073f0:	4a1f      	ldr	r2, [pc, #124]	; (8007470 <_free_r+0x98>)
 80073f2:	6813      	ldr	r3, [r2, #0]
 80073f4:	4610      	mov	r0, r2
 80073f6:	b933      	cbnz	r3, 8007406 <_free_r+0x2e>
 80073f8:	6063      	str	r3, [r4, #4]
 80073fa:	6014      	str	r4, [r2, #0]
 80073fc:	4628      	mov	r0, r5
 80073fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007402:	f000 b8a6 	b.w	8007552 <__malloc_unlock>
 8007406:	42a3      	cmp	r3, r4
 8007408:	d90c      	bls.n	8007424 <_free_r+0x4c>
 800740a:	6821      	ldr	r1, [r4, #0]
 800740c:	1862      	adds	r2, r4, r1
 800740e:	4293      	cmp	r3, r2
 8007410:	bf04      	itt	eq
 8007412:	681a      	ldreq	r2, [r3, #0]
 8007414:	685b      	ldreq	r3, [r3, #4]
 8007416:	6063      	str	r3, [r4, #4]
 8007418:	bf04      	itt	eq
 800741a:	1852      	addeq	r2, r2, r1
 800741c:	6022      	streq	r2, [r4, #0]
 800741e:	6004      	str	r4, [r0, #0]
 8007420:	e7ec      	b.n	80073fc <_free_r+0x24>
 8007422:	4613      	mov	r3, r2
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	b10a      	cbz	r2, 800742c <_free_r+0x54>
 8007428:	42a2      	cmp	r2, r4
 800742a:	d9fa      	bls.n	8007422 <_free_r+0x4a>
 800742c:	6819      	ldr	r1, [r3, #0]
 800742e:	1858      	adds	r0, r3, r1
 8007430:	42a0      	cmp	r0, r4
 8007432:	d10b      	bne.n	800744c <_free_r+0x74>
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	4401      	add	r1, r0
 8007438:	1858      	adds	r0, r3, r1
 800743a:	4282      	cmp	r2, r0
 800743c:	6019      	str	r1, [r3, #0]
 800743e:	d1dd      	bne.n	80073fc <_free_r+0x24>
 8007440:	6810      	ldr	r0, [r2, #0]
 8007442:	6852      	ldr	r2, [r2, #4]
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	4401      	add	r1, r0
 8007448:	6019      	str	r1, [r3, #0]
 800744a:	e7d7      	b.n	80073fc <_free_r+0x24>
 800744c:	d902      	bls.n	8007454 <_free_r+0x7c>
 800744e:	230c      	movs	r3, #12
 8007450:	602b      	str	r3, [r5, #0]
 8007452:	e7d3      	b.n	80073fc <_free_r+0x24>
 8007454:	6820      	ldr	r0, [r4, #0]
 8007456:	1821      	adds	r1, r4, r0
 8007458:	428a      	cmp	r2, r1
 800745a:	bf04      	itt	eq
 800745c:	6811      	ldreq	r1, [r2, #0]
 800745e:	6852      	ldreq	r2, [r2, #4]
 8007460:	6062      	str	r2, [r4, #4]
 8007462:	bf04      	itt	eq
 8007464:	1809      	addeq	r1, r1, r0
 8007466:	6021      	streq	r1, [r4, #0]
 8007468:	605c      	str	r4, [r3, #4]
 800746a:	e7c7      	b.n	80073fc <_free_r+0x24>
 800746c:	bd38      	pop	{r3, r4, r5, pc}
 800746e:	bf00      	nop
 8007470:	200001e4 	.word	0x200001e4

08007474 <_malloc_r>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	1ccd      	adds	r5, r1, #3
 8007478:	f025 0503 	bic.w	r5, r5, #3
 800747c:	3508      	adds	r5, #8
 800747e:	2d0c      	cmp	r5, #12
 8007480:	bf38      	it	cc
 8007482:	250c      	movcc	r5, #12
 8007484:	2d00      	cmp	r5, #0
 8007486:	4606      	mov	r6, r0
 8007488:	db01      	blt.n	800748e <_malloc_r+0x1a>
 800748a:	42a9      	cmp	r1, r5
 800748c:	d903      	bls.n	8007496 <_malloc_r+0x22>
 800748e:	230c      	movs	r3, #12
 8007490:	6033      	str	r3, [r6, #0]
 8007492:	2000      	movs	r0, #0
 8007494:	bd70      	pop	{r4, r5, r6, pc}
 8007496:	f000 f85b 	bl	8007550 <__malloc_lock>
 800749a:	4a23      	ldr	r2, [pc, #140]	; (8007528 <_malloc_r+0xb4>)
 800749c:	6814      	ldr	r4, [r2, #0]
 800749e:	4621      	mov	r1, r4
 80074a0:	b991      	cbnz	r1, 80074c8 <_malloc_r+0x54>
 80074a2:	4c22      	ldr	r4, [pc, #136]	; (800752c <_malloc_r+0xb8>)
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	b91b      	cbnz	r3, 80074b0 <_malloc_r+0x3c>
 80074a8:	4630      	mov	r0, r6
 80074aa:	f000 f841 	bl	8007530 <_sbrk_r>
 80074ae:	6020      	str	r0, [r4, #0]
 80074b0:	4629      	mov	r1, r5
 80074b2:	4630      	mov	r0, r6
 80074b4:	f000 f83c 	bl	8007530 <_sbrk_r>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d126      	bne.n	800750a <_malloc_r+0x96>
 80074bc:	230c      	movs	r3, #12
 80074be:	6033      	str	r3, [r6, #0]
 80074c0:	4630      	mov	r0, r6
 80074c2:	f000 f846 	bl	8007552 <__malloc_unlock>
 80074c6:	e7e4      	b.n	8007492 <_malloc_r+0x1e>
 80074c8:	680b      	ldr	r3, [r1, #0]
 80074ca:	1b5b      	subs	r3, r3, r5
 80074cc:	d41a      	bmi.n	8007504 <_malloc_r+0x90>
 80074ce:	2b0b      	cmp	r3, #11
 80074d0:	d90f      	bls.n	80074f2 <_malloc_r+0x7e>
 80074d2:	600b      	str	r3, [r1, #0]
 80074d4:	50cd      	str	r5, [r1, r3]
 80074d6:	18cc      	adds	r4, r1, r3
 80074d8:	4630      	mov	r0, r6
 80074da:	f000 f83a 	bl	8007552 <__malloc_unlock>
 80074de:	f104 000b 	add.w	r0, r4, #11
 80074e2:	1d23      	adds	r3, r4, #4
 80074e4:	f020 0007 	bic.w	r0, r0, #7
 80074e8:	1ac3      	subs	r3, r0, r3
 80074ea:	d01b      	beq.n	8007524 <_malloc_r+0xb0>
 80074ec:	425a      	negs	r2, r3
 80074ee:	50e2      	str	r2, [r4, r3]
 80074f0:	bd70      	pop	{r4, r5, r6, pc}
 80074f2:	428c      	cmp	r4, r1
 80074f4:	bf0d      	iteet	eq
 80074f6:	6863      	ldreq	r3, [r4, #4]
 80074f8:	684b      	ldrne	r3, [r1, #4]
 80074fa:	6063      	strne	r3, [r4, #4]
 80074fc:	6013      	streq	r3, [r2, #0]
 80074fe:	bf18      	it	ne
 8007500:	460c      	movne	r4, r1
 8007502:	e7e9      	b.n	80074d8 <_malloc_r+0x64>
 8007504:	460c      	mov	r4, r1
 8007506:	6849      	ldr	r1, [r1, #4]
 8007508:	e7ca      	b.n	80074a0 <_malloc_r+0x2c>
 800750a:	1cc4      	adds	r4, r0, #3
 800750c:	f024 0403 	bic.w	r4, r4, #3
 8007510:	42a0      	cmp	r0, r4
 8007512:	d005      	beq.n	8007520 <_malloc_r+0xac>
 8007514:	1a21      	subs	r1, r4, r0
 8007516:	4630      	mov	r0, r6
 8007518:	f000 f80a 	bl	8007530 <_sbrk_r>
 800751c:	3001      	adds	r0, #1
 800751e:	d0cd      	beq.n	80074bc <_malloc_r+0x48>
 8007520:	6025      	str	r5, [r4, #0]
 8007522:	e7d9      	b.n	80074d8 <_malloc_r+0x64>
 8007524:	bd70      	pop	{r4, r5, r6, pc}
 8007526:	bf00      	nop
 8007528:	200001e4 	.word	0x200001e4
 800752c:	200001e8 	.word	0x200001e8

08007530 <_sbrk_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	4c06      	ldr	r4, [pc, #24]	; (800754c <_sbrk_r+0x1c>)
 8007534:	2300      	movs	r3, #0
 8007536:	4605      	mov	r5, r0
 8007538:	4608      	mov	r0, r1
 800753a:	6023      	str	r3, [r4, #0]
 800753c:	f000 f80a 	bl	8007554 <_sbrk>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_sbrk_r+0x1a>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	b103      	cbz	r3, 800754a <_sbrk_r+0x1a>
 8007548:	602b      	str	r3, [r5, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	20001a18 	.word	0x20001a18

08007550 <__malloc_lock>:
 8007550:	4770      	bx	lr

08007552 <__malloc_unlock>:
 8007552:	4770      	bx	lr

08007554 <_sbrk>:
 8007554:	4b04      	ldr	r3, [pc, #16]	; (8007568 <_sbrk+0x14>)
 8007556:	6819      	ldr	r1, [r3, #0]
 8007558:	4602      	mov	r2, r0
 800755a:	b909      	cbnz	r1, 8007560 <_sbrk+0xc>
 800755c:	4903      	ldr	r1, [pc, #12]	; (800756c <_sbrk+0x18>)
 800755e:	6019      	str	r1, [r3, #0]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	4402      	add	r2, r0
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	4770      	bx	lr
 8007568:	200001ec 	.word	0x200001ec
 800756c:	20001a1c 	.word	0x20001a1c

08007570 <_init>:
 8007570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007572:	bf00      	nop
 8007574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007576:	bc08      	pop	{r3}
 8007578:	469e      	mov	lr, r3
 800757a:	4770      	bx	lr

0800757c <_fini>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	bf00      	nop
 8007580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007582:	bc08      	pop	{r3}
 8007584:	469e      	mov	lr, r3
 8007586:	4770      	bx	lr
