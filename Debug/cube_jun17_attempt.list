
cube_jun17_attempt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007474  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800766c  0800766c  0001766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007824  08007824  00017824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000000  08007828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001858  200001d4  080079fc  000201d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001a2c  080079fc  00021a2c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018d01  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000032f6  00000000  00000000  00038f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bc0  00000000  00000000  0003c200  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a58  00000000  00000000  0003cdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006e74  00000000  00000000  0003d818  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003dc4  00000000  00000000  0004468c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00048450  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ec8  00000000  00000000  000484cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001d4 	.word	0x200001d4
 8000214:	00000000 	.word	0x00000000
 8000218:	08007654 	.word	0x08007654

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001d8 	.word	0x200001d8
 8000234:	08007654 	.word	0x08007654

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f945 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f806 	bl	8000564 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f006 f961 	bl	800681e <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_InitTick+0x54>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x58>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4619      	mov	r1, r3
 8000576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057a:	fbb3 f3f1 	udiv	r3, r3, r1
 800057e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f98e 	bl	80008a4 <HAL_SYSTICK_Config>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800058e:	2301      	movs	r3, #1
 8000590:	e00e      	b.n	80005b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d80a      	bhi.n	80005ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000598:	2200      	movs	r2, #0
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f000 f93c 	bl	800081c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <HAL_InitTick+0x5c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e000      	b.n	80005b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000118 	.word	0x20000118
 80005bc:	20000004 	.word	0x20000004
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <HAL_IncTick+0x20>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x24>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_IncTick+0x24>)
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000004 	.word	0x20000004
 80005e8:	20000200 	.word	0x20000200

080005ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_GetTick+0x14>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000200 	.word	0x20000200

08000604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff ffee 	bl	80005ec <HAL_GetTick>
 8000610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061c:	d005      	beq.n	800062a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <HAL_Delay+0x40>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800062a:	bf00      	nop
 800062c:	f7ff ffde 	bl	80005ec <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	429a      	cmp	r2, r3
 800063a:	d3f7      	bcc.n	800062c <HAL_Delay+0x28>
  {
  }
}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000004 	.word	0x20000004

08000648 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <NVIC_SetPriorityGrouping+0x40>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <NVIC_SetPriorityGrouping+0x44>)
 8000672:	4313      	orrs	r3, r2
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	; (8000688 <NVIC_SetPriorityGrouping+0x40>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00
 800068c:	05fa0000 	.word	0x05fa0000

08000690 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006b6:	4909      	ldr	r1, [pc, #36]	; (80006dc <NVIC_EnableIRQ+0x30>)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	095b      	lsrs	r3, r3, #5
 80006be:	79fa      	ldrb	r2, [r7, #7]
 80006c0:	f002 021f 	and.w	r2, r2, #31
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	da0b      	bge.n	800070c <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	490d      	ldr	r1, [pc, #52]	; (800072c <NVIC_SetPriority+0x4c>)
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	f003 030f 	and.w	r3, r3, #15
 80006fc:	3b04      	subs	r3, #4
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	0112      	lsls	r2, r2, #4
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	440b      	add	r3, r1
 8000708:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800070a:	e009      	b.n	8000720 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070c:	4908      	ldr	r1, [pc, #32]	; (8000730 <NVIC_SetPriority+0x50>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	683a      	ldr	r2, [r7, #0]
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	0112      	lsls	r2, r2, #4
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	440b      	add	r3, r1
 800071c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	e000e100 	.word	0xe000e100

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	2201      	movs	r2, #1
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	401a      	ands	r2, r3
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077a:	2101      	movs	r1, #1
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	1e59      	subs	r1, r3, #1
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff90 	bl	80006e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b07      	cmp	r3, #7
 80007e8:	d00f      	beq.n	800080a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b06      	cmp	r3, #6
 80007ee:	d00c      	beq.n	800080a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b05      	cmp	r3, #5
 80007f4:	d009      	beq.n	800080a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	d006      	beq.n	800080a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	d003      	beq.n	800080a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000802:	21a2      	movs	r1, #162	; 0xa2
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000806:	f005 ffff 	bl	8006808 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ff1c 	bl	8000648 <NVIC_SetPriorityGrouping>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	0800766c 	.word	0x0800766c

0800081c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d903      	bls.n	800083c <HAL_NVIC_SetPriority+0x20>
 8000834:	21ba      	movs	r1, #186	; 0xba
 8000836:	480e      	ldr	r0, [pc, #56]	; (8000870 <HAL_NVIC_SetPriority+0x54>)
 8000838:	f005 ffe6 	bl	8006808 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	2b0f      	cmp	r3, #15
 8000840:	d903      	bls.n	800084a <HAL_NVIC_SetPriority+0x2e>
 8000842:	21bb      	movs	r1, #187	; 0xbb
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <HAL_NVIC_SetPriority+0x54>)
 8000846:	f005 ffdf 	bl	8006808 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800084a:	f7ff ff21 	bl	8000690 <NVIC_GetPriorityGrouping>
 800084e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	68b9      	ldr	r1, [r7, #8]
 8000854:	6978      	ldr	r0, [r7, #20]
 8000856:	f7ff ff6d 	bl	8000734 <NVIC_EncodePriority>
 800085a:	4602      	mov	r2, r0
 800085c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000860:	4611      	mov	r1, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff3c 	bl	80006e0 <NVIC_SetPriority>
}
 8000868:	bf00      	nop
 800086a:	3718      	adds	r7, #24
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	0800766c 	.word	0x0800766c

08000874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	da03      	bge.n	800088e <HAL_NVIC_EnableIRQ+0x1a>
 8000886:	21ce      	movs	r1, #206	; 0xce
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <HAL_NVIC_EnableIRQ+0x2c>)
 800088a:	f005 ffbd 	bl	8006808 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff ff0a 	bl	80006ac <NVIC_EnableIRQ>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	0800766c 	.word	0x0800766c

080008a4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff73 	bl	8000798 <SysTick_Config>
 80008b2:	4603      	mov	r3, r0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	d007      	beq.n	80008da <HAL_SYSTICK_CLKSourceConfig+0x1e>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d004      	beq.n	80008da <HAL_SYSTICK_CLKSourceConfig+0x1e>
 80008d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 80008d6:	f005 ff97 	bl	8006808 <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b04      	cmp	r3, #4
 80008de:	d106      	bne.n	80008ee <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008e0:	4a09      	ldr	r2, [pc, #36]	; (8000908 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80008ec:	e005      	b.n	80008fa <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008ee:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f023 0304 	bic.w	r3, r3, #4
 80008f8:	6013      	str	r3, [r2, #0]
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	0800766c 	.word	0x0800766c
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000910:	f000 f802 	bl	8000918 <HAL_SYSTICK_Callback>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a42      	ldr	r2, [pc, #264]	; (8000a50 <HAL_GPIO_Init+0x128>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d02b      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a41      	ldr	r2, [pc, #260]	; (8000a54 <HAL_GPIO_Init+0x12c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d027      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a40      	ldr	r2, [pc, #256]	; (8000a58 <HAL_GPIO_Init+0x130>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d023      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a3f      	ldr	r2, [pc, #252]	; (8000a5c <HAL_GPIO_Init+0x134>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d01f      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a3e      	ldr	r2, [pc, #248]	; (8000a60 <HAL_GPIO_Init+0x138>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d01b      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a3d      	ldr	r2, [pc, #244]	; (8000a64 <HAL_GPIO_Init+0x13c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d017      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a3c      	ldr	r2, [pc, #240]	; (8000a68 <HAL_GPIO_Init+0x140>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a3b      	ldr	r2, [pc, #236]	; (8000a6c <HAL_GPIO_Init+0x144>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d00f      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a3a      	ldr	r2, [pc, #232]	; (8000a70 <HAL_GPIO_Init+0x148>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d00b      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a39      	ldr	r2, [pc, #228]	; (8000a74 <HAL_GPIO_Init+0x14c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d007      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a38      	ldr	r2, [pc, #224]	; (8000a78 <HAL_GPIO_Init+0x150>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_Init+0x7a>
 800099a:	21c1      	movs	r1, #193	; 0xc1
 800099c:	4837      	ldr	r0, [pc, #220]	; (8000a7c <HAL_GPIO_Init+0x154>)
 800099e:	f005 ff33 	bl	8006808 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d103      	bne.n	80009b4 <HAL_GPIO_Init+0x8c>
 80009ac:	21c2      	movs	r1, #194	; 0xc2
 80009ae:	4833      	ldr	r0, [pc, #204]	; (8000a7c <HAL_GPIO_Init+0x154>)
 80009b0:	f005 ff2a 	bl	8006808 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d035      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d031      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b11      	cmp	r3, #17
 80009ca:	d02d      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d029      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b12      	cmp	r3, #18
 80009da:	d025      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4a27      	ldr	r2, [pc, #156]	; (8000a80 <HAL_GPIO_Init+0x158>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d020      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <HAL_GPIO_Init+0x15c>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d01b      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a24      	ldr	r2, [pc, #144]	; (8000a88 <HAL_GPIO_Init+0x160>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d016      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <HAL_GPIO_Init+0x164>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d011      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4a21      	ldr	r2, [pc, #132]	; (8000a90 <HAL_GPIO_Init+0x168>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d00c      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <HAL_GPIO_Init+0x16c>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d007      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	2b03      	cmp	r3, #3
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x100>
 8000a20:	21c3      	movs	r1, #195	; 0xc3
 8000a22:	4816      	ldr	r0, [pc, #88]	; (8000a7c <HAL_GPIO_Init+0x154>)
 8000a24:	f005 fef0 	bl	8006808 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00b      	beq.n	8000a48 <HAL_GPIO_Init+0x120>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d007      	beq.n	8000a48 <HAL_GPIO_Init+0x120>
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d003      	beq.n	8000a48 <HAL_GPIO_Init+0x120>
 8000a40:	21c4      	movs	r1, #196	; 0xc4
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <HAL_GPIO_Init+0x154>)
 8000a44:	f005 fee0 	bl	8006808 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	e2df      	b.n	800100e <HAL_GPIO_Init+0x6e6>
 8000a4e:	bf00      	nop
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40021400 	.word	0x40021400
 8000a68:	40021800 	.word	0x40021800
 8000a6c:	40021c00 	.word	0x40021c00
 8000a70:	40022000 	.word	0x40022000
 8000a74:	40022400 	.word	0x40022400
 8000a78:	40022800 	.word	0x40022800
 8000a7c:	080076a8 	.word	0x080076a8
 8000a80:	10110000 	.word	0x10110000
 8000a84:	10210000 	.word	0x10210000
 8000a88:	10310000 	.word	0x10310000
 8000a8c:	10120000 	.word	0x10120000
 8000a90:	10220000 	.word	0x10220000
 8000a94:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000a98:	2201      	movs	r2, #1
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	f040 82a9 	bne.w	8001008 <HAL_GPIO_Init+0x6e0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d004      	beq.n	8000ac8 <HAL_GPIO_Init+0x1a0>
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2b12      	cmp	r3, #18
 8000ac4:	f040 8139 	bne.w	8000d3a <HAL_GPIO_Init+0x412>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	f000 8110 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	691b      	ldr	r3, [r3, #16]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	f000 810b 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f000 8106 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f000 8101 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f000 80fc 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	f000 80f7 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	691b      	ldr	r3, [r3, #16]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	f000 80f2 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	f000 80ed 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	f000 80e8 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	f000 80e3 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	691b      	ldr	r3, [r3, #16]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	f000 80de 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	f000 80d9 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	f000 80d4 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	f000 80cf 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	f000 80ca 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	f000 80c5 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	f000 80c0 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	f000 80bb 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	f000 80b6 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	f000 80b1 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	691b      	ldr	r3, [r3, #16]
 8000b94:	2b05      	cmp	r3, #5
 8000b96:	f000 80ac 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	2b05      	cmp	r3, #5
 8000ba0:	f000 80a7 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	2b05      	cmp	r3, #5
 8000baa:	f000 80a2 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	2b05      	cmp	r3, #5
 8000bb4:	f000 809d 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	2b05      	cmp	r3, #5
 8000bbe:	f000 8098 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	2b05      	cmp	r3, #5
 8000bc8:	f000 8093 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	2b06      	cmp	r3, #6
 8000bd2:	f000 808e 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	f000 8089 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	f000 8084 	beq.w	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	d07f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	691b      	ldr	r3, [r3, #16]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	d07b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	2b07      	cmp	r3, #7
 8000c00:	d077      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	d073      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	2b07      	cmp	r3, #7
 8000c10:	d06f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	2b07      	cmp	r3, #7
 8000c18:	d06b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	2b08      	cmp	r3, #8
 8000c20:	d067      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	691b      	ldr	r3, [r3, #16]
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d063      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d05f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d05b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d057      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	2b08      	cmp	r3, #8
 8000c48:	d053      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d04f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	2b09      	cmp	r3, #9
 8000c58:	d04b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	2b09      	cmp	r3, #9
 8000c60:	d047      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	2b09      	cmp	r3, #9
 8000c68:	d043      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	2b09      	cmp	r3, #9
 8000c70:	d03f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	2b09      	cmp	r3, #9
 8000c78:	d03b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	2b09      	cmp	r3, #9
 8000c80:	d037      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	2b0a      	cmp	r3, #10
 8000c88:	d033      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	2b0a      	cmp	r3, #10
 8000c90:	d02f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	2b0a      	cmp	r3, #10
 8000c98:	d02b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	2b0b      	cmp	r3, #11
 8000ca0:	d027      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	2b0a      	cmp	r3, #10
 8000ca8:	d023      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	2b0b      	cmp	r3, #11
 8000cb0:	d01f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	2b0b      	cmp	r3, #11
 8000cb8:	d01b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	2b0c      	cmp	r3, #12
 8000cc0:	d017      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	2b0c      	cmp	r3, #12
 8000cc8:	d013      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	2b0c      	cmp	r3, #12
 8000cd0:	d00f      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	691b      	ldr	r3, [r3, #16]
 8000cd6:	2b0f      	cmp	r3, #15
 8000cd8:	d00b      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	691b      	ldr	r3, [r3, #16]
 8000cde:	2b0d      	cmp	r3, #13
 8000ce0:	d007      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	2b0a      	cmp	r3, #10
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0x3ca>
 8000cea:	21d5      	movs	r1, #213	; 0xd5
 8000cec:	4887      	ldr	r0, [pc, #540]	; (8000f0c <HAL_GPIO_Init+0x5e4>)
 8000cee:	f005 fd8b 	bl	8006808 <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	08da      	lsrs	r2, r3, #3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3208      	adds	r2, #8
 8000cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	08da      	lsrs	r2, r3, #3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3208      	adds	r2, #8
 8000d34:	69b9      	ldr	r1, [r7, #24]
 8000d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2203      	movs	r2, #3
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0203 	and.w	r2, r3, #3
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d00b      	beq.n	8000d8e <HAL_GPIO_Init+0x466>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d007      	beq.n	8000d8e <HAL_GPIO_Init+0x466>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d82:	2b11      	cmp	r3, #17
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x466>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b12      	cmp	r3, #18
 8000d8c:	d144      	bne.n	8000e18 <HAL_GPIO_Init+0x4f0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00f      	beq.n	8000db6 <HAL_GPIO_Init+0x48e>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d00b      	beq.n	8000db6 <HAL_GPIO_Init+0x48e>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x48e>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x48e>
 8000dae:	21e9      	movs	r1, #233	; 0xe9
 8000db0:	4856      	ldr	r0, [pc, #344]	; (8000f0c <HAL_GPIO_Init+0x5e4>)
 8000db2:	f005 fd29 	bl	8006808 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80d9 	beq.w	8001008 <HAL_GPIO_Init+0x6e0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4a2e      	ldr	r2, [pc, #184]	; (8000f10 <HAL_GPIO_Init+0x5e8>)
 8000e58:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <HAL_GPIO_Init+0x5e8>)
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <HAL_GPIO_Init+0x5e8>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e6e:	4a29      	ldr	r2, [pc, #164]	; (8000f14 <HAL_GPIO_Init+0x5ec>)
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <HAL_GPIO_Init+0x5f0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d052      	beq.n	8000f40 <HAL_GPIO_Init+0x618>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <HAL_GPIO_Init+0x5f4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d031      	beq.n	8000f06 <HAL_GPIO_Init+0x5de>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	; (8000f20 <HAL_GPIO_Init+0x5f8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d02b      	beq.n	8000f02 <HAL_GPIO_Init+0x5da>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <HAL_GPIO_Init+0x5fc>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d025      	beq.n	8000efe <HAL_GPIO_Init+0x5d6>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <HAL_GPIO_Init+0x600>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d01f      	beq.n	8000efa <HAL_GPIO_Init+0x5d2>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <HAL_GPIO_Init+0x604>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d019      	beq.n	8000ef6 <HAL_GPIO_Init+0x5ce>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <HAL_GPIO_Init+0x608>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0x5ca>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_GPIO_Init+0x60c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d00d      	beq.n	8000eee <HAL_GPIO_Init+0x5c6>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_GPIO_Init+0x610>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d007      	beq.n	8000eea <HAL_GPIO_Init+0x5c2>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <HAL_GPIO_Init+0x614>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_GPIO_Init+0x5be>
 8000ee2:	2309      	movs	r3, #9
 8000ee4:	e02d      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000ee6:	230a      	movs	r3, #10
 8000ee8:	e02b      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000eea:	2308      	movs	r3, #8
 8000eec:	e029      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000eee:	2307      	movs	r3, #7
 8000ef0:	e027      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	e025      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	e023      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000efa:	2304      	movs	r3, #4
 8000efc:	e021      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e01f      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e01d      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e01b      	b.n	8000f42 <HAL_GPIO_Init+0x61a>
 8000f0a:	bf00      	nop
 8000f0c:	080076a8 	.word	0x080076a8
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40013800 	.word	0x40013800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40021400 	.word	0x40021400
 8000f30:	40021800 	.word	0x40021800
 8000f34:	40021c00 	.word	0x40021c00
 8000f38:	40022000 	.word	0x40022000
 8000f3c:	40022400 	.word	0x40022400
 8000f40:	2300      	movs	r3, #0
 8000f42:	69fa      	ldr	r2, [r7, #28]
 8000f44:	f002 0203 	and.w	r2, r2, #3
 8000f48:	0092      	lsls	r2, r2, #2
 8000f4a:	4093      	lsls	r3, r2
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f52:	4933      	ldr	r1, [pc, #204]	; (8001020 <HAL_GPIO_Init+0x6f8>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f60:	4b30      	ldr	r3, [pc, #192]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x65c>
        {
          temp |= iocurrent;
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f84:	4a27      	ldr	r2, [pc, #156]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x686>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fae:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x6b0>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd8:	4a12      	ldr	r2, [pc, #72]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x6da>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_GPIO_Init+0x6fc>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	3301      	adds	r3, #1
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	f67f ad41 	bls.w	8000a98 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40013800 	.word	0x40013800
 8001024:	40013c00 	.word	0x40013c00

08001028 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b08f      	sub	sp, #60	; 0x3c
 800102c:	af0a      	add	r7, sp, #40	; 0x28
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e10c      	b.n	8001258 <HAL_PCD_Init+0x230>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001046:	d008      	beq.n	800105a <HAL_PCD_Init+0x32>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a84      	ldr	r2, [pc, #528]	; (8001260 <HAL_PCD_Init+0x238>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d003      	beq.n	800105a <HAL_PCD_Init+0x32>
 8001052:	2190      	movs	r1, #144	; 0x90
 8001054:	4883      	ldr	r0, [pc, #524]	; (8001264 <HAL_PCD_Init+0x23c>)
 8001056:	f005 fbd7 	bl	8006808 <assert_failed>

  hpcd->State = HAL_PCD_STATE_BUSY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f005 fc98 	bl	8006998 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f002 ffc0 	bl	8003ff2 <USB_DisableGlobalInt>

 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	687e      	ldr	r6, [r7, #4]
 800107a:	466d      	mov	r5, sp
 800107c:	f106 0410 	add.w	r4, r6, #16
 8001080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001082:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001088:	e894 0003 	ldmia.w	r4, {r0, r1}
 800108c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001090:	1d33      	adds	r3, r6, #4
 8001092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001094:	6838      	ldr	r0, [r7, #0]
 8001096:	f002 ff49 	bl	8003f2c <USB_CoreInit>

 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 ffb7 	bl	8004014 <USB_SetCurrentMode>

 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	e04c      	b.n	8001146 <HAL_PCD_Init+0x11e>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	3339      	adds	r3, #57	; 0x39
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	b2d8      	uxtb	r0, r3
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4613      	mov	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	3338      	adds	r3, #56	; 0x38
 80010d4:	4602      	mov	r2, r0
 80010d6:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	b298      	uxth	r0, r3
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	333e      	adds	r3, #62	; 0x3e
 80010ec:	4602      	mov	r2, r0
 80010ee:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	333b      	adds	r3, #59	; 0x3b
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	440b      	add	r3, r1
 8001112:	3340      	adds	r3, #64	; 0x40
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	440b      	add	r3, r1
 8001126:	3344      	adds	r3, #68	; 0x44
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	1a9b      	subs	r3, r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	334c      	adds	r3, #76	; 0x4c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 for (i = 0; i < 15 ; i++)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3301      	adds	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b0e      	cmp	r3, #14
 800114a:	d9af      	bls.n	80010ac <HAL_PCD_Init+0x84>
 }

 for (i = 0; i < 15 ; i++)
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	e05a      	b.n	8001208 <HAL_PCD_Init+0x1e0>
 {
   hpcd->OUT_ep[i].is_in = 0;
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	b2d8      	uxtb	r0, r3
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800117e:	4602      	mov	r2, r0
 8001180:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	b298      	uxth	r0, r3
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4613      	mov	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	333e      	adds	r3, #62	; 0x3e
 8001196:	4602      	mov	r2, r0
 8001198:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4613      	mov	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	1a9b      	subs	r3, r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	1a9b      	subs	r3, r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]

   hpcd->Instance->DIEPTXF[i] = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3340      	adds	r3, #64	; 0x40
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
 for (i = 0; i < 15 ; i++)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3301      	adds	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b0e      	cmp	r3, #14
 800120c:	d9a1      	bls.n	8001152 <HAL_PCD_Init+0x12a>
 }

 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	687e      	ldr	r6, [r7, #4]
 8001216:	466d      	mov	r5, sp
 8001218:	f106 0410 	add.w	r4, r6, #16
 800121c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800121e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001224:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001228:	e885 0003 	stmia.w	r5, {r0, r1}
 800122c:	1d33      	adds	r3, r6, #4
 800122e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f002 ff17 	bl	8004064 <USB_DevInit>

 hpcd->State= HAL_PCD_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9

 /* Activate LPM */
 if (hpcd->Init.lpm_enable ==1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	2b01      	cmp	r3, #1
 8001244:	d102      	bne.n	800124c <HAL_PCD_Init+0x224>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f001 f850 	bl	80022ec <HAL_PCDEx_ActivateLPM>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */

 USB_DevDisconnect (hpcd->Instance);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f003 ff0c 	bl	800506e <USB_DevDisconnect>
 return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001260:	40040000 	.word	0x40040000
 8001264:	080076e4 	.word	0x080076e4

08001268 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HAL_PCD_Start+0x16>
 800127a:	2302      	movs	r3, #2
 800127c:	e012      	b.n	80012a4 <HAL_PCD_Start+0x3c>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f003 fed8 	bl	8005040 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f002 fe9b 	bl	8003fd0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HAL_PCD_IRQHandler>:
  * @brief  Handle PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	; 0x30
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	623b      	str	r3, [r7, #32]
  uint32_t i = 0, ep_intr = 0, epint = 0, epnum = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012be:	2300      	movs	r3, #0
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0, temp = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep = NULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  uint32_t hclk = 200000000;
 80012d6:	4b98      	ldr	r3, [pc, #608]	; (8001538 <HAL_PCD_IRQHandler+0x28c>)
 80012d8:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 ff67 	bl	80051b2 <USB_GetMode>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 84e1 	bne.w	8001cae <HAL_PCD_IRQHandler+0xa02>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fed3 	bl	800509c <USB_ReadInterrupts>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 84d7 	beq.w	8001cac <HAL_PCD_IRQHandler+0xa00>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f003 feca 	bl	800509c <USB_ReadInterrupts>
 8001308:	4603      	mov	r3, r0
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b02      	cmp	r3, #2
 8001310:	d103      	bne.n	800131a <HAL_PCD_IRQHandler+0x6e>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2202      	movs	r2, #2
 8001318:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f003 febc 	bl	800509c <USB_ReadInterrupts>
 8001324:	4603      	mov	r3, r0
 8001326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800132a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800132e:	f040 80ed 	bne.w	800150c <HAL_PCD_IRQHandler+0x260>
    {
      epnum = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f003 fec3 	bl	80050c6 <USB_ReadDevAllOutEpInterrupt>
 8001340:	62b8      	str	r0, [r7, #40]	; 0x28

      while ( ep_intr )
 8001342:	e0df      	b.n	8001504 <HAL_PCD_IRQHandler+0x258>
      {
        if (ep_intr & 0x1)
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 80d4 	beq.w	80014f8 <HAL_PCD_IRQHandler+0x24c>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fee3 	bl	8005126 <USB_ReadDevOutEPInterrupt>
 8001360:	61f8      	str	r0, [r7, #28]

          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 8082 	beq.w	8001472 <HAL_PCD_IRQHandler+0x1c6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	015a      	lsls	r2, r3, #5
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	4413      	add	r3, r2
 8001376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800137a:	461a      	mov	r2, r3
 800137c:	2301      	movs	r3, #1
 800137e:	6093      	str	r3, [r2, #8]

            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d111      	bne.n	80013ac <HAL_PCD_IRQHandler+0x100>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d009      	beq.n	80013ac <HAL_PCD_IRQHandler+0x100>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8001398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	6a3b      	ldr	r3, [r7, #32]
 800139e:	4413      	add	r3, r2
 80013a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013a4:	461a      	mov	r2, r3
 80013a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013aa:	6093      	str	r3, [r2, #8]
              }
            }

            if(hpcd->Init.dma_enable == 1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d13c      	bne.n	800142e <HAL_PCD_IRQHandler+0x182>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b8:	4613      	mov	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	1a9b      	subs	r3, r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	0159      	lsls	r1, r3, #5
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	440b      	add	r3, r1
 80013d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013da:	1ad1      	subs	r1, r2, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e0:	4613      	mov	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4403      	add	r3, r0
 80013ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013ee:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001402:	6819      	ldr	r1, [r3, #0]
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4403      	add	r3, r0
 8001412:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4419      	add	r1, r3
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4403      	add	r3, r0
 8001428:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800142c:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f005 fb11 	bl	8006a5c <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d117      	bne.n	8001472 <HAL_PCD_IRQHandler+0x1c6>
            {
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	2b00      	cmp	r3, #0
 8001446:	d114      	bne.n	8001472 <HAL_PCD_IRQHandler+0x1c6>
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144c:	4613      	mov	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d108      	bne.n	8001472 <HAL_PCD_IRQHandler+0x1c6>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800146a:	461a      	mov	r2, r3
 800146c:	2101      	movs	r1, #1
 800146e:	f003 fee5 	bl	800523c <USB_EP0_OutStart>
              }
            }
          }

          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d021      	beq.n	80014c0 <HAL_PCD_IRQHandler+0x214>
          {
            /* setup/out transaction management for Core ID >= 310A */
            if (hpcd->Init.dma_enable == 1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d111      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x1fc>
            {
              if (USBx_OUTEP(0)->DOEPINT & (1 << 15))
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d009      	beq.n	80014a8 <HAL_PCD_IRQHandler+0x1fc>
              {
                CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	015a      	lsls	r2, r3, #5
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	4413      	add	r3, r2
 800149c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a0:	461a      	mov	r2, r3
 80014a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a6:	6093      	str	r3, [r2, #8]
              }
            }

            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f005 fac5 	bl	8006a38 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	015a      	lsls	r2, r3, #5
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ba:	461a      	mov	r2, r3
 80014bc:	2308      	movs	r3, #8
 80014be:	6093      	str	r3, [r2, #8]
          }

          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d008      	beq.n	80014dc <HAL_PCD_IRQHandler+0x230>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	015a      	lsls	r2, r3, #5
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014d6:	461a      	mov	r2, r3
 80014d8:	2310      	movs	r3, #16
 80014da:	6093      	str	r3, [r2, #8]
          }
          /* Clear Status Phase Received interrupt */
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x24c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f2:	461a      	mov	r2, r3
 80014f4:	2320      	movs	r3, #32
 80014f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	3301      	adds	r3, #1
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 80014fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001500:	085b      	lsrs	r3, r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	2b00      	cmp	r3, #0
 8001508:	f47f af1c 	bne.w	8001344 <HAL_PCD_IRQHandler+0x98>
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f003 fdc3 	bl	800509c <USB_ReadInterrupts>
 8001516:	4603      	mov	r3, r0
 8001518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800151c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001520:	f040 80c6 	bne.w	80016b0 <HAL_PCD_IRQHandler+0x404>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f003 fde4 	bl	80050f6 <USB_ReadDevAllInEpInterrupt>
 800152e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24

      while ( ep_intr )
 8001534:	e0b8      	b.n	80016a8 <HAL_PCD_IRQHandler+0x3fc>
 8001536:	bf00      	nop
 8001538:	0bebc200 	.word	0x0bebc200
      {
        if (ep_intr & 0x1) /* In ITR */
 800153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 80aa 	beq.w	800169c <HAL_PCD_IRQHandler+0x3f0>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fe03 	bl	800515e <USB_ReadDevInEPInterrupt>
 8001558:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d05a      	beq.n	800161a <HAL_PCD_IRQHandler+0x36e>
          {
            fifoemptymsk = 0x1 << epnum;
 8001564:	2201      	movs	r2, #1
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001574:	4619      	mov	r1, r3
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800157c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	43db      	mvns	r3, r3
 8001582:	4013      	ands	r3, r2
 8001584:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	015a      	lsls	r2, r3, #5
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	4413      	add	r3, r2
 800158e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001592:	461a      	mov	r2, r3
 8001594:	2301      	movs	r3, #1
 8001596:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d11b      	bne.n	80015d8 <HAL_PCD_IRQHandler+0x32c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a4:	4613      	mov	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	1a9b      	subs	r3, r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	3344      	adds	r3, #68	; 0x44
 80015b0:	6819      	ldr	r1, [r3, #0]
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4403      	add	r3, r0
 80015c0:	3340      	adds	r3, #64	; 0x40
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4419      	add	r1, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4403      	add	r3, r0
 80015d4:	3344      	adds	r3, #68	; 0x44
 80015d6:	6019      	str	r1, [r3, #0]
            }

            HAL_PCD_DataInStageCallback(hpcd, epnum);
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f005 fa57 	bl	8006a92 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d116      	bne.n	800161a <HAL_PCD_IRQHandler+0x36e>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d113      	bne.n	800161a <HAL_PCD_IRQHandler+0x36e>
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	334c      	adds	r3, #76	; 0x4c
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <HAL_PCD_IRQHandler+0x36e>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001612:	461a      	mov	r2, r3
 8001614:	2101      	movs	r1, #1
 8001616:	f003 fe11 	bl	800523c <USB_EP0_OutStart>
              }
            }
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_PCD_IRQHandler+0x38a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	4413      	add	r3, r2
 800162c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001630:	461a      	mov	r2, r3
 8001632:	2308      	movs	r3, #8
 8001634:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0310 	and.w	r3, r3, #16
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <HAL_PCD_IRQHandler+0x3a6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	015a      	lsls	r2, r3, #5
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	4413      	add	r3, r2
 8001648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800164c:	461a      	mov	r2, r3
 800164e:	2310      	movs	r3, #16
 8001650:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <HAL_PCD_IRQHandler+0x3c2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	4413      	add	r3, r2
 8001664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001668:	461a      	mov	r2, r3
 800166a:	2340      	movs	r3, #64	; 0x40
 800166c:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_PCD_IRQHandler+0x3de>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	015a      	lsls	r2, r3, #5
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	4413      	add	r3, r2
 8001680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001684:	461a      	mov	r2, r3
 8001686:	2302      	movs	r3, #2
 8001688:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_PCD_IRQHandler+0x3f0>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8001694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fd43 	bl	8002122 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	3301      	adds	r3, #1
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1;
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	085b      	lsrs	r3, r3, #1
 80016a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 80016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f47f af46 	bne.w	800153c <HAL_PCD_IRQHandler+0x290>
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 fcf1 	bl	800509c <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016c4:	d120      	bne.n	8001708 <HAL_PCD_IRQHandler+0x45c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016cc:	461a      	mov	r2, r3
 80016ce:	6a3b      	ldr	r3, [r7, #32]
 80016d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	6053      	str	r3, [r2, #4]

      if(hpcd->LPM_State == LPM_L1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x44c>
      {
        hpcd->LPM_State = LPM_L0;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016ee:	2100      	movs	r1, #0
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f005 fce5 	bl	80070c0 <HAL_PCDEx_LPM_Callback>
 80016f6:	e002      	b.n	80016fe <HAL_PCD_IRQHandler+0x452>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f005 fa43 	bl	8006b84 <HAL_PCD_ResumeCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001706:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f003 fcc5 	bl	800509c <USB_ReadInterrupts>
 8001712:	4603      	mov	r3, r0
 8001714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800171c:	d10f      	bne.n	800173e <HAL_PCD_IRQHandler+0x492>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d102      	bne.n	8001734 <HAL_PCD_IRQHandler+0x488>
      {

        HAL_PCD_SuspendCallback(hpcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f005 fa00 	bl	8006b34 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800173c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fcaa 	bl	800509c <USB_ReadInterrupts>
 8001748:	4603      	mov	r3, r0
 800174a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800174e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001752:	d11e      	bne.n	8001792 <HAL_PCD_IRQHandler+0x4e6>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175c:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8001764:	2b00      	cmp	r3, #0
 8001766:	d111      	bne.n	800178c <HAL_PCD_IRQHandler+0x4e0>
      {
        hpcd->LPM_State = LPM_L1;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	f003 020f 	and.w	r2, r3, #15
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001782:	2101      	movs	r1, #1
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f005 fc9b 	bl	80070c0 <HAL_PCDEx_LPM_Callback>
 800178a:	e002      	b.n	8001792 <HAL_PCD_IRQHandler+0x4e6>
      }
      else
      {
        HAL_PCD_SuspendCallback(hpcd);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f005 f9d1 	bl	8006b34 <HAL_PCD_SuspendCallback>
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fc80 	bl	800509c <USB_ReadInterrupts>
 800179c:	4603      	mov	r3, r0
 800179e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017a6:	f040 80b0 	bne.w	800190a <HAL_PCD_IRQHandler+0x65e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b0:	461a      	mov	r2, r3
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2110      	movs	r1, #16
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fd9a 	bl	8004300 <USB_FlushTxFifo>

      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d0:	e036      	b.n	8001840 <HAL_PCD_IRQHandler+0x594>
      {
        USBx_INEP(i)->DIEPINT = 0xFF;
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017de:	461a      	mov	r2, r3
 80017e0:	23ff      	movs	r3, #255	; 0xff
 80017e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80017e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e6:	015a      	lsls	r2, r3, #5
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017f0:	4619      	mov	r1, r3
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	015a      	lsls	r2, r3, #5
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	4413      	add	r3, r2
 80017fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001804:	600b      	str	r3, [r1, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001812:	461a      	mov	r2, r3
 8001814:	23ff      	movs	r3, #255	; 0xff
 8001816:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181a:	015a      	lsls	r2, r3, #5
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	4413      	add	r3, r2
 8001820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001824:	4619      	mov	r1, r3
 8001826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001828:	015a      	lsls	r2, r3, #5
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	4413      	add	r3, r2
 800182e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001838:	600b      	str	r3, [r1, #0]
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	3301      	adds	r3, #1
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	429a      	cmp	r2, r3
 8001848:	d8c3      	bhi.n	80017d2 <HAL_PCD_IRQHandler+0x526>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001850:	461a      	mov	r2, r3
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800185e:	461a      	mov	r2, r3
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800186c:	61d3      	str	r3, [r2, #28]

      if(hpcd->Init.use_dedicated_ep1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	2b00      	cmp	r3, #0
 8001874:	d018      	beq.n	80018a8 <HAL_PCD_IRQHandler+0x5fc>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800187c:	461a      	mov	r2, r3
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001888:	f043 030b 	orr.w	r3, r3, #11
 800188c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001896:	461a      	mov	r2, r3
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	f043 030b 	orr.w	r3, r3, #11
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	e015      	b.n	80018d4 <HAL_PCD_IRQHandler+0x628>
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ae:	461a      	mov	r2, r3
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018bc:	6153      	str	r3, [r2, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c4:	461a      	mov	r2, r3
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f043 030b 	orr.w	r3, r3, #11
 80018d2:	6113      	str	r3, [r2, #16]
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018d4:	6a3b      	ldr	r3, [r7, #32]
 80018d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018da:	461a      	mov	r2, r3
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	b2d9      	uxtb	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80018fa:	461a      	mov	r2, r3
 80018fc:	f003 fc9e 	bl	800523c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f003 fbc4 	bl	800509c <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800191a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191e:	f040 80d7 	bne.w	8001ad0 <HAL_PCD_IRQHandler+0x824>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 fc52 	bl	80051d0 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	68d2      	ldr	r2, [r2, #12]
 8001936:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800193a:	60da      	str	r2, [r3, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f002 fd3d 	bl	80043c0 <USB_GetDevSpeed>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10f      	bne.n	800196c <HAL_PCD_IRQHandler+0x6c0>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001958:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6812      	ldr	r2, [r2, #0]
 8001962:	68d2      	ldr	r2, [r2, #12]
 8001964:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	e0a9      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2203      	movs	r2, #3
 8001970:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2240      	movs	r2, #64	; 0x40
 8001976:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8001978:	f001 fabe 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 800197c:	60f8      	str	r0, [r7, #12]

		if((hclk >= 14200000)&&(hclk < 15000000))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4a79      	ldr	r2, [pc, #484]	; (8001b68 <HAL_PCD_IRQHandler+0x8bc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d90c      	bls.n	80019a0 <HAL_PCD_IRQHandler+0x6f4>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	4a78      	ldr	r2, [pc, #480]	; (8001b6c <HAL_PCD_IRQHandler+0x8c0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d808      	bhi.n	80019a0 <HAL_PCD_IRQHandler+0x6f4>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	68d2      	ldr	r2, [r2, #12]
 8001998:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	e08f      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 15000000)&&(hclk < 16000000))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a72      	ldr	r2, [pc, #456]	; (8001b6c <HAL_PCD_IRQHandler+0x8c0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d90c      	bls.n	80019c2 <HAL_PCD_IRQHandler+0x716>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <HAL_PCD_IRQHandler+0x8c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d808      	bhi.n	80019c2 <HAL_PCD_IRQHandler+0x716>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	68d2      	ldr	r2, [r2, #12]
 80019ba:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	e07e      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 16000000)&&(hclk < 17200000))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <HAL_PCD_IRQHandler+0x8c4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d90c      	bls.n	80019e4 <HAL_PCD_IRQHandler+0x738>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4a69      	ldr	r2, [pc, #420]	; (8001b74 <HAL_PCD_IRQHandler+0x8c8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d808      	bhi.n	80019e4 <HAL_PCD_IRQHandler+0x738>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	68d2      	ldr	r2, [r2, #12]
 80019dc:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	e06d      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 17200000)&&(hclk < 18500000))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a63      	ldr	r2, [pc, #396]	; (8001b74 <HAL_PCD_IRQHandler+0x8c8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d90c      	bls.n	8001a06 <HAL_PCD_IRQHandler+0x75a>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a62      	ldr	r2, [pc, #392]	; (8001b78 <HAL_PCD_IRQHandler+0x8cc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d808      	bhi.n	8001a06 <HAL_PCD_IRQHandler+0x75a>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6812      	ldr	r2, [r2, #0]
 80019fc:	68d2      	ldr	r2, [r2, #12]
 80019fe:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	e05c      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 18500000)&&(hclk < 20000000))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4a5b      	ldr	r2, [pc, #364]	; (8001b78 <HAL_PCD_IRQHandler+0x8cc>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d90c      	bls.n	8001a28 <HAL_PCD_IRQHandler+0x77c>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4a5a      	ldr	r2, [pc, #360]	; (8001b7c <HAL_PCD_IRQHandler+0x8d0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d808      	bhi.n	8001a28 <HAL_PCD_IRQHandler+0x77c>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	68d2      	ldr	r2, [r2, #12]
 8001a20:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	e04b      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 20000000)&&(hclk < 21800000))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <HAL_PCD_IRQHandler+0x8d0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d90c      	bls.n	8001a4a <HAL_PCD_IRQHandler+0x79e>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_PCD_IRQHandler+0x8d4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d808      	bhi.n	8001a4a <HAL_PCD_IRQHandler+0x79e>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	68d2      	ldr	r2, [r2, #12]
 8001a42:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	e03a      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 21800000)&&(hclk < 24000000))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4a4c      	ldr	r2, [pc, #304]	; (8001b80 <HAL_PCD_IRQHandler+0x8d4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d90c      	bls.n	8001a6c <HAL_PCD_IRQHandler+0x7c0>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4a4b      	ldr	r2, [pc, #300]	; (8001b84 <HAL_PCD_IRQHandler+0x8d8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d808      	bhi.n	8001a6c <HAL_PCD_IRQHandler+0x7c0>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	68d2      	ldr	r2, [r2, #12]
 8001a64:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	e029      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 24000000)&&(hclk < 27700000))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a45      	ldr	r2, [pc, #276]	; (8001b84 <HAL_PCD_IRQHandler+0x8d8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d90c      	bls.n	8001a8e <HAL_PCD_IRQHandler+0x7e2>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4a44      	ldr	r2, [pc, #272]	; (8001b88 <HAL_PCD_IRQHandler+0x8dc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d808      	bhi.n	8001a8e <HAL_PCD_IRQHandler+0x7e2>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	68d2      	ldr	r2, [r2, #12]
 8001a86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	e018      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else if((hclk >= 27700000)&&(hclk < 32000000))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4a3d      	ldr	r2, [pc, #244]	; (8001b88 <HAL_PCD_IRQHandler+0x8dc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d90c      	bls.n	8001ab0 <HAL_PCD_IRQHandler+0x804>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4a3c      	ldr	r2, [pc, #240]	; (8001b8c <HAL_PCD_IRQHandler+0x8e0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d808      	bhi.n	8001ab0 <HAL_PCD_IRQHandler+0x804>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6812      	ldr	r2, [r2, #0]
 8001aa6:	68d2      	ldr	r2, [r2, #12]
 8001aa8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	e007      	b.n	8001ac0 <HAL_PCD_IRQHandler+0x814>
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	68d2      	ldr	r2, [r2, #12]
 8001aba:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8001abe:	60da      	str	r2, [r3, #12]
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f005 f80e 	bl	8006ae2 <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ace:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 fae1 	bl	800509c <USB_ReadInterrupts>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d174      	bne.n	8001bce <HAL_PCD_IRQHandler+0x922>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	6992      	ldr	r2, [r2, #24]
 8001aee:	f022 0210 	bic.w	r2, r2, #16
 8001af2:	619a      	str	r2, [r3, #24]
      temp = USBx->GRXSTSP;
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	617b      	str	r3, [r7, #20]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 020f 	and.w	r2, r3, #15
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	4413      	add	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	0c5b      	lsrs	r3, r3, #17
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d138      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x8e4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d049      	beq.n	8001bbe <HAL_PCD_IRQHandler+0x912>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	68d9      	ldr	r1, [r3, #12]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	6a38      	ldr	r0, [r7, #32]
 8001b3e:	f003 f951 	bl	8004de4 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b4e:	441a      	add	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	091b      	lsrs	r3, r3, #4
 8001b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b60:	441a      	add	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	619a      	str	r2, [r3, #24]
 8001b66:	e02a      	b.n	8001bbe <HAL_PCD_IRQHandler+0x912>
 8001b68:	00d8acbf 	.word	0x00d8acbf
 8001b6c:	00e4e1bf 	.word	0x00e4e1bf
 8001b70:	00f423ff 	.word	0x00f423ff
 8001b74:	0106737f 	.word	0x0106737f
 8001b78:	011a499f 	.word	0x011a499f
 8001b7c:	01312cff 	.word	0x01312cff
 8001b80:	014ca43f 	.word	0x014ca43f
 8001b84:	016e35ff 	.word	0x016e35ff
 8001b88:	01a6ab1f 	.word	0x01a6ab1f
 8001b8c:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	0c5b      	lsrs	r3, r3, #17
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	2b06      	cmp	r3, #6
 8001b9a:	d110      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x912>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6a38      	ldr	r0, [r7, #32]
 8001ba8:	f003 f91c 	bl	8004de4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	699a      	ldr	r2, [r3, #24]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb8:	441a      	add	r2, r3
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	6992      	ldr	r2, [r2, #24]
 8001bc8:	f042 0210 	orr.w	r2, r2, #16
 8001bcc:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fa62 	bl	800509c <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d106      	bne.n	8001bf0 <HAL_PCD_IRQHandler+0x944>
    {
      HAL_PCD_SOFCallback(hpcd);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f004 ff6f 	bl	8006ac6 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2208      	movs	r2, #8
 8001bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fa51 	bl	800509c <USB_ReadInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c04:	d10a      	bne.n	8001c1c <HAL_PCD_IRQHandler+0x970>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f004 ffd9 	bl	8006bc4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fa3b 	bl	800509c <USB_ReadInterrupts>
 8001c26:	4603      	mov	r3, r0
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c30:	d10a      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x99c>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4619      	mov	r1, r3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f004 ffb1 	bl	8006ba0 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fa25 	bl	800509c <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5c:	d107      	bne.n	8001c6e <HAL_PCD_IRQHandler+0x9c2>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f004 ffc2 	bl	8006be8 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fa12 	bl	800509c <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d115      	bne.n	8001cae <HAL_PCD_IRQHandler+0xa02>
    {
      temp = hpcd->Instance->GOTGINT;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	617b      	str	r3, [r7, #20]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_PCD_IRQHandler+0x9ee>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f004 ffb5 	bl	8006c04 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	6851      	ldr	r1, [r2, #4]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	e000      	b.n	8001cae <HAL_PCD_IRQHandler+0xa02>
      return;
 8001cac:	bf00      	nop
    }
  }
}
 8001cae:	3730      	adds	r7, #48	; 0x30
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_PCD_SetAddress+0x1a>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e00f      	b.n	8001cee <HAL_PCD_SetAddress+0x3a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	78fa      	ldrb	r2, [r7, #3]
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f003 f988 	bl	8004ff4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	4608      	mov	r0, r1
 8001d00:	4611      	mov	r1, r2
 8001d02:	461a      	mov	r2, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	70fb      	strb	r3, [r7, #3]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	803b      	strh	r3, [r7, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8001d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da0b      	bge.n	8001d34 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	3338      	adds	r3, #56	; 0x38
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	e00b      	b.n	8001d4c <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8001d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	09db      	lsrs	r3, r3, #7
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8001d68:	883a      	ldrh	r2, [r7, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	78ba      	ldrb	r2, [r7, #2]
 8001d72:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 8001d86:	78bb      	ldrb	r3, [r7, #2]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d102      	bne.n	8001d92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_PCD_EP_Open+0xaa>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e00e      	b.n	8001dbe <HAL_PCD_EP_Open+0xc8>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68f9      	ldr	r1, [r7, #12]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fb3c 	bl	800442c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x80) == 0x80)
 8001dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da0b      	bge.n	8001df2 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	3338      	adds	r3, #56	; 0x38
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e00b      	b.n	8001e0a <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	701a      	strb	r2, [r3, #0]

  ep->is_in = (0x80 & ep_addr) != 0;
 8001e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	09db      	lsrs	r3, r3, #7
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_PCD_EP_Close+0x6e>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e00e      	b.n	8001e52 <HAL_PCD_EP_Close+0x8c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 fb7a 	bl	800453c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	460b      	mov	r3, r1
 8001e68:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
 8001e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2200      	movs	r2, #0
 8001e98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001e9a:	7afb      	ldrb	r3, [r7, #11]
 8001e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8001eb4:	7afb      	ldrb	r3, [r7, #11]
 8001eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d109      	bne.n	8001ed2 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6979      	ldr	r1, [r7, #20]
 8001ecc:	f002 fdf6 	bl	8004abc <USB_EP0StartXfer>
 8001ed0:	e008      	b.n	8001ee4 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	6979      	ldr	r1, [r7, #20]
 8001ee0:	f002 fba8 	bl	8004634 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	f003 020f 	and.w	r2, r3, #15
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	3338      	adds	r3, #56	; 0x38
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001f5e:	7afb      	ldrb	r3, [r7, #11]
 8001f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d102      	bne.n	8001f78 <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & 0x7F) == 0)
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d109      	bne.n	8001f96 <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	6979      	ldr	r1, [r7, #20]
 8001f90:	f002 fd94 	bl	8004abc <USB_EP0StartXfer>
 8001f94:	e008      	b.n	8001fa8 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6979      	ldr	r1, [r7, #20]
 8001fa4:	f002 fb46 	bl	8004634 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	f003 020f 	and.w	r2, r3, #15
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d901      	bls.n	8001fd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e050      	b.n	8002072 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8001fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da0b      	bge.n	8001ff0 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fde:	4613      	mov	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	3338      	adds	r3, #56	; 0x38
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e009      	b.n	8002004 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 1;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8002016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	09db      	lsrs	r3, r3, #7
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	705a      	strb	r2, [r3, #1]


  __HAL_LOCK(hpcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_PCD_EP_SetStall+0x82>
 8002030:	2302      	movs	r3, #2
 8002032:	e01e      	b.n	8002072 <HAL_PCD_EP_SetStall+0xc0>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68f9      	ldr	r1, [r7, #12]
 8002042:	4618      	mov	r0, r3
 8002044:	f002 fef8 	bl	8004e38 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <HAL_PCD_EP_SetStall+0xb6>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	b2d9      	uxtb	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8002062:	461a      	mov	r2, r3
 8002064:	f003 f8ea 	bl	800523c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;

  if ((ep_addr & 0x0F) > hpcd->Init.dev_endpoints)
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	f003 020f 	and.w	r2, r3, #15
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	d901      	bls.n	8002098 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e040      	b.n	800211a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80 & ep_addr) == 0x80)
 8002098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209c:	2b00      	cmp	r3, #0
 800209e:	da0b      	bge.n	80020b8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	3338      	adds	r3, #56	; 0x38
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	e009      	b.n	80020cc <HAL_PCD_EP_ClrStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	1a9b      	subs	r3, r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
  }

  ep->is_stall = 0;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80020de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	09db      	lsrs	r3, r3, #7
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	705a      	strb	r2, [r3, #1]

  __HAL_LOCK(hpcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_PCD_EP_ClrStall+0x82>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e00e      	b.n	800211a <HAL_PCD_EP_ClrStall+0xa0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68f9      	ldr	r1, [r7, #12]
 800210a:	4618      	mov	r0, r3
 800210c:	f002 ff05 	bl	8004f1a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b08a      	sub	sp, #40	; 0x28
 8002126:	af02      	add	r7, sp, #8
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	3338      	adds	r3, #56	; 0x38
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	429a      	cmp	r2, r3
 8002160:	d202      	bcs.n	8002168 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61fb      	str	r3, [r7, #28]
  }


  len32b = (len + 3) / 4;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	3303      	adds	r3, #3
 800216c:	2b00      	cmp	r3, #0
 800216e:	da00      	bge.n	8002172 <PCD_WriteEmptyTxFifo+0x50>
 8002170:	3303      	adds	r3, #3
 8002172:	109b      	asrs	r3, r3, #2
 8002174:	61bb      	str	r3, [r7, #24]

  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 8002176:	e02e      	b.n	80021d6 <PCD_WriteEmptyTxFifo+0xb4>
          ep->xfer_count < ep->xfer_len &&
            ep->xfer_len != 0)
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	429a      	cmp	r2, r3
 800218c:	d202      	bcs.n	8002194 <PCD_WriteEmptyTxFifo+0x72>
    {
      len = ep->maxpacket;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3) / 4;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3303      	adds	r3, #3
 8002198:	2b00      	cmp	r3, #0
 800219a:	da00      	bge.n	800219e <PCD_WriteEmptyTxFifo+0x7c>
 800219c:	3303      	adds	r3, #3
 800219e:	109b      	asrs	r3, r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]

    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	b298      	uxth	r0, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4603      	mov	r3, r0
 80021b8:	6978      	ldr	r0, [r7, #20]
 80021ba:	f002 fddb 	bl	8004d74 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	441a      	add	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	441a      	add	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	619a      	str	r2, [r3, #24]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d909      	bls.n	8002200 <PCD_WriteEmptyTxFifo+0xde>
          ep->xfer_count < ep->xfer_len &&
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	695b      	ldr	r3, [r3, #20]
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d203      	bcs.n	8002200 <PCD_WriteEmptyTxFifo+0xde>
            ep->xfer_len != 0)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	695b      	ldr	r3, [r3, #20]
          ep->xfer_count < ep->xfer_len &&
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1bb      	bne.n	8002178 <PCD_WriteEmptyTxFifo+0x56>
  }

  if(len <= 0)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	dc10      	bgt.n	8002228 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = 0x1 << epnum;
 8002206:	2201      	movs	r2, #1
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002216:	4619      	mov	r1, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800221e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	4013      	ands	r3, r2
 8002226:	634b      	str	r3, [r1, #52]	; 0x34

  }

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	70fb      	strb	r3, [r7, #3]
 800223e:	4613      	mov	r3, r2
 8002240:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	883a      	ldrh	r2, [r7, #0]
 800225e:	0411      	lsls	r1, r2, #16
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	430a      	orrs	r2, r1
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
 8002266:	e028      	b.n	80022ba <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	0c1b      	lsrs	r3, r3, #16
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4413      	add	r3, r2
 8002274:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8002276:	2300      	movs	r3, #0
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e00d      	b.n	8002298 <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	3340      	adds	r3, #64	; 0x40
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	0c1b      	lsrs	r3, r3, #16
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	4413      	add	r3, r2
 8002290:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	3301      	adds	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	3b01      	subs	r3, #1
 800229e:	429a      	cmp	r2, r3
 80022a0:	dbec      	blt.n	800227c <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	883a      	ldrh	r2, [r7, #0]
 80022ac:	0410      	lsls	r0, r2, #16
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	4302      	orrs	r2, r0
 80022b2:	3340      	adds	r3, #64	; 0x40
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	887a      	ldrh	r2, [r7, #2]
 80022da:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM Feature
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  
  hpcd->lpm_active = ENABLE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 23ec 	strb.w	r2, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_PCDEx_ActivateLPM+0x44>)
 800231c:	4313      	orrs	r3, r2
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	10000003 	.word	0x10000003

08002334 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	4a23      	ldr	r2, [pc, #140]	; (80023cc <HAL_PWREx_EnableOverDrive+0x98>)
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_PWREx_EnableOverDrive+0x98>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_PWREx_EnableOverDrive+0x98>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002356:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002362:	f7fe f943 	bl	80005ec <HAL_GetTick>
 8002366:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002368:	e009      	b.n	800237e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800236a:	f7fe f93f 	bl	80005ec <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002378:	d901      	bls.n	800237e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e022      	b.n	80023c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238a:	d1ee      	bne.n	800236a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800238c:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002396:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002398:	f7fe f928 	bl	80005ec <HAL_GetTick>
 800239c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800239e:	e009      	b.n	80023b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023a0:	f7fe f924 	bl	80005ec <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ae:	d901      	bls.n	80023b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e007      	b.n	80023c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023c0:	d1ee      	bne.n	80023a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40007000 	.word	0x40007000

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80023dc:	2300      	movs	r3, #0
 80023de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e324      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b0f      	cmp	r3, #15
 80023f0:	d904      	bls.n	80023fc <HAL_RCC_OscConfig+0x28>
 80023f2:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80023f6:	4892      	ldr	r0, [pc, #584]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	f004 fa06 	bl	8006808 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 809a 	beq.w	800253e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00e      	beq.n	8002430 <HAL_RCC_OscConfig+0x5c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241a:	d009      	beq.n	8002430 <HAL_RCC_OscConfig+0x5c>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002424:	d004      	beq.n	8002430 <HAL_RCC_OscConfig+0x5c>
 8002426:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800242a:	4885      	ldr	r0, [pc, #532]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800242c:	f004 f9ec 	bl	8006808 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002430:	4b84      	ldr	r3, [pc, #528]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b04      	cmp	r3, #4
 800243a:	d00c      	beq.n	8002456 <HAL_RCC_OscConfig+0x82>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243c:	4b81      	ldr	r3, [pc, #516]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d112      	bne.n	800246e <HAL_RCC_OscConfig+0x9a>
 8002448:	4b7e      	ldr	r3, [pc, #504]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002454:	d10b      	bne.n	800246e <HAL_RCC_OscConfig+0x9a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002456:	4b7b      	ldr	r3, [pc, #492]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d06c      	beq.n	800253c <HAL_RCC_OscConfig+0x168>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d168      	bne.n	800253c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e2e2      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0xb2>
 8002478:	4a72      	ldr	r2, [pc, #456]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800247a:	4b72      	ldr	r3, [pc, #456]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e02e      	b.n	80024e4 <HAL_RCC_OscConfig+0x110>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 800248e:	4a6d      	ldr	r2, [pc, #436]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002490:	4b6c      	ldr	r3, [pc, #432]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4a6a      	ldr	r2, [pc, #424]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800249c:	4b69      	ldr	r3, [pc, #420]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0x110>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0xf8>
 80024b2:	4a64      	ldr	r2, [pc, #400]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80024b4:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4a61      	ldr	r2, [pc, #388]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80024c0:	4b60      	ldr	r3, [pc, #384]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0x110>
 80024cc:	4a5d      	ldr	r2, [pc, #372]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80024ce:	4b5d      	ldr	r3, [pc, #372]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4a5a      	ldr	r2, [pc, #360]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80024da:	4b5a      	ldr	r3, [pc, #360]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7fe f87e 	bl	80005ec <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe f87a 	bl	80005ec <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e296      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b4f      	ldr	r3, [pc, #316]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x120>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe f86a 	bl	80005ec <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x15a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe f866 	bl	80005ec <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e282      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b45      	ldr	r3, [pc, #276]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x148>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8084 	beq.w	8002654 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCC_OscConfig+0x192>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d004      	beq.n	8002566 <HAL_RCC_OscConfig+0x192>
 800255c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002560:	4837      	ldr	r0, [pc, #220]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002562:	f004 f951 	bl	8006808 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b1f      	cmp	r3, #31
 800256c:	d904      	bls.n	8002578 <HAL_RCC_OscConfig+0x1a4>
 800256e:	f240 11ad 	movw	r1, #429	; 0x1ad
 8002572:	4833      	ldr	r0, [pc, #204]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002574:	f004 f948 	bl	8006808 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002578:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <HAL_RCC_OscConfig+0x1c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002584:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d11c      	bne.n	80025ca <HAL_RCC_OscConfig+0x1f6>
 8002590:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d116      	bne.n	80025ca <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_OscConfig+0x1e0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e23f      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4923      	ldr	r1, [pc, #140]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025b6:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c8:	e044      	b.n	8002654 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d023      	beq.n	800261a <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d2:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe f805 	bl	80005ec <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x224>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e6:	f7fe f801 	bl	80005ec <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e21d      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	490f      	ldr	r1, [pc, #60]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
 8002618:	e01c      	b.n	8002654 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7fd ffe1 	bl	80005ec <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262c:	e00c      	b.n	8002648 <HAL_RCC_OscConfig+0x274>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262e:	f7fd ffdd 	bl	80005ec <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d905      	bls.n	8002648 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e1f9      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
 8002640:	0800771c 	.word	0x0800771c
 8002644:	40023800 	.word	0x40023800
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002648:	4b7e      	ldr	r3, [pc, #504]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ec      	bne.n	800262e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d043      	beq.n	80026e8 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_OscConfig+0x2a6>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d004      	beq.n	800267a <HAL_RCC_OscConfig+0x2a6>
 8002670:	f240 11ed 	movw	r1, #493	; 0x1ed
 8002674:	4874      	ldr	r0, [pc, #464]	; (8002848 <HAL_RCC_OscConfig+0x474>)
 8002676:	f004 f8c7 	bl	8006808 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d019      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	4a70      	ldr	r2, [pc, #448]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002684:	4b6f      	ldr	r3, [pc, #444]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268e:	f7fd ffad 	bl	80005ec <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002696:	f7fd ffa9 	bl	80005ec <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e1c5      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a8:	4b66      	ldr	r3, [pc, #408]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x2c2>
 80026b4:	e018      	b.n	80026e8 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b6:	4a63      	ldr	r2, [pc, #396]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026b8:	4b62      	ldr	r3, [pc, #392]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7fd ff93 	bl	80005ec <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x308>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ca:	f7fd ff8f 	bl	80005ec <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1ab      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80bc 	beq.w	800286e <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00c      	beq.n	8002718 <HAL_RCC_OscConfig+0x344>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d008      	beq.n	8002718 <HAL_RCC_OscConfig+0x344>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d004      	beq.n	8002718 <HAL_RCC_OscConfig+0x344>
 800270e:	f240 2117 	movw	r1, #535	; 0x217
 8002712:	484d      	ldr	r0, [pc, #308]	; (8002848 <HAL_RCC_OscConfig+0x474>)
 8002714:	f004 f878 	bl	8006808 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002718:	4b4a      	ldr	r3, [pc, #296]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10d      	bne.n	8002740 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4a47      	ldr	r2, [pc, #284]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	; 0x40
 8002730:	4b44      	ldr	r3, [pc, #272]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800273c:	2301      	movs	r3, #1
 800273e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002740:	4b42      	ldr	r3, [pc, #264]	; (800284c <HAL_RCC_OscConfig+0x478>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d118      	bne.n	800277e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800274c:	4a3f      	ldr	r2, [pc, #252]	; (800284c <HAL_RCC_OscConfig+0x478>)
 800274e:	4b3f      	ldr	r3, [pc, #252]	; (800284c <HAL_RCC_OscConfig+0x478>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002758:	f7fd ff48 	bl	80005ec <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002760:	f7fd ff44 	bl	80005ec <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e160      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002772:	4b36      	ldr	r3, [pc, #216]	; (800284c <HAL_RCC_OscConfig+0x478>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x3c0>
 8002786:	4a2f      	ldr	r2, [pc, #188]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002788:	4b2e      	ldr	r3, [pc, #184]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6713      	str	r3, [r2, #112]	; 0x70
 8002792:	e02d      	b.n	80027f0 <HAL_RCC_OscConfig+0x41c>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10c      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3e2>
 800279c:	4a29      	ldr	r2, [pc, #164]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 800279e:	4b29      	ldr	r3, [pc, #164]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
 80027a8:	4a26      	ldr	r2, [pc, #152]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
 80027b4:	e01c      	b.n	80027f0 <HAL_RCC_OscConfig+0x41c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	2b05      	cmp	r3, #5
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x404>
 80027be:	4a21      	ldr	r2, [pc, #132]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ca:	4a1e      	ldr	r2, [pc, #120]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6713      	str	r3, [r2, #112]	; 0x70
 80027d6:	e00b      	b.n	80027f0 <HAL_RCC_OscConfig+0x41c>
 80027d8:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	f023 0304 	bic.w	r3, r3, #4
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d015      	beq.n	8002824 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fd fef8 	bl	80005ec <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7fd fef4 	bl	80005ec <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e10e      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCC_OscConfig+0x470>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0ee      	beq.n	8002800 <HAL_RCC_OscConfig+0x42c>
 8002822:	e01b      	b.n	800285c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fd fee2 	bl	80005ec <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282a:	e011      	b.n	8002850 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282c:	f7fd fede 	bl	80005ec <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d908      	bls.n	8002850 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e0f8      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	0800771c 	.word	0x0800771c
 800284c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	4b7a      	ldr	r3, [pc, #488]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e7      	bne.n	800282c <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4a76      	ldr	r2, [pc, #472]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 8002864:	4b75      	ldr	r3, [pc, #468]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00c      	beq.n	8002890 <HAL_RCC_OscConfig+0x4bc>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d008      	beq.n	8002890 <HAL_RCC_OscConfig+0x4bc>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d004      	beq.n	8002890 <HAL_RCC_OscConfig+0x4bc>
 8002886:	f240 215b 	movw	r1, #603	; 0x25b
 800288a:	486d      	ldr	r0, [pc, #436]	; (8002a40 <HAL_RCC_OscConfig+0x66c>)
 800288c:	f003 ffbc 	bl	8006808 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80cc 	beq.w	8002a32 <HAL_RCC_OscConfig+0x65e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289a:	4b68      	ldr	r3, [pc, #416]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	f000 80c3 	beq.w	8002a2e <HAL_RCC_OscConfig+0x65a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	f040 80a4 	bne.w	80029fa <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_RCC_OscConfig+0x4fa>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c2:	d004      	beq.n	80028ce <HAL_RCC_OscConfig+0x4fa>
 80028c4:	f44f 7119 	mov.w	r1, #612	; 0x264
 80028c8:	485d      	ldr	r0, [pc, #372]	; (8002a40 <HAL_RCC_OscConfig+0x66c>)
 80028ca:	f003 ff9d 	bl	8006808 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d903      	bls.n	80028de <HAL_RCC_OscConfig+0x50a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	2b3f      	cmp	r3, #63	; 0x3f
 80028dc:	d904      	bls.n	80028e8 <HAL_RCC_OscConfig+0x514>
 80028de:	f240 2165 	movw	r1, #613	; 0x265
 80028e2:	4857      	ldr	r0, [pc, #348]	; (8002a40 <HAL_RCC_OscConfig+0x66c>)
 80028e4:	f003 ff90 	bl	8006808 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	2b31      	cmp	r3, #49	; 0x31
 80028ee:	d904      	bls.n	80028fa <HAL_RCC_OscConfig+0x526>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80028f8:	d904      	bls.n	8002904 <HAL_RCC_OscConfig+0x530>
 80028fa:	f240 2166 	movw	r1, #614	; 0x266
 80028fe:	4850      	ldr	r0, [pc, #320]	; (8002a40 <HAL_RCC_OscConfig+0x66c>)
 8002900:	f003 ff82 	bl	8006808 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	2b02      	cmp	r3, #2
 800290a:	d010      	beq.n	800292e <HAL_RCC_OscConfig+0x55a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	2b04      	cmp	r3, #4
 8002912:	d00c      	beq.n	800292e <HAL_RCC_OscConfig+0x55a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	2b06      	cmp	r3, #6
 800291a:	d008      	beq.n	800292e <HAL_RCC_OscConfig+0x55a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	2b08      	cmp	r3, #8
 8002922:	d004      	beq.n	800292e <HAL_RCC_OscConfig+0x55a>
 8002924:	f240 2167 	movw	r1, #615	; 0x267
 8002928:	4845      	ldr	r0, [pc, #276]	; (8002a40 <HAL_RCC_OscConfig+0x66c>)
 800292a:	f003 ff6d 	bl	8006808 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	2b01      	cmp	r3, #1
 8002934:	d903      	bls.n	800293e <HAL_RCC_OscConfig+0x56a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	2b0f      	cmp	r3, #15
 800293c:	d904      	bls.n	8002948 <HAL_RCC_OscConfig+0x574>
 800293e:	f44f 711a 	mov.w	r1, #616	; 0x268
 8002942:	483f      	ldr	r0, [pc, #252]	; (8002a40 <HAL_RCC_OscConfig+0x66c>)
 8002944:	f003 ff60 	bl	8006808 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	2b01      	cmp	r3, #1
 800294e:	d903      	bls.n	8002958 <HAL_RCC_OscConfig+0x584>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	2b07      	cmp	r3, #7
 8002956:	d904      	bls.n	8002962 <HAL_RCC_OscConfig+0x58e>
 8002958:	f240 216a 	movw	r1, #618	; 0x26a
 800295c:	4838      	ldr	r0, [pc, #224]	; (8002a40 <HAL_RCC_OscConfig+0x66c>)
 800295e:	f003 ff53 	bl	8006808 <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4a36      	ldr	r2, [pc, #216]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 8002964:	4b35      	ldr	r3, [pc, #212]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800296c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fd fe3d 	bl	80005ec <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x5b4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002976:	f7fd fe39 	bl	80005ec <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e055      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002988:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f0      	bne.n	8002976 <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002994:	4929      	ldr	r1, [pc, #164]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	019b      	lsls	r3, r3, #6
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	3b01      	subs	r3, #1
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	061b      	lsls	r3, r3, #24
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	071b      	lsls	r3, r3, #28
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 80029c8:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d2:	f7fd fe0b 	bl	80005ec <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029da:	f7fd fe07 	bl	80005ec <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e023      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x606>
 80029f8:	e01b      	b.n	8002a32 <HAL_RCC_OscConfig+0x65e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7fd fdf1 	bl	80005ec <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fd fded 	bl	80005ec <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e009      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_RCC_OscConfig+0x668>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x63a>
 8002a2c:	e001      	b.n	8002a32 <HAL_RCC_OscConfig+0x65e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_RCC_OscConfig+0x660>
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	0800771c 	.word	0x0800771c

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e18a      	b.n	8002d72 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x28>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b0f      	cmp	r3, #15
 8002a6a:	d904      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x32>
 8002a6c:	f240 21da 	movw	r1, #730	; 0x2da
 8002a70:	4887      	ldr	r0, [pc, #540]	; (8002c90 <HAL_RCC_ClockConfig+0x24c>)
 8002a72:	f003 fec9 	bl	8006808 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d031      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d02e      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d02b      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d028      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d025      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d022      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b06      	cmp	r3, #6
 8002a9e:	d01f      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b07      	cmp	r3, #7
 8002aa4:	d01c      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d019      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b09      	cmp	r3, #9
 8002ab0:	d016      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b0a      	cmp	r3, #10
 8002ab6:	d013      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b0b      	cmp	r3, #11
 8002abc:	d010      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b0d      	cmp	r3, #13
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b0e      	cmp	r3, #14
 8002ace:	d007      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b0f      	cmp	r3, #15
 8002ad4:	d004      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x9c>
 8002ad6:	f240 21db 	movw	r1, #731	; 0x2db
 8002ada:	486d      	ldr	r0, [pc, #436]	; (8002c90 <HAL_RCC_ClockConfig+0x24c>)
 8002adc:	f003 fe94 	bl	8006808 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b6c      	ldr	r3, [pc, #432]	; (8002c94 <HAL_RCC_ClockConfig+0x250>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 020f 	and.w	r2, r3, #15
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d210      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4969      	ldr	r1, [pc, #420]	; (8002c94 <HAL_RCC_ClockConfig+0x250>)
 8002af0:	4b68      	ldr	r3, [pc, #416]	; (8002c94 <HAL_RCC_ClockConfig+0x250>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 020f 	bic.w	r2, r3, #15
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <HAL_RCC_ClockConfig+0x250>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 020f 	and.w	r2, r3, #15
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e130      	b.n	8002d72 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d049      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b28:	4a5b      	ldr	r2, [pc, #364]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002b2a:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b40:	4a55      	ldr	r2, [pc, #340]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002b42:	4b55      	ldr	r3, [pc, #340]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d024      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x15a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b80      	cmp	r3, #128	; 0x80
 8002b5a:	d020      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x15a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b90      	cmp	r3, #144	; 0x90
 8002b62:	d01c      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x15a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2ba0      	cmp	r3, #160	; 0xa0
 8002b6a:	d018      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x15a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2bb0      	cmp	r3, #176	; 0xb0
 8002b72:	d014      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x15a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2bc0      	cmp	r3, #192	; 0xc0
 8002b7a:	d010      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x15a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2bd0      	cmp	r3, #208	; 0xd0
 8002b82:	d00c      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x15a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2be0      	cmp	r3, #224	; 0xe0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x15a>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2bf0      	cmp	r3, #240	; 0xf0
 8002b92:	d004      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x15a>
 8002b94:	f240 21ff 	movw	r1, #767	; 0x2ff
 8002b98:	483d      	ldr	r0, [pc, #244]	; (8002c90 <HAL_RCC_ClockConfig+0x24c>)
 8002b9a:	f003 fe35 	bl	8006808 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b9e:	493e      	ldr	r1, [pc, #248]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002ba0:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d051      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00c      	beq.n	8002bde <HAL_RCC_ClockConfig+0x19a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d008      	beq.n	8002bde <HAL_RCC_ClockConfig+0x19a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d004      	beq.n	8002bde <HAL_RCC_ClockConfig+0x19a>
 8002bd4:	f240 3106 	movw	r1, #774	; 0x306
 8002bd8:	482d      	ldr	r0, [pc, #180]	; (8002c90 <HAL_RCC_ClockConfig+0x24c>)
 8002bda:	f003 fe15 	bl	8006808 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d115      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0bd      	b.n	8002d72 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfe:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0b1      	b.n	8002d72 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e0a9      	b.n	8002d72 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c1e:	491e      	ldr	r1, [pc, #120]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 0203 	bic.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c30:	f7fd fcdc 	bl	80005ec <HAL_GetTick>
 8002c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c38:	f7fd fcd8 	bl	80005ec <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e091      	b.n	8002d72 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	4b12      	ldr	r3, [pc, #72]	; (8002c98 <HAL_RCC_ClockConfig+0x254>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 020c 	and.w	r2, r3, #12
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d1eb      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <HAL_RCC_ClockConfig+0x250>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 020f 	and.w	r2, r3, #15
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d916      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6e:	4909      	ldr	r1, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x250>)
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <HAL_RCC_ClockConfig+0x250>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 020f 	bic.w	r2, r3, #15
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_RCC_ClockConfig+0x250>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 020f 	and.w	r2, r3, #15
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d007      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e070      	b.n	8002d72 <HAL_RCC_ClockConfig+0x32e>
 8002c90:	0800771c 	.word	0x0800771c
 8002c94:	40023c00 	.word	0x40023c00
 8002c98:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d025      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d018      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x29e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb8:	d013      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x29e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x29e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002ccc:	d009      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x29e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002cd6:	d004      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x29e>
 8002cd8:	f240 3143 	movw	r1, #835	; 0x343
 8002cdc:	4827      	ldr	r0, [pc, #156]	; (8002d7c <HAL_RCC_ClockConfig+0x338>)
 8002cde:	f003 fd93 	bl	8006808 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce2:	4927      	ldr	r1, [pc, #156]	; (8002d80 <HAL_RCC_ClockConfig+0x33c>)
 8002ce4:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <HAL_RCC_ClockConfig+0x33c>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d026      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d018      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x2f6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d10:	d013      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x2f6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002d1a:	d00e      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x2f6>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002d24:	d009      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x2f6>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002d2e:	d004      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x2f6>
 8002d30:	f240 314a 	movw	r1, #842	; 0x34a
 8002d34:	4811      	ldr	r0, [pc, #68]	; (8002d7c <HAL_RCC_ClockConfig+0x338>)
 8002d36:	f003 fd67 	bl	8006808 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d3a:	4911      	ldr	r1, [pc, #68]	; (8002d80 <HAL_RCC_ClockConfig+0x33c>)
 8002d3c:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_RCC_ClockConfig+0x33c>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d4e:	f000 f81d 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002d52:	4601      	mov	r1, r0
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x33c>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x340>)
 8002d60:	5cd3      	ldrb	r3, [r2, r3]
 8002d62:	fa21 f303 	lsr.w	r3, r1, r3
 8002d66:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <HAL_RCC_ClockConfig+0x344>)
 8002d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f7fd fbfa 	bl	8000564 <HAL_InitTick>

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	0800771c 	.word	0x0800771c
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08007808 	.word	0x08007808
 8002d88:	20000118 	.word	0x20000118

08002d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d94:	2200      	movs	r2, #0
 8002d96:	60fa      	str	r2, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	617a      	str	r2, [r7, #20]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8002da0:	2200      	movs	r2, #0
 8002da2:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da4:	4a51      	ldr	r2, [pc, #324]	; (8002eec <HAL_RCC_GetSysClockFreq+0x160>)
 8002da6:	6892      	ldr	r2, [r2, #8]
 8002da8:	f002 020c 	and.w	r2, r2, #12
 8002dac:	2a04      	cmp	r2, #4
 8002dae:	d007      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002db0:	2a08      	cmp	r2, #8
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002db4:	2a00      	cmp	r2, #0
 8002db6:	f040 8090 	bne.w	8002eda <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dba:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002dbc:	613b      	str	r3, [r7, #16]
       break;
 8002dbe:	e08f      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dc0:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002dc2:	613b      	str	r3, [r7, #16]
      break;
 8002dc4:	e08c      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc6:	4a49      	ldr	r2, [pc, #292]	; (8002eec <HAL_RCC_GetSysClockFreq+0x160>)
 8002dc8:	6852      	ldr	r2, [r2, #4]
 8002dca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002dce:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dd0:	4a46      	ldr	r2, [pc, #280]	; (8002eec <HAL_RCC_GetSysClockFreq+0x160>)
 8002dd2:	6852      	ldr	r2, [r2, #4]
 8002dd4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002dd8:	2a00      	cmp	r2, #0
 8002dda:	d023      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ddc:	4b43      	ldr	r3, [pc, #268]	; (8002eec <HAL_RCC_GetSysClockFreq+0x160>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	f04f 0400 	mov.w	r4, #0
 8002de6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	ea03 0301 	and.w	r3, r3, r1
 8002df2:	ea04 0402 	and.w	r4, r4, r2
 8002df6:	4a3f      	ldr	r2, [pc, #252]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002df8:	fb02 f104 	mul.w	r1, r2, r4
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	fb02 f203 	mul.w	r2, r2, r3
 8002e02:	440a      	add	r2, r1
 8002e04:	493b      	ldr	r1, [pc, #236]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002e06:	fba3 0101 	umull	r0, r1, r3, r1
 8002e0a:	1853      	adds	r3, r2, r1
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f04f 0400 	mov.w	r4, #0
 8002e14:	461a      	mov	r2, r3
 8002e16:	4623      	mov	r3, r4
 8002e18:	f7fd fa0e 	bl	8000238 <__aeabi_uldivmod>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	460c      	mov	r4, r1
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e04c      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e24:	4a31      	ldr	r2, [pc, #196]	; (8002eec <HAL_RCC_GetSysClockFreq+0x160>)
 8002e26:	6852      	ldr	r2, [r2, #4]
 8002e28:	0992      	lsrs	r2, r2, #6
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002e34:	f04f 0600 	mov.w	r6, #0
 8002e38:	ea05 0501 	and.w	r5, r5, r1
 8002e3c:	ea06 0602 	and.w	r6, r6, r2
 8002e40:	4629      	mov	r1, r5
 8002e42:	4632      	mov	r2, r6
 8002e44:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8002e48:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8002e4c:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8002e50:	4651      	mov	r1, sl
 8002e52:	465a      	mov	r2, fp
 8002e54:	46aa      	mov	sl, r5
 8002e56:	46b3      	mov	fp, r6
 8002e58:	4655      	mov	r5, sl
 8002e5a:	465e      	mov	r6, fp
 8002e5c:	1b4d      	subs	r5, r1, r5
 8002e5e:	eb62 0606 	sbc.w	r6, r2, r6
 8002e62:	4629      	mov	r1, r5
 8002e64:	4632      	mov	r2, r6
 8002e66:	0194      	lsls	r4, r2, #6
 8002e68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e6c:	018b      	lsls	r3, r1, #6
 8002e6e:	1a5b      	subs	r3, r3, r1
 8002e70:	eb64 0402 	sbc.w	r4, r4, r2
 8002e74:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8002e78:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002e7c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002e80:	4643      	mov	r3, r8
 8002e82:	464c      	mov	r4, r9
 8002e84:	4655      	mov	r5, sl
 8002e86:	465e      	mov	r6, fp
 8002e88:	18ed      	adds	r5, r5, r3
 8002e8a:	eb46 0604 	adc.w	r6, r6, r4
 8002e8e:	462b      	mov	r3, r5
 8002e90:	4634      	mov	r4, r6
 8002e92:	02a2      	lsls	r2, r4, #10
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	029b      	lsls	r3, r3, #10
 8002ea0:	603b      	str	r3, [r7, #0]
 8002ea2:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f04f 0400 	mov.w	r4, #0
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	f7fd f9c0 	bl	8000238 <__aeabi_uldivmod>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	460c      	mov	r4, r1
 8002ebc:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_GetSysClockFreq+0x160>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	613b      	str	r3, [r7, #16]
      break;
 8002ed8:	e002      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002edc:	613b      	str	r3, [r7, #16]
      break;
 8002ede:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee0:	693b      	ldr	r3, [r7, #16]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	00f42400 	.word	0x00f42400
 8002ef4:	00b71b00 	.word	0x00b71b00

08002ef8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	20000118 	.word	0x20000118

08002f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 8097 	bne.w	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 8090 	bne.w	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 8089 	bne.w	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f040 8082 	bne.w	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d17b      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d175      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d16f      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d169      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d163      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d15d      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d157      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d151      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d14b      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d145      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d13f      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d139      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d133      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d12d      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d127      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d121      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d11b      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d115      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10f      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d103      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8003060:	2183      	movs	r1, #131	; 0x83
 8003062:	48a3      	ldr	r0, [pc, #652]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003064:	f003 fbd0 	bl	8006808 <assert_failed>
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01f      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	2b00      	cmp	r3, #0
 800307a:	d008      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003080:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003084:	d003      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003086:	2189      	movs	r1, #137	; 0x89
 8003088:	4899      	ldr	r0, [pc, #612]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308a:	f003 fbbd 	bl	8006808 <assert_failed>
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800308e:	4a99      	ldr	r2, [pc, #612]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003090:	4b98      	ldr	r3, [pc, #608]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003098:	6093      	str	r3, [r2, #8]
 800309a:	4996      	ldr	r1, [pc, #600]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800309c:	4b95      	ldr	r3, [pc, #596]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      plli2sused = 1; 
 80030b0:	2301      	movs	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d02e      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d012      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d0:	d00d      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030da:	d008      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030e4:	d003      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
 80030e6:	2199      	movs	r1, #153	; 0x99
 80030e8:	4881      	ldr	r0, [pc, #516]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ea:	f003 fb8d 	bl	8006808 <assert_failed>
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030ee:	4981      	ldr	r1, [pc, #516]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030f0:	4b80      	ldr	r3, [pc, #512]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800310c:	d101      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      plli2sused = 1; 
 800310e:	2301      	movs	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      pllsaiused = 1; 
 800311a:	2301      	movs	r3, #1
 800311c:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d02e      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d012      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313a:	d00d      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003144:	d008      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800314e:	d003      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8003150:	21ad      	movs	r1, #173	; 0xad
 8003152:	4867      	ldr	r0, [pc, #412]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003154:	f003 fb58 	bl	8006808 <assert_failed>
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003158:	4966      	ldr	r1, [pc, #408]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800315a:	4b66      	ldr	r3, [pc, #408]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800315c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003176:	d101      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x26c>
    {
      plli2sused = 1; 
 8003178:	2301      	movs	r3, #1
 800317a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x278>
    {
      pllsaiused = 1; 
 8003184:	2301      	movs	r3, #1
 8003186:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {    
      plli2sused = 1; 
 8003194:	2301      	movs	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8188 	beq.w	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031ae:	f000 80ec 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ba:	f000 80e6 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4a4d      	ldr	r2, [pc, #308]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	f000 80e0 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	f000 80da 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a49      	ldr	r2, [pc, #292]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	f000 80d4 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	4a47      	ldr	r2, [pc, #284]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	f000 80ce 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a45      	ldr	r2, [pc, #276]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	f000 80c8 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	4a43      	ldr	r2, [pc, #268]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	f000 80c2 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a41      	ldr	r2, [pc, #260]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800320c:	4293      	cmp	r3, r2
 800320e:	f000 80bc 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a3f      	ldr	r2, [pc, #252]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8003218:	4293      	cmp	r3, r2
 800321a:	f000 80b6 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a3d      	ldr	r2, [pc, #244]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8003224:	4293      	cmp	r3, r2
 8003226:	f000 80b0 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a3b      	ldr	r2, [pc, #236]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	f000 80aa 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a39      	ldr	r2, [pc, #228]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 800323c:	4293      	cmp	r3, r2
 800323e:	f000 80a4 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	4a37      	ldr	r2, [pc, #220]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8003248:	4293      	cmp	r3, r2
 800324a:	f000 809e 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4a35      	ldr	r2, [pc, #212]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8003254:	4293      	cmp	r3, r2
 8003256:	f000 8098 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	4a33      	ldr	r2, [pc, #204]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	f000 8092 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a31      	ldr	r2, [pc, #196]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 800326c:	4293      	cmp	r3, r2
 800326e:	f000 808c 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8003278:	4293      	cmp	r3, r2
 800327a:	f000 8086 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a2d      	ldr	r2, [pc, #180]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8003284:	4293      	cmp	r3, r2
 8003286:	f000 8080 	beq.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a2b      	ldr	r2, [pc, #172]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d07a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a29      	ldr	r2, [pc, #164]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d075      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	4a28      	ldr	r2, [pc, #160]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d070      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d06b      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a25      	ldr	r2, [pc, #148]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d066      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4a23      	ldr	r2, [pc, #140]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d061      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a22      	ldr	r2, [pc, #136]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d05c      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	4a20      	ldr	r2, [pc, #128]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d057      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a1f      	ldr	r2, [pc, #124]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d052      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d04d      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80032ee:	e039      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x454>
 80032f0:	08007754 	.word	0x08007754
 80032f4:	40023800 	.word	0x40023800
 80032f8:	00020300 	.word	0x00020300
 80032fc:	00030300 	.word	0x00030300
 8003300:	00040300 	.word	0x00040300
 8003304:	00050300 	.word	0x00050300
 8003308:	00060300 	.word	0x00060300
 800330c:	00070300 	.word	0x00070300
 8003310:	00080300 	.word	0x00080300
 8003314:	00090300 	.word	0x00090300
 8003318:	000a0300 	.word	0x000a0300
 800331c:	000b0300 	.word	0x000b0300
 8003320:	000c0300 	.word	0x000c0300
 8003324:	000d0300 	.word	0x000d0300
 8003328:	000e0300 	.word	0x000e0300
 800332c:	000f0300 	.word	0x000f0300
 8003330:	00100300 	.word	0x00100300
 8003334:	00110300 	.word	0x00110300
 8003338:	00120300 	.word	0x00120300
 800333c:	00130300 	.word	0x00130300
 8003340:	00140300 	.word	0x00140300
 8003344:	00150300 	.word	0x00150300
 8003348:	00160300 	.word	0x00160300
 800334c:	00170300 	.word	0x00170300
 8003350:	00180300 	.word	0x00180300
 8003354:	00190300 	.word	0x00190300
 8003358:	001a0300 	.word	0x001a0300
 800335c:	001b0300 	.word	0x001b0300
 8003360:	001c0300 	.word	0x001c0300
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003368:	4a44      	ldr	r2, [pc, #272]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00d      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	4a43      	ldr	r2, [pc, #268]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d008      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	4a41      	ldr	r2, [pc, #260]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d003      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003382:	21c8      	movs	r1, #200	; 0xc8
 8003384:	4840      	ldr	r0, [pc, #256]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x578>)
 8003386:	f003 fa3f 	bl	8006808 <assert_failed>
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	4a40      	ldr	r2, [pc, #256]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800338c:	4b3f      	ldr	r3, [pc, #252]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003394:	6413      	str	r3, [r2, #64]	; 0x40
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033a2:	4a3b      	ldr	r2, [pc, #236]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80033a4:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ae:	f7fd f91d 	bl	80005ec <HAL_GetTick>
 80033b2:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033b4:	e009      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7fd f919 	bl	80005ec <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d902      	bls.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
      {
        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	f000 bda8 	b.w	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x100a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ca:	4b31      	ldr	r3, [pc, #196]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0ef      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033d6:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d036      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d02f      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033f4:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033fe:	4a23      	ldr	r2, [pc, #140]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003400:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800340a:	4a20      	ldr	r2, [pc, #128]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800340c:	4b1f      	ldr	r3, [pc, #124]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003414:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003416:	4a1d      	ldr	r2, [pc, #116]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800341c:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d015      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fd f8e0 	bl	80005ec <HAL_GetTick>
 800342c:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342e:	e00b      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003430:	f7fd f8dc 	bl	80005ec <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	f241 3288 	movw	r2, #5000	; 0x1388
 800343e:	4293      	cmp	r3, r2
 8003440:	d902      	bls.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x538>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	f000 bd69 	b.w	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x100a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0ed      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x520>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003460:	d11a      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003462:	480a      	ldr	r0, [pc, #40]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8003472:	400b      	ands	r3, r1
 8003474:	4313      	orrs	r3, r2
 8003476:	6083      	str	r3, [r0, #8]
 8003478:	e014      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800347a:	bf00      	nop
 800347c:	001d0300 	.word	0x001d0300
 8003480:	001e0300 	.word	0x001e0300
 8003484:	001f0300 	.word	0x001f0300
 8003488:	08007754 	.word	0x08007754
 800348c:	40023800 	.word	0x40023800
 8003490:	40007000 	.word	0x40007000
 8003494:	0ffffcff 	.word	0x0ffffcff
 8003498:	4aa8      	ldr	r2, [pc, #672]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800349a:	4ba8      	ldr	r3, [pc, #672]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034a2:	6093      	str	r3, [r2, #8]
 80034a4:	49a5      	ldr	r1, [pc, #660]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034a6:	4ba5      	ldr	r3, [pc, #660]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b2:	4313      	orrs	r3, r2
 80034b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d01e      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x5ce>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d2:	d004      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x5ce>
 80034d4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80034d8:	4899      	ldr	r0, [pc, #612]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80034da:	f003 f995 	bl	8006808 <assert_failed>
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034de:	4a97      	ldr	r2, [pc, #604]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034e0:	4b96      	ldr	r3, [pc, #600]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034ee:	4993      	ldr	r1, [pc, #588]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034f0:	4b92      	ldr	r3, [pc, #584]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80034f2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01d      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x638>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00e      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d009      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003526:	d004      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8003528:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800352c:	4884      	ldr	r0, [pc, #528]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800352e:	f003 f96b 	bl	8006808 <assert_failed>
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003532:	4982      	ldr	r1, [pc, #520]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8003534:	4b81      	ldr	r3, [pc, #516]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01d      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x680>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00e      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003560:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003564:	d009      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800356a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800356e:	d004      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003570:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003574:	4872      	ldr	r0, [pc, #456]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8003576:	f003 f947 	bl	8006808 <assert_failed>
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800357a:	4970      	ldr	r1, [pc, #448]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01d      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ac:	d009      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035b6:	d004      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80035b8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80035bc:	4860      	ldr	r0, [pc, #384]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80035be:	f003 f923 	bl	8006808 <assert_failed>
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035c2:	495e      	ldr	r1, [pc, #376]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80035c4:	4b5d      	ldr	r3, [pc, #372]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01d      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x710>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f4:	d009      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035fe:	d004      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8003600:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8003604:	484e      	ldr	r0, [pc, #312]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8003606:	f003 f8ff 	bl	8006808 <assert_failed>
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800360a:	494c      	ldr	r1, [pc, #304]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800360c:	4b4b      	ldr	r3, [pc, #300]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01f      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	2b00      	cmp	r3, #0
 8003632:	d010      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003638:	2b01      	cmp	r3, #1
 800363a:	d00c      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	2b03      	cmp	r3, #3
 8003642:	d008      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	2b02      	cmp	r3, #2
 800364a:	d004      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800364c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8003650:	483b      	ldr	r0, [pc, #236]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8003652:	f003 f8d9 	bl	8006808 <assert_failed>
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003656:	4939      	ldr	r1, [pc, #228]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 8003658:	4b38      	ldr	r3, [pc, #224]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 800365a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365e:	f023 0203 	bic.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01f      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x792>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003684:	2b04      	cmp	r3, #4
 8003686:	d00c      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x792>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368c:	2b0c      	cmp	r3, #12
 800368e:	d008      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x792>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	2b08      	cmp	r3, #8
 8003696:	d004      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x792>
 8003698:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800369c:	4828      	ldr	r0, [pc, #160]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 800369e:	f003 f8b3 	bl	8006808 <assert_failed>
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a2:	4926      	ldr	r1, [pc, #152]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80036a4:	4b25      	ldr	r3, [pc, #148]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	f023 020c 	bic.w	r2, r3, #12
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01f      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d010      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d00c      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d8:	2b30      	cmp	r3, #48	; 0x30
 80036da:	d008      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d004      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80036e4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80036e8:	4815      	ldr	r0, [pc, #84]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80036ea:	f003 f88d 	bl	8006808 <assert_failed>
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036ee:	4913      	ldr	r1, [pc, #76]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x82c>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800370c:	2b00      	cmp	r3, #0
 800370e:	d024      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x84a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003714:	2b00      	cmp	r3, #0
 8003716:	d015      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d011      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003724:	2bc0      	cmp	r3, #192	; 0xc0
 8003726:	d00d      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	2b80      	cmp	r3, #128	; 0x80
 800372e:	d009      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8003730:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 8003736:	f003 f867 	bl	8006808 <assert_failed>
 800373a:	e003      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x834>
 800373c:	40023800 	.word	0x40023800
 8003740:	08007754 	.word	0x08007754
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003744:	49af      	ldr	r1, [pc, #700]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003746:	4baf      	ldr	r3, [pc, #700]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003762:	2b00      	cmp	r3, #0
 8003764:	d022      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x89c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	2b00      	cmp	r3, #0
 800376c:	d013      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003776:	d00e      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003780:	d009      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800378a:	d004      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800378c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8003790:	489d      	ldr	r0, [pc, #628]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003792:	f003 f839 	bl	8006808 <assert_failed>
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003796:	499b      	ldr	r1, [pc, #620]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003798:	4b9a      	ldr	r3, [pc, #616]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d022      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d013      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c8:	d00e      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037d2:	d009      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037dc:	d004      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80037de:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80037e2:	4889      	ldr	r0, [pc, #548]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80037e4:	f003 f810 	bl	8006808 <assert_failed>
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037e8:	4986      	ldr	r1, [pc, #536]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80037ea:	4b86      	ldr	r3, [pc, #536]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d022      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x940>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d013      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381a:	d00e      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003824:	d009      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382e:	d004      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8003830:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8003834:	4874      	ldr	r0, [pc, #464]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003836:	f002 ffe7 	bl	8006808 <assert_failed>
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800383a:	4972      	ldr	r1, [pc, #456]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 800383c:	4b71      	ldr	r3, [pc, #452]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d022      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x992>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	2b00      	cmp	r3, #0
 8003862:	d013      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800386c:	d00e      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003872:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003876:	d009      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003880:	d004      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003882:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8003886:	4860      	ldr	r0, [pc, #384]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003888:	f002 ffbe 	bl	8006808 <assert_failed>
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800388c:	495d      	ldr	r1, [pc, #372]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 800388e:	4b5d      	ldr	r3, [pc, #372]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 8003890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003894:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d018      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038b6:	d008      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d004      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80038c0:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80038c4:	4850      	ldr	r0, [pc, #320]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80038c6:	f002 ff9f 	bl	8006808 <assert_failed>
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038ca:	494e      	ldr	r1, [pc, #312]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80038cc:	4b4d      	ldr	r3, [pc, #308]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01f      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f4:	d008      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
 80038fe:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8003902:	4841      	ldr	r0, [pc, #260]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003904:	f002 ff80 	bl	8006808 <assert_failed>
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003908:	493e      	ldr	r1, [pc, #248]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 800390a:	4b3e      	ldr	r3, [pc, #248]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 800390c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003910:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003926:	d101      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      pllsaiused = 1; 
 8003928:	2301      	movs	r3, #1
 800392a:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1; 
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d022      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xa6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393c:	2b00      	cmp	r3, #0
 800393e:	d013      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003948:	d00e      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003952:	d009      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003958:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800395c:	d004      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 800395e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8003962:	4829      	ldr	r0, [pc, #164]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8003964:	f002 ff50 	bl	8006808 <assert_failed>
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003968:	4926      	ldr	r1, [pc, #152]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 800396c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003970:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01b      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003994:	d009      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 80039a0:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 80039a4:	4818      	ldr	r0, [pc, #96]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80039a6:	f002 ff2f 	bl	8006808 <assert_failed>
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039aa:	4916      	ldr	r1, [pc, #88]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80039ac:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)  
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d021      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb02>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d8:	d009      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xade>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d004      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xade>
 80039e4:	f240 11bb 	movw	r1, #443	; 0x1bb
 80039e8:	4807      	ldr	r0, [pc, #28]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80039ea:	f002 ff0d 	bl	8006808 <assert_failed>
    
    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80039ee:	4905      	ldr	r1, [pc, #20]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a00:	e004      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8003a02:	bf00      	nop
 8003a04:	40023800 	.word	0x40023800
 8003a08:	08007754 	.word	0x08007754
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
	
  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d01b      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xb46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a32:	d004      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003a34:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003a38:	4826      	ldr	r0, [pc, #152]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003a3a:	f002 fee5 	bl	8006808 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a3e:	4926      	ldr	r1, [pc, #152]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003a40:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d01b      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a76:	d004      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003a78:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003a7c:	4815      	ldr	r0, [pc, #84]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003a7e:	f002 fec3 	bl	8006808 <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a82:	4915      	ldr	r1, [pc, #84]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d005      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003aa8:	f040 8154 	bne.w	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xe44>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8003aac:	4a0a      	ldr	r2, [pc, #40]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ab6:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab8:	f7fc fd98 	bl	80005ec <HAL_GetTick>
 8003abc:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003abe:	e00d      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ac0:	f7fc fd94 	bl	80005ec <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d906      	bls.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e223      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x100a>
 8003ad2:	bf00      	nop
 8003ad4:	08007754 	.word	0x08007754
 8003ad8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003adc:	4ba9      	ldr	r3, [pc, #676]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1eb      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
      }
    }
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b31      	cmp	r3, #49	; 0x31
 8003aee:	d904      	bls.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xbea>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003af8:	d904      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003afa:	f240 11eb 	movw	r1, #491	; 0x1eb
 8003afe:	48a2      	ldr	r0, [pc, #648]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003b00:	f002 fe82 	bl	8006808 <assert_failed>
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d02e      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d12a      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xc5e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d903      	bls.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b07      	cmp	r3, #7
 8003b26:	d904      	bls.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003b28:	f240 11f1 	movw	r1, #497	; 0x1f1
 8003b2c:	4896      	ldr	r0, [pc, #600]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003b2e:	f002 fe6b 	bl	8006808 <assert_failed>
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b32:	4b94      	ldr	r3, [pc, #592]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b40:	4b90      	ldr	r3, [pc, #576]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b46:	0e1b      	lsrs	r3, r3, #24
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b4e:	498d      	ldr	r1, [pc, #564]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	019a      	lsls	r2, r3, #6
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	061b      	lsls	r3, r3, #24
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	071b      	lsls	r3, r3, #28
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b82:	d00a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xc8a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d048      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd12>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b98:	d143      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d903      	bls.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	2b0f      	cmp	r3, #15
 8003ba8:	d904      	bls.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8003baa:	f240 2101 	movw	r1, #513	; 0x201
 8003bae:	4876      	ldr	r0, [pc, #472]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003bb0:	f002 fe2a 	bl	8006808 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d904      	bls.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xcbe>
 8003bc4:	f240 2103 	movw	r1, #515	; 0x203
 8003bc8:	486f      	ldr	r0, [pc, #444]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003bca:	f002 fe1d 	bl	8006808 <assert_failed>
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bce:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bdc:	4b69      	ldr	r3, [pc, #420]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be2:	0f1b      	lsrs	r3, r3, #28
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bea:	4966      	ldr	r1, [pc, #408]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	019a      	lsls	r2, r3, #6
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	071b      	lsls	r3, r3, #28
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8003c0a:	495e      	ldr	r1, [pc, #376]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003c0c:	4b5d      	ldr	r3, [pc, #372]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c12:	f023 021f 	bic.w	r2, r3, #31
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d032      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d010      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d00c      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d008      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d004      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xd48>
 8003c4e:	f240 2116 	movw	r1, #534	; 0x216
 8003c52:	484d      	ldr	r0, [pc, #308]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003c54:	f002 fdd8 	bl	8006808 <assert_failed>
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c58:	4b4a      	ldr	r3, [pc, #296]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5e:	0e1b      	lsrs	r3, r3, #24
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6c:	0f1b      	lsrs	r3, r3, #28
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c74:	4943      	ldr	r1, [pc, #268]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	019a      	lsls	r2, r3, #6
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	431a      	orrs	r2, r3
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	061b      	lsls	r3, r3, #24
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	071b      	lsls	r3, r3, #28
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d040      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xe12>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xdba>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d00c      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xdba>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d008      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xdba>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d004      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xdba>
 8003cc0:	f240 2125 	movw	r1, #549	; 0x225
 8003cc4:	4830      	ldr	r0, [pc, #192]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003cc6:	f002 fd9f 	bl	8006808 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d903      	bls.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xdca>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b07      	cmp	r3, #7
 8003cd8:	d904      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 8003cda:	f240 2126 	movw	r1, #550	; 0x226
 8003cde:	482a      	ldr	r0, [pc, #168]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003ce0:	f002 fd92 	bl	8006808 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d903      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b0f      	cmp	r3, #15
 8003cf2:	d904      	bls.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8003cf4:	f240 2127 	movw	r1, #551	; 0x227
 8003cf8:	4823      	ldr	r0, [pc, #140]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
 8003cfa:	f002 fd85 	bl	8006808 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cfe:	4921      	ldr	r1, [pc, #132]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	019a      	lsls	r2, r3, #6
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	041b      	lsls	r3, r3, #16
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	061b      	lsls	r3, r3, #24
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	071b      	lsls	r3, r3, #28
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d22:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d24:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d2c:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2e:	f7fc fc5d 	bl	80005ec <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xe38>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d36:	f7fc fc59 	bl	80005ec <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b64      	cmp	r3, #100	; 0x64
 8003d42:	d901      	bls.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xe38>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e0e8      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x100a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d48:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	f040 80de 	bne.w	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1008>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8003d5c:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe74>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d68:	f7fc fc40 	bl	80005ec <HAL_GetTick>
 8003d6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d6e:	e00d      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d70:	f7fc fc3c 	bl	80005ec <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d906      	bls.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e0cb      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x100a>
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800
 8003d88:	08007754 	.word	0x08007754
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d8c:	4b65      	ldr	r3, [pc, #404]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d98:	d0ea      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xe60>
      }
    } 
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b31      	cmp	r3, #49	; 0x31
 8003da0:	d904      	bls.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003daa:	d904      	bls.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xea6>
 8003dac:	f240 2155 	movw	r1, #597	; 0x255
 8003db0:	485d      	ldr	r0, [pc, #372]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1018>)
 8003db2:	f002 fd29 	bl	8006808 <assert_failed>
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xeba>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xece>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d048      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xf58>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d144      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xf58>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d903      	bls.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xede>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	d904      	bls.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xee8>
 8003dee:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8003df2:	484d      	ldr	r0, [pc, #308]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1018>)
 8003df4:	f002 fd08 	bl	8006808 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xef8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d904      	bls.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xf02>
 8003e08:	f240 215e 	movw	r1, #606	; 0x25e
 8003e0c:	4846      	ldr	r0, [pc, #280]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1018>)
 8003e0e:	f002 fcfb 	bl	8006808 <assert_failed>
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e12:	4b44      	ldr	r3, [pc, #272]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e20:	4b40      	ldr	r3, [pc, #256]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e26:	0f1b      	lsrs	r3, r3, #28
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e2e:	493d      	ldr	r1, [pc, #244]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	019a      	lsls	r2, r3, #6
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	071b      	lsls	r3, r3, #28
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e4e:	4935      	ldr	r1, [pc, #212]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003e50:	4b34      	ldr	r3, [pc, #208]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e56:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d037      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7c:	d132      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d010      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xf98>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xf98>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d008      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xf98>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d004      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xf98>
 8003e9e:	f240 2171 	movw	r1, #625	; 0x271
 8003ea2:	4821      	ldr	r0, [pc, #132]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1018>)
 8003ea4:	f002 fcb0 	bl	8006808 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	0e1b      	lsrs	r3, r3, #24
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebc:	0f1b      	lsrs	r3, r3, #28
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ec4:	4917      	ldr	r1, [pc, #92]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	019a      	lsls	r2, r3, #6
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	041b      	lsls	r3, r3, #16
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	061b      	lsls	r3, r3, #24
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	071b      	lsls	r3, r3, #28
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ee4:	4a0f      	ldr	r2, [pc, #60]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eee:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef0:	f7fc fb7c 	bl	80005ec <HAL_GetTick>
 8003ef4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xffa>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ef8:	f7fc fb78 	bl	80005ec <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xffa>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e007      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x100a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1014>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f16:	d1ef      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
      }
    }
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800
 8003f28:	08007754 	.word	0x08007754

08003f2c <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b082      	sub	sp, #8
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	f107 0014 	add.w	r0, r7, #20
 8003f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d11e      	bne.n	8003f82 <USB_CoreInit+0x56>
  {

    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <USB_CoreInit+0xa0>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1)
 8003f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f001 f9a4 	bl	80052c8 <USB_CoreReset>
 8003f80:	e00c      	b.n	8003f9c <USB_CoreInit+0x70>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f001 f99a 	bl	80052c8 <USB_CoreReset>

    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(cfg.dma_enable == ENABLE)
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d10b      	bne.n	8003fba <USB_CoreInit+0x8e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f043 0206 	orr.w	r2, r3, #6
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fc6:	b004      	add	sp, #16
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	ffbdffbf 	.word	0xffbdffbf

08003fd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f023 0201 	bic.w	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	60da      	str	r2, [r3, #12]

  if ( mode == USB_OTG_HOST_MODE)
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d106      	bne.n	8004040 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	e008      	b.n	8004052 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d105      	bne.n	8004052 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50);
 8004052:	2032      	movs	r0, #50	; 0x32
 8004054:	f7fc fad6 	bl	8000604 <HAL_Delay>

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004064:	b084      	sub	sp, #16
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	f107 001c 	add.w	r0, r7, #28
 8004072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38

  if (cfg.vbus_sensing_enable == 0)
 8004086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004088:	2b00      	cmp	r3, #0
 800408a:	d111      	bne.n	80040b0 <USB_DevInit+0x4c>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable*/
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	601a      	str	r2, [r3, #0]
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040b6:	461a      	mov	r2, r3
 80040b8:	2300      	movs	r3, #0
 80040ba:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6013      	str	r3, [r2, #0]

  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10c      	bne.n	80040ee <USB_DevInit+0x8a>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <USB_DevInit+0x80>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 80040da:	2100      	movs	r1, #0
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f957 	bl	8004390 <USB_SetDevSpeed>
 80040e2:	e018      	b.n	8004116 <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80040e4:	2101      	movs	r1, #1
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f952 	bl	8004390 <USB_SetDevSpeed>
 80040ec:	e013      	b.n	8004116 <USB_DevInit+0xb2>
    }
  }

  else if(cfg.phy_itface  == USB_OTG_HS_EMBEDDED_PHY)
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d10c      	bne.n	800410e <USB_DevInit+0xaa>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <USB_DevInit+0xa0>
    {
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 80040fa:	2100      	movs	r1, #0
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f947 	bl	8004390 <USB_SetDevSpeed>
 8004102:	e008      	b.n	8004116 <USB_DevInit+0xb2>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8004104:	2101      	movs	r1, #1
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f942 	bl	8004390 <USB_SetDevSpeed>
 800410c:	e003      	b.n	8004116 <USB_DevInit+0xb2>
  }

  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 800410e:	2103      	movs	r1, #3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f93d 	bl	8004390 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8004116:	2110      	movs	r1, #16
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f8f1 	bl	8004300 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f914 	bl	800434c <USB_FlushRxFifo>

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412a:	461a      	mov	r2, r3
 800412c:	2300      	movs	r3, #0
 800412e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	461a      	mov	r2, r3
 8004138:	2300      	movs	r3, #0
 800413a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	461a      	mov	r2, r3
 8004144:	f04f 33ff 	mov.w	r3, #4294967295
 8004148:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004150:	461a      	mov	r2, r3
 8004152:	2300      	movs	r3, #0
 8004154:	61d3      	str	r3, [r2, #28]

  for (i = 0; i < cfg.dev_endpoints; i++)
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e034      	b.n	80041c6 <USB_DevInit+0x162>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800416e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004172:	d10a      	bne.n	800418a <USB_DevInit+0x126>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	461a      	mov	r2, r3
 8004182:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	e008      	b.n	800419c <USB_DevInit+0x138>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	461a      	mov	r2, r3
 8004198:	2300      	movs	r3, #0
 800419a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	461a      	mov	r2, r3
 80041aa:	2300      	movs	r3, #0
 80041ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ba:	461a      	mov	r2, r3
 80041bc:	23ff      	movs	r3, #255	; 0xff
 80041be:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d8c6      	bhi.n	800415c <USB_DevInit+0xf8>
  }

  for (i = 0; i < cfg.dev_endpoints; i++)
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	e034      	b.n	800423e <USB_DevInit+0x1da>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ea:	d10a      	bne.n	8004202 <USB_DevInit+0x19e>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e008      	b.n	8004214 <USB_DevInit+0x1b0>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420e:	461a      	mov	r2, r3
 8004210:	2300      	movs	r3, #0
 8004212:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004220:	461a      	mov	r2, r3
 8004222:	2300      	movs	r3, #0
 8004224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	461a      	mov	r2, r3
 8004234:	23ff      	movs	r3, #255	; 0xff
 8004236:	6093      	str	r3, [r2, #8]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3301      	adds	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	429a      	cmp	r2, r3
 8004244:	d8c6      	bhi.n	80041d4 <USB_DevInit+0x170>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424c:	461a      	mov	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800425a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1)
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	2b01      	cmp	r3, #1
 8004260:	d115      	bne.n	800428e <USB_DevInit+0x22a>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004268:	461a      	mov	r2, r3
 800426a:	4b21      	ldr	r3, [pc, #132]	; (80042f0 <USB_DevInit+0x28c>)
 800426c:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004274:	4619      	mov	r1, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800427e:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <USB_DevInit+0x290>)
 8004280:	4313      	orrs	r3, r2
 8004282:	630b      	str	r3, [r1, #48]	; 0x30

    i= USBx_DEVICE->DTHRCTL;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800429a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d105      	bne.n	80042ae <USB_DevInit+0x24a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f043 0210 	orr.w	r2, r3, #16
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <USB_DevInit+0x294>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);

  if(cfg.Sof_enable)
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <USB_DevInit+0x268>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f043 0208 	orr.w	r2, r3, #8
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 80042cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d105      	bne.n	80042de <USB_DevInit+0x27a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <USB_DevInit+0x298>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6193      	str	r3, [r2, #24]
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042ea:	b004      	add	sp, #16
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	00800100 	.word	0x00800100
 80042f4:	00010003 	.word	0x00010003
 80042f8:	803c3800 	.word	0x803c3800
 80042fc:	40000004 	.word	0x40000004

08004300 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	019b      	lsls	r3, r3, #6
 8004312:	f043 0220 	orr.w	r2, r3, #32
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3301      	adds	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a09      	ldr	r2, [pc, #36]	; (8004348 <USB_FlushTxFifo+0x48>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e006      	b.n	800433a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b20      	cmp	r3, #32
 8004336:	d0f0      	beq.n	800431a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	00030d40 	.word	0x00030d40

0800434c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2210      	movs	r2, #16
 800435c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3301      	adds	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a09      	ldr	r2, [pc, #36]	; (800438c <USB_FlushRxFifo+0x40>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e006      	b.n	800437e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b10      	cmp	r3, #16
 800437a:	d0f0      	beq.n	800435e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	00030d40 	.word	0x00030d40

08004390 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a2:	4619      	mov	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	73fb      	strb	r3, [r7, #15]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 0306 	and.w	r3, r3, #6
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 80043dc:	2300      	movs	r3, #0
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	e01c      	b.n	800441c <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 0306 	and.w	r3, r3, #6
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d007      	beq.n	8004402 <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 80043fe:	2b06      	cmp	r3, #6
 8004400:	d102      	bne.n	8004408 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 8004402:	2303      	movs	r3, #3
 8004404:	73fb      	strb	r3, [r7, #15]
 8004406:	e009      	b.n	800441c <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0306 	and.w	r3, r3, #6
 8004414:	2b04      	cmp	r3, #4
 8004416:	d101      	bne.n	800441c <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8004418:	2302      	movs	r3, #2
 800441a:	73fb      	strb	r3, [r7, #15]
  }

  return speed;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	785b      	ldrb	r3, [r3, #1]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d13c      	bne.n	80044b8 <USB_ActivateEndpoint+0x8c>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004444:	4619      	mov	r1, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444c:	69da      	ldr	r2, [r3, #28]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	2301      	movs	r3, #1
 8004456:	4083      	lsls	r3, r0
 8004458:	b29b      	uxth	r3, r3
 800445a:	4313      	orrs	r3, r2
 800445c:	61cb      	str	r3, [r1, #28]

    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d158      	bne.n	8004528 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004484:	4618      	mov	r0, r3
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800449e:	6839      	ldr	r1, [r7, #0]
 80044a0:	78c9      	ldrb	r1, [r1, #3]
 80044a2:	0489      	lsls	r1, r1, #18
 80044a4:	430b      	orrs	r3, r1
        ((ep->num) << 22 ) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP));
 80044a6:	6839      	ldr	r1, [r7, #0]
 80044a8:	7809      	ldrb	r1, [r1, #0]
 80044aa:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80044ac:	430b      	orrs	r3, r1
 80044ae:	431a      	orrs	r2, r3
 80044b0:	4b21      	ldr	r3, [pc, #132]	; (8004538 <USB_ActivateEndpoint+0x10c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	6003      	str	r3, [r0, #0]
 80044b6:	e037      	b.n	8004528 <USB_ActivateEndpoint+0xfc>
    }

  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044be:	4619      	mov	r1, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	7812      	ldrb	r2, [r2, #0]
 80044cc:	4610      	mov	r0, r2
 80044ce:	2201      	movs	r2, #1
 80044d0:	4082      	lsls	r2, r0
 80044d2:	0412      	lsls	r2, r2, #16
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11b      	bne.n	8004528 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	015a      	lsls	r2, r3, #5
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	4618      	mov	r0, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	78c9      	ldrb	r1, [r1, #3]
 800451c:	0489      	lsls	r1, r1, #18
 800451e:	430b      	orrs	r3, r1
 8004520:	431a      	orrs	r2, r3
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <USB_ActivateEndpoint+0x10c>)
 8004524:	4313      	orrs	r3, r2
 8004526:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	10008000 	.word	0x10008000

0800453c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	785b      	ldrb	r3, [r3, #1]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d135      	bne.n	80045ba <USB_DeactivateEndpoint+0x7e>
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004554:	4619      	mov	r1, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	2301      	movs	r3, #1
 8004566:	4083      	lsls	r3, r0
 8004568:	b29b      	uxth	r3, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	4013      	ands	r3, r2
 800456e:	63cb      	str	r3, [r1, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004576:	4619      	mov	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	2301      	movs	r3, #1
 8004588:	4083      	lsls	r3, r0
 800458a:	b29b      	uxth	r3, r3
 800458c:	43db      	mvns	r3, r3
 800458e:	4013      	ands	r3, r2
 8004590:	61cb      	str	r3, [r1, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a0:	4619      	mov	r1, r3
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045b6:	600b      	str	r3, [r1, #0]
 80045b8:	e034      	b.n	8004624 <USB_DeactivateEndpoint+0xe8>
  }
  else
  {
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c0:	4619      	mov	r1, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	2301      	movs	r3, #1
 80045d2:	4083      	lsls	r3, r0
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	43db      	mvns	r3, r3
 80045d8:	4013      	ands	r3, r2
 80045da:	63cb      	str	r3, [r1, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e2:	4619      	mov	r1, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	2301      	movs	r3, #1
 80045f4:	4083      	lsls	r3, r0
 80045f6:	041b      	lsls	r3, r3, #16
 80045f8:	43db      	mvns	r3, r3
 80045fa:	4013      	ands	r3, r2
 80045fc:	61cb      	str	r3, [r1, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	4619      	mov	r1, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004622:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	4613      	mov	r3, r2
 8004640:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	82fb      	strh	r3, [r7, #22]

  /* IN endpoint */
  if (ep->is_in == 1)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	2b01      	cmp	r3, #1
 800464c:	f040 8148 	bne.w	80048e0 <USB_EPStartXfer+0x2ac>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d139      	bne.n	80046cc <USB_EPStartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	4619      	mov	r1, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	4b96      	ldr	r3, [pc, #600]	; (80048d4 <USB_EPStartXfer+0x2a0>)
 800467a:	4013      	ands	r3, r2
 800467c:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468c:	4619      	mov	r1, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b2:	4619      	mov	r1, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	4b84      	ldr	r3, [pc, #528]	; (80048d8 <USB_EPStartXfer+0x2a4>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	610b      	str	r3, [r1, #16]
 80046ca:	e084      	b.n	80047d6 <USB_EPStartXfer+0x1a2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046da:	4619      	mov	r1, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	4b7a      	ldr	r3, [pc, #488]	; (80048d8 <USB_EPStartXfer+0x2a4>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	4619      	mov	r1, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	4b70      	ldr	r3, [pc, #448]	; (80048d4 <USB_EPStartXfer+0x2a0>)
 8004714:	4013      	ands	r3, r2
 8004716:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004726:	4618      	mov	r0, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	6959      	ldr	r1, [r3, #20]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	440b      	add	r3, r1
 8004742:	1e59      	subs	r1, r3, #1
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	fbb1 f3f3 	udiv	r3, r1, r3
 800474c:	04d9      	lsls	r1, r3, #19
 800474e:	4b63      	ldr	r3, [pc, #396]	; (80048dc <USB_EPStartXfer+0x2a8>)
 8004750:	400b      	ands	r3, r1
 8004752:	4313      	orrs	r3, r2
 8004754:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	4619      	mov	r1, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477e:	4313      	orrs	r3, r2
 8004780:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	78db      	ldrb	r3, [r3, #3]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d125      	bne.n	80047d6 <USB_EPStartXfer+0x1a2>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004798:	4619      	mov	r1, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80047ae:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29));
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047be:	4619      	mov	r1, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047d4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1)
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d10b      	bne.n	80047f4 <USB_EPStartXfer+0x1c0>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	461a      	mov	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	6153      	str	r3, [r2, #20]
 80047f2:	e016      	b.n	8004822 <USB_EPStartXfer+0x1ee>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	78db      	ldrb	r3, [r3, #3]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d012      	beq.n	8004822 <USB_EPStartXfer+0x1ee>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0)
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00e      	beq.n	8004822 <USB_EPStartXfer+0x1ee>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	4619      	mov	r1, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	4610      	mov	r0, r2
 800481a:	2201      	movs	r2, #1
 800481c:	4082      	lsls	r2, r0
 800481e:	4313      	orrs	r3, r2
 8004820:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	78db      	ldrb	r3, [r3, #3]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d12e      	bne.n	8004888 <USB_EPStartXfer+0x254>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d113      	bne.n	8004862 <USB_EPStartXfer+0x22e>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	4619      	mov	r1, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800485e:	600b      	str	r3, [r1, #0]
 8004860:	e012      	b.n	8004888 <USB_EPStartXfer+0x254>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004870:	4619      	mov	r1, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004886:	600b      	str	r3, [r1, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	015a      	lsls	r2, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	4413      	add	r3, r2
 8004892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004896:	4619      	mov	r1, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048ac:	600b      	str	r3, [r1, #0]

    if (ep->type == EP_TYPE_ISOC)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	78db      	ldrb	r3, [r3, #3]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	f040 80f7 	bne.w	8004aa6 <USB_EPStartXfer+0x472>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	68d9      	ldr	r1, [r3, #12]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781a      	ldrb	r2, [r3, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	b298      	uxth	r0, r3
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	4603      	mov	r3, r0
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fa51 	bl	8004d74 <USB_WritePacket>
 80048d2:	e0e8      	b.n	8004aa6 <USB_EPStartXfer+0x472>
 80048d4:	e007ffff 	.word	0xe007ffff
 80048d8:	fff80000 	.word	0xfff80000
 80048dc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ee:	4619      	mov	r1, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	4b6b      	ldr	r3, [pc, #428]	; (8004ab0 <USB_EPStartXfer+0x47c>)
 8004902:	4013      	ands	r3, r2
 8004904:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004914:	4619      	mov	r1, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	4b63      	ldr	r3, [pc, #396]	; (8004ab4 <USB_EPStartXfer+0x480>)
 8004928:	4013      	ands	r3, r2
 800492a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d129      	bne.n	8004988 <USB_EPStartXfer+0x354>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004942:	4619      	mov	r1, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495c:	4313      	orrs	r3, r2
 800495e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496e:	4619      	mov	r1, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004984:	610b      	str	r3, [r1, #16]
 8004986:	e03a      	b.n	80049fe <USB_EPStartXfer+0x3ca>
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	695a      	ldr	r2, [r3, #20]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4413      	add	r3, r2
 8004992:	1e5a      	subs	r2, r3, #1
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ac:	4619      	mov	r1, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	8afb      	ldrh	r3, [r7, #22]
 80049c0:	04db      	lsls	r3, r3, #19
 80049c2:	4618      	mov	r0, r3
 80049c4:	4b3c      	ldr	r3, [pc, #240]	; (8004ab8 <USB_EPStartXfer+0x484>)
 80049c6:	4003      	ands	r3, r0
 80049c8:	4313      	orrs	r3, r2
 80049ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049da:	4618      	mov	r0, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	8af9      	ldrh	r1, [r7, #22]
 80049f2:	fb01 f303 	mul.w	r3, r1, r3
 80049f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fa:	4313      	orrs	r3, r2
 80049fc:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1)
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d10a      	bne.n	8004a1a <USB_EPStartXfer+0x3e6>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	461a      	mov	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	6153      	str	r3, [r2, #20]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	78db      	ldrb	r3, [r3, #3]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d12e      	bne.n	8004a80 <USB_EPStartXfer+0x44c>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d113      	bne.n	8004a5a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a40:	4619      	mov	r1, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a56:	600b      	str	r3, [r1, #0]
 8004a58:	e012      	b.n	8004a80 <USB_EPStartXfer+0x44c>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a68:	4619      	mov	r1, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8e:	4619      	mov	r1, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aa4:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	fff80000 	.word	0xfff80000
 8004ab4:	e007ffff 	.word	0xe007ffff
 8004ab8:	1ff80000 	.word	0x1ff80000

08004abc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	f040 80cd 	bne.w	8004c6e <USB_EP0StartXfer+0x1b2>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d139      	bne.n	8004b50 <USB_EP0StartXfer+0x94>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aea:	4619      	mov	r1, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	4b9b      	ldr	r3, [pc, #620]	; (8004d6c <USB_EP0StartXfer+0x2b0>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	4619      	mov	r1, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b26:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b36:	4619      	mov	r1, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	4b89      	ldr	r3, [pc, #548]	; (8004d70 <USB_EP0StartXfer+0x2b4>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	610b      	str	r3, [r1, #16]
 8004b4e:	e058      	b.n	8004c02 <USB_EP0StartXfer+0x146>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	4619      	mov	r1, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6e:	691a      	ldr	r2, [r3, #16]
 8004b70:	4b7f      	ldr	r3, [pc, #508]	; (8004d70 <USB_EP0StartXfer+0x2b4>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b84:	4619      	mov	r1, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	4b75      	ldr	r3, [pc, #468]	; (8004d6c <USB_EP0StartXfer+0x2b0>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	610b      	str	r3, [r1, #16]

      if(ep->xfer_len > ep->maxpacket)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	695a      	ldr	r2, [r3, #20]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d903      	bls.n	8004bb0 <USB_EP0StartXfer+0xf4>
      {
        ep->xfer_len = ep->maxpacket;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bd4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	4619      	mov	r1, r3
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	610b      	str	r3, [r1, #16]

    }

    if (dma == 1)
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d10b      	bne.n	8004c20 <USB_EP0StartXfer+0x164>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	461a      	mov	r2, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	6153      	str	r3, [r2, #20]
 8004c1e:	e012      	b.n	8004c46 <USB_EP0StartXfer+0x18a>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00e      	beq.n	8004c46 <USB_EP0StartXfer+0x18a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2e:	4619      	mov	r1, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4083      	lsls	r3, r0
 8004c42:	4313      	orrs	r3, r2
 8004c44:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	4619      	mov	r1, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c6a:	600b      	str	r3, [r1, #0]
 8004c6c:	e077      	b.n	8004d5e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <USB_EP0StartXfer+0x2b4>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <USB_EP0StartXfer+0x2b0>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <USB_EP0StartXfer+0x20e>
    {
      ep->xfer_len = ep->maxpacket;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19));
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	4619      	mov	r1, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cee:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	4619      	mov	r1, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	610b      	str	r3, [r1, #16]


    if (dma == 1)
 8004d1c:	79fb      	ldrb	r3, [r7, #7]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d10a      	bne.n	8004d38 <USB_EP0StartXfer+0x27c>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	461a      	mov	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	6153      	str	r3, [r2, #20]
    }

    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d46:	4619      	mov	r1, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d5c:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr
 8004d6c:	e007ffff 	.word	0xe007ffff
 8004d70:	fff80000 	.word	0xfff80000

08004d74 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4611      	mov	r1, r2
 8004d80:	461a      	mov	r2, r3
 8004d82:	460b      	mov	r3, r1
 8004d84:	71fb      	strb	r3, [r7, #7]
 8004d86:	4613      	mov	r3, r2
 8004d88:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b= 0 , i= 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]

  if (dma == 0)
 8004d92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d11d      	bne.n	8004dd6 <USB_WritePacket+0x62>
  {
    count32b =  (len + 3) / 4;
 8004d9a:	88bb      	ldrh	r3, [r7, #4]
 8004d9c:	3303      	adds	r3, #3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	da00      	bge.n	8004da4 <USB_WritePacket+0x30>
 8004da2:	3303      	adds	r3, #3
 8004da4:	109b      	asrs	r3, r3, #2
 8004da6:	613b      	str	r3, [r7, #16]
    for (i = 0; i < count32b; i++, src += 4)
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e00f      	b.n	8004dce <USB_WritePacket+0x5a>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8004dae:	79fb      	ldrb	r3, [r7, #7]
 8004db0:	031a      	lsls	r2, r3, #12
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6013      	str	r3, [r2, #0]
    for (i = 0; i < count32b; i++, src += 4)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	3304      	adds	r3, #4
 8004dcc:	60bb      	str	r3, [r7, #8]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d3eb      	bcc.n	8004dae <USB_WritePacket+0x3a>
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	3303      	adds	r3, #3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	da00      	bge.n	8004e00 <USB_ReadPacket+0x1c>
 8004dfe:	3303      	adds	r3, #3
 8004e00:	109b      	asrs	r3, r3, #2
 8004e02:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 8004e04:	2300      	movs	r3, #0
 8004e06:	617b      	str	r3, [r7, #20]
 8004e08:	e00b      	b.n	8004e22 <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	60bb      	str	r3, [r7, #8]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d3ef      	bcc.n	8004e0a <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	785b      	ldrb	r3, [r3, #1]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d130      	bne.n	8004eac <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	db12      	blt.n	8004e84 <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e82:	600b      	str	r3, [r1, #0]
    }
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e92:	4619      	mov	r1, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ea8:	600b      	str	r3, [r1, #0]
 8004eaa:	e02f      	b.n	8004f0c <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	db12      	blt.n	8004ee6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ece:	4619      	mov	r1, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ee4:	600b      	str	r3, [r1, #0]
    }
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f0a:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	785b      	ldrb	r3, [r3, #1]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d12e      	bne.n	8004f8a <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f50:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	78db      	ldrb	r3, [r3, #3]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d003      	beq.n	8004f62 <USB_EPClearStall+0x48>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	78db      	ldrb	r3, [r3, #3]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d141      	bne.n	8004fe6 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f70:	4619      	mov	r1, r3
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f86:	600b      	str	r3, [r1, #0]
 8004f88:	e02d      	b.n	8004fe6 <USB_EPClearStall+0xcc>
    }
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	4619      	mov	r1, r3
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fae:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	78db      	ldrb	r3, [r3, #3]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d003      	beq.n	8004fc0 <USB_EPClearStall+0xa6>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	78db      	ldrb	r3, [r3, #3]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d112      	bne.n	8004fe6 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	4619      	mov	r1, r3
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	600b      	str	r3, [r1, #0]
    }
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005006:	461a      	mov	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005014:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501c:	4619      	mov	r1, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800504e:	461a      	mov	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f023 0302 	bic.w	r3, r3, #2
 800505c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 800505e:	2003      	movs	r0, #3
 8005060:	f7fb fad0 	bl	8000604 <HAL_Delay>

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b082      	sub	sp, #8
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507c:	461a      	mov	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f043 0302 	orr.w	r3, r3, #2
 800508a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3);
 800508c:	2003      	movs	r0, #3
 800508e:	f7fb fab9 	bl	8000604 <HAL_Delay>

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4013      	ands	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]
  return v;
 80050b8:	68fb      	ldr	r3, [r7, #12]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4013      	ands	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000) >> 16);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	0c1b      	lsrs	r3, r3, #16
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4013      	ands	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFF));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	b29b      	uxth	r3, r3
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	460b      	mov	r3, r1
 8005130:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8005132:	78fb      	ldrb	r3, [r7, #3]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4013      	ands	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
  return v;
 8005150:	68fb      	ldr	r3, [r7, #12]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 800515e:	b480      	push	{r7}
 8005160:	b087      	sub	sp, #28
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	460b      	mov	r3, r1
 8005168:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517c:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1) << 7;
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	fa22 f303 	lsr.w	r3, r2, r3
 8005186:	01db      	lsls	r3, r3, #7
 8005188:	b2db      	uxtb	r3, r3
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4013      	ands	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
  return v;
 80051a4:	68fb      	ldr	r3, [r7, #12]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0301 	and.w	r3, r3, #1
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	4619      	mov	r1, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	4b13      	ldr	r3, [pc, #76]	; (8005238 <USB_ActivateSetup+0x68>)
 80051ea:	4013      	ands	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]

  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 0306 	and.w	r3, r3, #6
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d10a      	bne.n	8005214 <USB_ActivateSetup+0x44>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	461a      	mov	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f043 0303 	orr.w	r3, r3, #3
 8005212:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	461a      	mov	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005228:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	fffff800 	.word	0xfffff800

0800523c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	460b      	mov	r3, r1
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005250:	461a      	mov	r2, r3
 8005252:	2300      	movs	r3, #0
 8005254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	461a      	mov	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800526a:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	461a      	mov	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f043 0318 	orr.w	r3, r3, #24
 8005280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	461a      	mov	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005296:	6113      	str	r3, [r2, #16]

  if (dma == 1)
 8005298:	7afb      	ldrb	r3, [r7, #11]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d10c      	bne.n	80052b8 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	461a      	mov	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b0:	461a      	mov	r2, r3
 80052b2:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 80052b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3301      	adds	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4a13      	ldr	r2, [pc, #76]	; (800532c <USB_CoreReset+0x64>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e01b      	b.n	800531e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	daf2      	bge.n	80052d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f043 0201 	orr.w	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3301      	adds	r3, #1
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a09      	ldr	r2, [pc, #36]	; (800532c <USB_CoreReset+0x64>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e006      	b.n	800531e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d0f0      	beq.n	80052fe <USB_CoreReset+0x36>

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	00030d40 	.word	0x00030d40

08005330 <USBD_UVC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_UVC_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	73fb      	strb	r3, [r7, #15]
  USBD_UVC_HandleTypeDef   *hUVC;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7c1b      	ldrb	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10e      	bne.n	8005366 <USBD_UVC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800534c:	2202      	movs	r2, #2
 800534e:	2181      	movs	r1, #129	; 0x81
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 fceb 	bl	8006d2c <USBD_LL_OpenEP>
                   UVC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   UVC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8005356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800535a:	2202      	movs	r2, #2
 800535c:	2101      	movs	r1, #1
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f001 fce4 	bl	8006d2c <USBD_LL_OpenEP>
 8005364:	e00b      	b.n	800537e <USBD_UVC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8005366:	2340      	movs	r3, #64	; 0x40
 8005368:	2202      	movs	r2, #2
 800536a:	2181      	movs	r1, #129	; 0x81
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f001 fcdd 	bl	8006d2c <USBD_LL_OpenEP>
                   UVC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   UVC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8005372:	2340      	movs	r3, #64	; 0x40
 8005374:	2202      	movs	r2, #2
 8005376:	2101      	movs	r1, #1
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f001 fcd7 	bl	8006d2c <USBD_LL_OpenEP>
                   UVC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   UVC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800537e:	2308      	movs	r3, #8
 8005380:	2203      	movs	r2, #3
 8005382:	2182      	movs	r1, #130	; 0x82
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fcd1 	bl	8006d2c <USBD_LL_OpenEP>
                 UVC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 UVC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_UVC_HandleTypeDef));
 800538a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800538e:	f002 f885 	bl	800749c <malloc>
 8005392:	4603      	mov	r3, r0
 8005394:	461a      	mov	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d102      	bne.n	80053ac <USBD_UVC_Init+0x7c>
  {
    ret = 1; 
 80053a6:	2301      	movs	r3, #1
 80053a8:	73fb      	strb	r3, [r7, #15]
 80053aa:	e026      	b.n	80053fa <USBD_UVC_Init+0xca>
  }
  else
  {
    hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80053b2:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Init();
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4798      	blx	r3
    
    /* Init Xfer states */
    hUVC->TxState =0;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hUVC->RxState =0;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	7c1b      	ldrb	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <USBD_UVC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053e0:	2101      	movs	r1, #1
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f001 fe1e 	bl	8007024 <USBD_LL_PrepareReceive>
 80053e8:	e007      	b.n	80053fa <USBD_UVC_Init+0xca>
                             UVC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053f0:	2340      	movs	r3, #64	; 0x40
 80053f2:	2101      	movs	r1, #1
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f001 fe15 	bl	8007024 <USBD_LL_PrepareReceive>
                             UVC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <USBD_UVC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_UVC_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8005414:	2181      	movs	r1, #129	; 0x81
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 fcc6 	bl	8006da8 <USBD_LL_CloseEP>
              UVC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800541c:	2101      	movs	r1, #1
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f001 fcc2 	bl	8006da8 <USBD_LL_CloseEP>
              UVC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8005424:	2182      	movs	r1, #130	; 0x82
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f001 fcbe 	bl	8006da8 <USBD_LL_CloseEP>
              UVC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00e      	beq.n	8005454 <USBD_UVC_DeInit+0x50>
  {
    ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005446:	4618      	mov	r0, r3
 8005448:	f002 f830 	bl	80074ac <free>
    pdev->pClassData = NULL;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8005454:	7bfb      	ldrb	r3, [r7, #15]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <USBD_UVC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_UVC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005470:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800547a:	2b00      	cmp	r3, #0
 800547c:	d03a      	beq.n	80054f4 <USBD_UVC_Setup+0x94>
 800547e:	2b20      	cmp	r3, #32
 8005480:	d000      	beq.n	8005484 <USBD_UVC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8005482:	e043      	b.n	800550c <USBD_UVC_Setup+0xac>
    if (req->wLength)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	88db      	ldrh	r3, [r3, #6]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d029      	beq.n	80054e0 <USBD_UVC_Setup+0x80>
      if (req->bmRequest & 0x80)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	b25b      	sxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	da11      	bge.n	80054ba <USBD_UVC_Setup+0x5a>
        ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hUVC->data,
 80054a2:	68f9      	ldr	r1, [r7, #12]
        ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	88d2      	ldrh	r2, [r2, #6]
 80054a8:	4798      	blx	r3
                            (uint8_t *)hUVC->data,
 80054aa:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	88db      	ldrh	r3, [r3, #6]
 80054b0:	461a      	mov	r2, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f001 f848 	bl	8006548 <USBD_CtlSendData>
    break;
 80054b8:	e029      	b.n	800550e <USBD_UVC_Setup+0xae>
        hUVC->CmdOpCode = req->bRequest;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	785a      	ldrb	r2, [r3, #1]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hUVC->CmdLength = req->wLength;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	88db      	ldrh	r3, [r3, #6]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hUVC->data,
 80054d0:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	88db      	ldrh	r3, [r3, #6]
 80054d6:	461a      	mov	r2, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f001 f863 	bl	80065a4 <USBD_CtlPrepareRx>
    break;
 80054de:	e016      	b.n	800550e <USBD_UVC_Setup+0xae>
      ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	7850      	ldrb	r0, [r2, #1]
 80054ec:	2200      	movs	r2, #0
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	4798      	blx	r3
    break;
 80054f2:	e00c      	b.n	800550e <USBD_UVC_Setup+0xae>
    switch (req->bRequest)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b0a      	cmp	r3, #10
 80054fa:	d001      	beq.n	8005500 <USBD_UVC_Setup+0xa0>
 80054fc:	2b0b      	cmp	r3, #11
      break;
 80054fe:	e005      	b.n	800550c <USBD_UVC_Setup+0xac>
      USBD_CtlSendData (pdev,
 8005500:	2201      	movs	r2, #1
 8005502:	4905      	ldr	r1, [pc, #20]	; (8005518 <USBD_UVC_Setup+0xb8>)
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 f81f 	bl	8006548 <USBD_CtlSendData>
      break;
 800550a:	bf00      	nop
    break;
 800550c:	bf00      	nop
  }
  return USBD_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	200001f0 	.word	0x200001f0

0800551c <USBD_UVC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_UVC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	460b      	mov	r3, r1
 8005526:	70fb      	strb	r3, [r7, #3]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800552e:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <USBD_UVC_DataIn+0x2a>
  {
    
    hUVC->TxState = 0;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	e000      	b.n	8005548 <USBD_UVC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8005546:	2302      	movs	r3, #2
  }
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USBD_UVC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_UVC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	70fb      	strb	r3, [r7, #3]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005566:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hUVC->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f001 fd93 	bl	8007098 <USBD_LL_GetRxDataSize>
 8005572:	4602      	mov	r2, r0
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <USBD_UVC_DataOut+0x4c>
  {
    ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Receive(hUVC->RxBuffer, &hUVC->RxLength);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005598:	4611      	mov	r1, r2
 800559a:	4798      	blx	r3

    return USBD_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	e000      	b.n	80055a2 <USBD_UVC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80055a0:	2302      	movs	r3, #2
  }
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <USBD_UVC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_UVC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80055b8:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hUVC->CmdOpCode != 0xFF))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d015      	beq.n	80055f0 <USBD_UVC_EP0_RxReady+0x46>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80055ca:	2bff      	cmp	r3, #255	; 0xff
 80055cc:	d010      	beq.n	80055f0 <USBD_UVC_EP0_RxReady+0x46>
  {
    ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Control(hUVC->CmdOpCode,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hUVC->data,
 80055dc:	68f9      	ldr	r1, [r7, #12]
                                                      hUVC->CmdLength);
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_UVC_ItfTypeDef *)pdev->pUserData)->Control(hUVC->CmdOpCode,
 80055e4:	b292      	uxth	r2, r2
 80055e6:	4798      	blx	r3
      hUVC->CmdOpCode = 0xFF;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	22ff      	movs	r2, #255	; 0xff
 80055ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <USBD_UVC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_UVC_GetFSCfgDesc (uint16_t *length)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_UVC_CfgFSDesc);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2243      	movs	r2, #67	; 0x43
 8005608:	801a      	strh	r2, [r3, #0]
  return USBD_UVC_CfgFSDesc;
 800560a:	4b03      	ldr	r3, [pc, #12]	; (8005618 <USBD_UVC_GetFSCfgDesc+0x1c>)
}
 800560c:	4618      	mov	r0, r3
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	20000090 	.word	0x20000090

0800561c <USBD_UVC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_UVC_GetHSCfgDesc (uint16_t *length)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_UVC_CfgHSDesc);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2243      	movs	r2, #67	; 0x43
 8005628:	801a      	strh	r2, [r3, #0]
  return USBD_UVC_CfgHSDesc;
 800562a:	4b03      	ldr	r3, [pc, #12]	; (8005638 <USBD_UVC_GetHSCfgDesc+0x1c>)
}
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	2000004c 	.word	0x2000004c

0800563c <USBD_UVC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_UVC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_UVC_OtherSpeedCfgDesc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2243      	movs	r2, #67	; 0x43
 8005648:	801a      	strh	r2, [r3, #0]
  return USBD_UVC_OtherSpeedCfgDesc;
 800564a:	4b03      	ldr	r3, [pc, #12]	; (8005658 <USBD_UVC_GetOtherSpeedCfgDesc+0x1c>)
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	200000d4 	.word	0x200000d4

0800565c <USBD_UVC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_UVC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_UVC_DeviceQualifierDesc);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	220a      	movs	r2, #10
 8005668:	801a      	strh	r2, [r3, #0]
  return USBD_UVC_DeviceQualifierDesc;
 800566a:	4b03      	ldr	r3, [pc, #12]	; (8005678 <USBD_UVC_GetDeviceQualifierDescriptor+0x1c>)
}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	20000008 	.word	0x20000008

0800567c <USBD_UVC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_UVC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_UVC_ItfTypeDef *fops)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005686:	2302      	movs	r3, #2
 8005688:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <USBD_UVC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8005698:	2300      	movs	r3, #0
 800569a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USBD_UVC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_UVC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	4613      	mov	r3, r2
 80056b6:	80fb      	strh	r3, [r7, #6]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056be:	617b      	str	r3, [r7, #20]
  
  hUVC->TxBuffer = pbuff;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hUVC->TxLength = length;
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <USBD_UVC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_UVC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80056ee:	60fb      	str	r3, [r7, #12]
  
  hUVC->RxBuffer = pbuff;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <USBD_UVC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_UVC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  USBD_UVC_HandleTypeDef   *hUVC = (USBD_UVC_HandleTypeDef*) pdev->pClassData;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005714:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800571c:	2b00      	cmp	r3, #0
 800571e:	d017      	beq.n	8005750 <USBD_UVC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	7c1b      	ldrb	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <USBD_UVC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800572e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005732:	2101      	movs	r1, #1
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 fc75 	bl	8007024 <USBD_LL_PrepareReceive>
 800573a:	e007      	b.n	800574c <USBD_UVC_ReceivePacket+0x46>
                             UVC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005742:	2340      	movs	r3, #64	; 0x40
 8005744:	2101      	movs	r1, #1
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f001 fc6c 	bl	8007024 <USBD_LL_PrepareReceive>
                             UVC_OUT_EP,
                             hUVC->RxBuffer,
                             UVC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	e000      	b.n	8005752 <USBD_UVC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005750:	2302      	movs	r3, #2
  }
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	4613      	mov	r3, r2
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800576e:	2302      	movs	r3, #2
 8005770:	e01a      	b.n	80057a8 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	79fa      	ldrb	r2, [r7, #7]
 800579e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f001 fa3d 	bl	8006c20 <USBD_LL_Init>
  
  return USBD_OK; 
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d006      	beq.n	80057d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	73fb      	strb	r3, [r7, #15]
 80057d0:	e001      	b.n	80057d6 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80057d2:	2302      	movs	r3, #2
 80057d4:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 fa6b 	bl	8006cc8 <USBD_LL_Start>
  
  return USBD_OK;  
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800581e:	2302      	movs	r3, #2
 8005820:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00c      	beq.n	8005846 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	78fa      	ldrb	r2, [r7, #3]
 8005836:	4611      	mov	r1, r2
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8005846:	7bfb      	ldrb	r3, [r7, #15]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	78fa      	ldrb	r2, [r7, #3]
 8005866:	4611      	mov	r1, r2
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	4798      	blx	r3
  return USBD_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fdb4 	bl	80063f6 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800589c:	461a      	mov	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d00b      	beq.n	80058ca <USBD_LL_SetupStage+0x54>
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d011      	beq.n	80058da <USBD_LL_SetupStage+0x64>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d117      	bne.n	80058ea <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9c6 	bl	8005c54 <USBD_StdDevReq>
    break;
 80058c8:	e01a      	b.n	8005900 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fa0e 	bl	8005cf4 <USBD_StdItfReq>
    break;
 80058d8:	e012      	b.n	8005900 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fa39 	bl	8005d5a <USBD_StdEPReq>
    break;
 80058e8:	e00a      	b.n	8005900 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80058f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 fa8b 	bl	8006e14 <USBD_LL_StallEP>
    break;
 80058fe:	bf00      	nop
  }  
  return USBD_OK;  
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	460b      	mov	r3, r1
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8005918:	7afb      	ldrb	r3, [r7, #11]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d138      	bne.n	8005990 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005924:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800592c:	2b03      	cmp	r3, #3
 800592e:	d142      	bne.n	80059b6 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	429a      	cmp	r2, r3
 800593a:	d914      	bls.n	8005966 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	1ad2      	subs	r2, r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	4293      	cmp	r3, r2
 8005954:	bf28      	it	cs
 8005956:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8005958:	b29b      	uxth	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 fe3e 	bl	80065e0 <USBD_CtlContinueRx>
 8005964:	e027      	b.n	80059b6 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8005978:	2b03      	cmp	r3, #3
 800597a:	d105      	bne.n	8005988 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 fe3b 	bl	8006604 <USBD_CtlSendStatus>
 800598e:	e012      	b.n	80059b6 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00c      	beq.n	80059b6 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d107      	bne.n	80059b6 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	7afa      	ldrb	r2, [r7, #11]
 80059b0:	4611      	mov	r1, r2
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	4798      	blx	r3
  }  
  return USBD_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	460b      	mov	r3, r1
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80059ce:	7afb      	ldrb	r3, [r7, #11]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d16c      	bne.n	8005aae <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3314      	adds	r3, #20
 80059d8:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d157      	bne.n	8005a94 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d915      	bls.n	8005a1c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	1ad2      	subs	r2, r2, r3
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fdb9 	bl	8006580 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2200      	movs	r2, #0
 8005a12:	2100      	movs	r1, #0
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f001 fb05 	bl	8007024 <USBD_LL_PrepareReceive>
 8005a1a:	e03b      	b.n	8005a94 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	68d2      	ldr	r2, [r2, #12]
 8005a24:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a28:	fb02 f201 	mul.w	r2, r2, r1
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d11c      	bne.n	8005a6c <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d316      	bcc.n	8005a6c <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d20f      	bcs.n	8005a6c <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2100      	movs	r1, #0
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fd95 	bl	8006580 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8005a5e:	2300      	movs	r3, #0
 8005a60:	2200      	movs	r2, #0
 8005a62:	2100      	movs	r1, #0
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f001 fadd 	bl	8007024 <USBD_LL_PrepareReceive>
 8005a6a:	e013      	b.n	8005a94 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d105      	bne.n	8005a8e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fdcb 	bl	800662a <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d11a      	bne.n	8005ad4 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff feac 	bl	80057fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8005aac:	e012      	b.n	8005ad4 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00c      	beq.n	8005ad4 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d107      	bne.n	8005ad4 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	7afa      	ldrb	r2, [r7, #11]
 8005ace:	4611      	mov	r1, r2
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	4798      	blx	r3
  }  
  return USBD_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8005ae6:	2340      	movs	r3, #64	; 0x40
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2100      	movs	r1, #0
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 f91d 	bl	8006d2c <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2240      	movs	r2, #64	; 0x40
 8005af6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8005afa:	2340      	movs	r3, #64	; 0x40
 8005afc:	2200      	movs	r2, #0
 8005afe:	2180      	movs	r1, #128	; 0x80
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 f913 	bl	8006d2c <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2240      	movs	r2, #64	; 0x40
 8005b0a:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6852      	ldr	r2, [r2, #4]
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	4798      	blx	r3
 
  
  return USBD_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	78fa      	ldrb	r2, [r7, #3]
 8005b4c:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2204      	movs	r2, #4
 8005b74:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d10b      	bne.n	8005bd2 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d005      	beq.n	8005bd2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6852      	ldr	r2, [r2, #4]
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	4611      	mov	r1, r2
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	4798      	blx	r3
   
  return USBD_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2b09      	cmp	r3, #9
 8005c68:	d839      	bhi.n	8005cde <USBD_StdDevReq+0x8a>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <USBD_StdDevReq+0x1c>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005cc1 	.word	0x08005cc1
 8005c74:	08005cd5 	.word	0x08005cd5
 8005c78:	08005cdf 	.word	0x08005cdf
 8005c7c:	08005ccb 	.word	0x08005ccb
 8005c80:	08005cdf 	.word	0x08005cdf
 8005c84:	08005ca3 	.word	0x08005ca3
 8005c88:	08005c99 	.word	0x08005c99
 8005c8c:	08005cdf 	.word	0x08005cdf
 8005c90:	08005cb7 	.word	0x08005cb7
 8005c94:	08005cad 	.word	0x08005cad
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8005c98:	6839      	ldr	r1, [r7, #0]
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f936 	bl	8005f0c <USBD_GetDescriptor>
    break;
 8005ca0:	e022      	b.n	8005ce8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fa41 	bl	800612c <USBD_SetAddress>
    break;
 8005caa:	e01d      	b.n	8005ce8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa7a 	bl	80061a8 <USBD_SetConfig>
    break;
 8005cb4:	e018      	b.n	8005ce8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fafd 	bl	80062b8 <USBD_GetConfig>
    break;
 8005cbe:	e013      	b.n	8005ce8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fb2a 	bl	800631c <USBD_GetStatus>
    break;
 8005cc8:	e00e      	b.n	8005ce8 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fb4f 	bl	8006370 <USBD_SetFeature>
    break;
 8005cd2:	e009      	b.n	8005ce8 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fb65 	bl	80063a6 <USBD_ClrFeature>
    break;
 8005cdc:	e004      	b.n	8005ce8 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8005cde:	6839      	ldr	r1, [r7, #0]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fbc5 	bl	8006470 <USBD_CtlError>
    break;
 8005ce6:	bf00      	nop
  }
  
  return ret;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop

08005cf4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d11b      	bne.n	8005d44 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	889b      	ldrh	r3, [r3, #4]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d811      	bhi.n	8005d3a <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	6839      	ldr	r1, [r7, #0]
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	88db      	ldrh	r3, [r3, #6]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d110      	bne.n	8005d4e <USBD_StdItfReq+0x5a>
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10d      	bne.n	8005d4e <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fc66 	bl	8006604 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8005d38:	e009      	b.n	8005d4e <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fb97 	bl	8006470 <USBD_CtlError>
    break;
 8005d42:	e004      	b.n	8005d4e <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8005d44:	6839      	ldr	r1, [r7, #0]
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fb92 	bl	8006470 <USBD_CtlError>
    break;
 8005d4c:	e000      	b.n	8005d50 <USBD_StdItfReq+0x5c>
    break;
 8005d4e:	bf00      	nop
  }
  return USBD_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	889b      	ldrh	r3, [r3, #4]
 8005d6c:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d108      	bne.n	8005d8c <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	4798      	blx	r3
    
    return USBD_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e0ba      	b.n	8005f02 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d039      	beq.n	8005e08 <USBD_StdEPReq+0xae>
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d002      	beq.n	8005d9e <USBD_StdEPReq+0x44>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d06b      	beq.n	8005e74 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8005d9c:	e0b0      	b.n	8005f00 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d002      	beq.n	8005dae <USBD_StdEPReq+0x54>
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d00c      	beq.n	8005dc6 <USBD_StdEPReq+0x6c>
 8005dac:	e025      	b.n	8005dfa <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005dae:	7bbb      	ldrb	r3, [r7, #14]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d027      	beq.n	8005e04 <USBD_StdEPReq+0xaa>
 8005db4:	7bbb      	ldrb	r3, [r7, #14]
 8005db6:	2b80      	cmp	r3, #128	; 0x80
 8005db8:	d024      	beq.n	8005e04 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8005dba:	7bbb      	ldrb	r3, [r7, #14]
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f001 f828 	bl	8006e14 <USBD_LL_StallEP>
      break;	
 8005dc4:	e01e      	b.n	8005e04 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	885b      	ldrh	r3, [r3, #2]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10a      	bne.n	8005de4 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005dce:	7bbb      	ldrb	r3, [r7, #14]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <USBD_StdEPReq+0x8a>
 8005dd4:	7bbb      	ldrb	r3, [r7, #14]
 8005dd6:	2b80      	cmp	r3, #128	; 0x80
 8005dd8:	d004      	beq.n	8005de4 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 f818 	bl	8006e14 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	6839      	ldr	r1, [r7, #0]
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fc06 	bl	8006604 <USBD_CtlSendStatus>
      break;
 8005df8:	e005      	b.n	8005e06 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fb37 	bl	8006470 <USBD_CtlError>
      break;    
 8005e02:	e000      	b.n	8005e06 <USBD_StdEPReq+0xac>
      break;	
 8005e04:	bf00      	nop
    break;
 8005e06:	e07b      	b.n	8005f00 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d002      	beq.n	8005e18 <USBD_StdEPReq+0xbe>
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d00c      	beq.n	8005e30 <USBD_StdEPReq+0xd6>
 8005e16:	e024      	b.n	8005e62 <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005e18:	7bbb      	ldrb	r3, [r7, #14]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d026      	beq.n	8005e6c <USBD_StdEPReq+0x112>
 8005e1e:	7bbb      	ldrb	r3, [r7, #14]
 8005e20:	2b80      	cmp	r3, #128	; 0x80
 8005e22:	d023      	beq.n	8005e6c <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fff3 	bl	8006e14 <USBD_LL_StallEP>
      break;	
 8005e2e:	e01d      	b.n	8005e6c <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	885b      	ldrh	r3, [r3, #2]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d11b      	bne.n	8005e70 <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00b      	beq.n	8005e5a <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8005e42:	7bbb      	ldrb	r3, [r7, #14]
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f001 f81a 	bl	8006e80 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fbd2 	bl	8006604 <USBD_CtlSendStatus>
      break;
 8005e60:	e006      	b.n	8005e70 <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fb03 	bl	8006470 <USBD_CtlError>
      break;    
 8005e6a:	e002      	b.n	8005e72 <USBD_StdEPReq+0x118>
      break;	
 8005e6c:	bf00      	nop
 8005e6e:	e047      	b.n	8005f00 <USBD_StdEPReq+0x1a6>
      break;
 8005e70:	bf00      	nop
    break;
 8005e72:	e045      	b.n	8005f00 <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d002      	beq.n	8005e84 <USBD_StdEPReq+0x12a>
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d00b      	beq.n	8005e9a <USBD_StdEPReq+0x140>
 8005e82:	e036      	b.n	8005ef2 <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d036      	beq.n	8005efc <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8005e8e:	7bbb      	ldrb	r3, [r7, #14]
 8005e90:	4619      	mov	r1, r3
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 ffbe 	bl	8006e14 <USBD_LL_StallEP>
      break;	
 8005e98:	e030      	b.n	8005efc <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005e9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da08      	bge.n	8005eb4 <USBD_StdEPReq+0x15a>
 8005ea2:	7bbb      	ldrb	r3, [r7, #14]
 8005ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	4413      	add	r3, r2
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	e007      	b.n	8005ec4 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8005eb4:	7bbb      	ldrb	r3, [r7, #14]
 8005eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005eba:	3310      	adds	r3, #16
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8005ec6:	7bbb      	ldrb	r3, [r7, #14]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 f80e 	bl	8006eec <USBD_LL_IsStallEP>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	e002      	b.n	8005ee4 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8005ee4:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fb2c 	bl	8006548 <USBD_CtlSendData>
      break;
 8005ef0:	e005      	b.n	8005efe <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fabb 	bl	8006470 <USBD_CtlError>
      break;
 8005efa:	e000      	b.n	8005efe <USBD_StdEPReq+0x1a4>
      break;	
 8005efc:	bf00      	nop
    break;
 8005efe:	bf00      	nop
  }
  return ret;
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	885b      	ldrh	r3, [r3, #2]
 8005f1a:	0a1b      	lsrs	r3, r3, #8
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	2b0e      	cmp	r3, #14
 8005f22:	f200 80e5 	bhi.w	80060f0 <USBD_GetDescriptor+0x1e4>
 8005f26:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <USBD_GetDescriptor+0x20>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f81 	.word	0x08005f81
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005fd9 	.word	0x08005fd9
 8005f38:	080060f1 	.word	0x080060f1
 8005f3c:	080060f1 	.word	0x080060f1
 8005f40:	0800609d 	.word	0x0800609d
 8005f44:	080060c3 	.word	0x080060c3
 8005f48:	080060f1 	.word	0x080060f1
 8005f4c:	080060f1 	.word	0x080060f1
 8005f50:	080060f1 	.word	0x080060f1
 8005f54:	080060f1 	.word	0x080060f1
 8005f58:	080060f1 	.word	0x080060f1
 8005f5c:	080060f1 	.word	0x080060f1
 8005f60:	080060f1 	.word	0x080060f1
 8005f64:	08005f69 	.word	0x08005f69
  { 
#if (USBD_LPM_ENABLED == 1)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	7c12      	ldrb	r2, [r2, #16]
 8005f74:	f107 010a 	add.w	r1, r7, #10
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4798      	blx	r3
 8005f7c:	60f8      	str	r0, [r7, #12]
    break;
 8005f7e:	e0bc      	b.n	80060fa <USBD_GetDescriptor+0x1ee>
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	7c12      	ldrb	r2, [r2, #16]
 8005f8c:	f107 010a 	add.w	r1, r7, #10
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
 8005f94:	60f8      	str	r0, [r7, #12]
    break;
 8005f96:	e0b0      	b.n	80060fa <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	7c1b      	ldrb	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10d      	bne.n	8005fbc <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	f107 020a 	add.w	r2, r7, #10
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
 8005fb0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005fba:	e09e      	b.n	80060fa <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	f107 020a 	add.w	r2, r7, #10
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
 8005fcc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	701a      	strb	r2, [r3, #0]
    break;
 8005fd6:	e090      	b.n	80060fa <USBD_GetDescriptor+0x1ee>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	885b      	ldrh	r3, [r3, #2]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d856      	bhi.n	8006090 <USBD_GetDescriptor+0x184>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <USBD_GetDescriptor+0xdc>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	08006001 	.word	0x08006001
 8005fec:	08006019 	.word	0x08006019
 8005ff0:	08006031 	.word	0x08006031
 8005ff4:	08006049 	.word	0x08006049
 8005ff8:	08006061 	.word	0x08006061
 8005ffc:	08006079 	.word	0x08006079
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	7c12      	ldrb	r2, [r2, #16]
 800600c:	f107 010a 	add.w	r1, r7, #10
 8006010:	4610      	mov	r0, r2
 8006012:	4798      	blx	r3
 8006014:	60f8      	str	r0, [r7, #12]
      break;
 8006016:	e040      	b.n	800609a <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	7c12      	ldrb	r2, [r2, #16]
 8006024:	f107 010a 	add.w	r1, r7, #10
 8006028:	4610      	mov	r0, r2
 800602a:	4798      	blx	r3
 800602c:	60f8      	str	r0, [r7, #12]
      break;
 800602e:	e034      	b.n	800609a <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	7c12      	ldrb	r2, [r2, #16]
 800603c:	f107 010a 	add.w	r1, r7, #10
 8006040:	4610      	mov	r0, r2
 8006042:	4798      	blx	r3
 8006044:	60f8      	str	r0, [r7, #12]
      break;
 8006046:	e028      	b.n	800609a <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	7c12      	ldrb	r2, [r2, #16]
 8006054:	f107 010a 	add.w	r1, r7, #10
 8006058:	4610      	mov	r0, r2
 800605a:	4798      	blx	r3
 800605c:	60f8      	str	r0, [r7, #12]
      break;
 800605e:	e01c      	b.n	800609a <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	7c12      	ldrb	r2, [r2, #16]
 800606c:	f107 010a 	add.w	r1, r7, #10
 8006070:	4610      	mov	r0, r2
 8006072:	4798      	blx	r3
 8006074:	60f8      	str	r0, [r7, #12]
      break;
 8006076:	e010      	b.n	800609a <USBD_GetDescriptor+0x18e>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	7c12      	ldrb	r2, [r2, #16]
 8006084:	f107 010a 	add.w	r1, r7, #10
 8006088:	4610      	mov	r0, r2
 800608a:	4798      	blx	r3
 800608c:	60f8      	str	r0, [r7, #12]
      break;
 800608e:	e004      	b.n	800609a <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9ec 	bl	8006470 <USBD_CtlError>
      return;
 8006098:	e044      	b.n	8006124 <USBD_GetDescriptor+0x218>
#endif   
    }
    break;
 800609a:	e02e      	b.n	80060fa <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	7c1b      	ldrb	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <USBD_GetDescriptor+0x1ac>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ac:	f107 020a 	add.w	r2, r7, #10
 80060b0:	4610      	mov	r0, r2
 80060b2:	4798      	blx	r3
 80060b4:	60f8      	str	r0, [r7, #12]
      break;
 80060b6:	e020      	b.n	80060fa <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f9d8 	bl	8006470 <USBD_CtlError>
      return;
 80060c0:	e030      	b.n	8006124 <USBD_GetDescriptor+0x218>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	7c1b      	ldrb	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10d      	bne.n	80060e6 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	f107 020a 	add.w	r2, r7, #10
 80060d6:	4610      	mov	r0, r2
 80060d8:	4798      	blx	r3
 80060da:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3301      	adds	r3, #1
 80060e0:	2207      	movs	r2, #7
 80060e2:	701a      	strb	r2, [r3, #0]
      break; 
 80060e4:	e009      	b.n	80060fa <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f9c1 	bl	8006470 <USBD_CtlError>
      return;
 80060ee:	e019      	b.n	8006124 <USBD_GetDescriptor+0x218>
    }

  default: 
     USBD_CtlError(pdev , req);
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f9bc 	bl	8006470 <USBD_CtlError>
    return;
 80060f8:	e014      	b.n	8006124 <USBD_GetDescriptor+0x218>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80060fa:	897b      	ldrh	r3, [r7, #10]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d011      	beq.n	8006124 <USBD_GetDescriptor+0x218>
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	88db      	ldrh	r3, [r3, #6]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00d      	beq.n	8006124 <USBD_GetDescriptor+0x218>
  {
    
    len = MIN(len , req->wLength);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	88da      	ldrh	r2, [r3, #6]
 800610c:	897b      	ldrh	r3, [r7, #10]
 800610e:	4293      	cmp	r3, r2
 8006110:	bf28      	it	cs
 8006112:	4613      	movcs	r3, r2
 8006114:	b29b      	uxth	r3, r3
 8006116:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8006118:	897b      	ldrh	r3, [r7, #10]
 800611a:	461a      	mov	r2, r3
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fa12 	bl	8006548 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop

0800612c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	889b      	ldrh	r3, [r3, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d12c      	bne.n	8006198 <USBD_SetAddress+0x6c>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	88db      	ldrh	r3, [r3, #6]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d128      	bne.n	8006198 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	885b      	ldrh	r3, [r3, #2]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006150:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8006158:	2b03      	cmp	r3, #3
 800615a:	d104      	bne.n	8006166 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f986 	bl	8006470 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006164:	e01c      	b.n	80061a0 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	7bfa      	ldrb	r2, [r7, #15]
 800616a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fee6 	bl	8006f44 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fa43 	bl	8006604 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d004      	beq.n	800618e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800618c:	e008      	b.n	80061a0 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8006196:	e003      	b.n	80061a0 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f968 	bl	8006470 <USBD_CtlError>
  } 
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	885b      	ldrh	r3, [r3, #2]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	4b3e      	ldr	r3, [pc, #248]	; (80062b4 <USBD_SetConfig+0x10c>)
 80061ba:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80061bc:	4b3d      	ldr	r3, [pc, #244]	; (80062b4 <USBD_SetConfig+0x10c>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d904      	bls.n	80061ce <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80061c4:	6839      	ldr	r1, [r7, #0]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f952 	bl	8006470 <USBD_CtlError>
 80061cc:	e06f      	b.n	80062ae <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d002      	beq.n	80061de <USBD_SetConfig+0x36>
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d023      	beq.n	8006224 <USBD_SetConfig+0x7c>
 80061dc:	e062      	b.n	80062a4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80061de:	4b35      	ldr	r3, [pc, #212]	; (80062b4 <USBD_SetConfig+0x10c>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01a      	beq.n	800621c <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80061e6:	4b33      	ldr	r3, [pc, #204]	; (80062b4 <USBD_SetConfig+0x10c>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2203      	movs	r2, #3
 80061f4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80061f8:	4b2e      	ldr	r3, [pc, #184]	; (80062b4 <USBD_SetConfig+0x10c>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4619      	mov	r1, r3
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff fb07 	bl	8005812 <USBD_SetClassConfig>
 8006204:	4603      	mov	r3, r0
 8006206:	2b02      	cmp	r3, #2
 8006208:	d104      	bne.n	8006214 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f92f 	bl	8006470 <USBD_CtlError>
          return;
 8006212:	e04c      	b.n	80062ae <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f9f5 	bl	8006604 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800621a:	e048      	b.n	80062ae <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f9f1 	bl	8006604 <USBD_CtlSendStatus>
      break;
 8006222:	e044      	b.n	80062ae <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8006224:	4b23      	ldr	r3, [pc, #140]	; (80062b4 <USBD_SetConfig+0x10c>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d112      	bne.n	8006252 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8006234:	4b1f      	ldr	r3, [pc, #124]	; (80062b4 <USBD_SetConfig+0x10c>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800623e:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <USBD_SetConfig+0x10c>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff fb03 	bl	8005850 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f9da 	bl	8006604 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8006250:	e02d      	b.n	80062ae <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8006252:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <USBD_SetConfig+0x10c>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	429a      	cmp	r2, r3
 800625e:	d01d      	beq.n	800629c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff faf1 	bl	8005850 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800626e:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <USBD_SetConfig+0x10c>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8006278:	4b0e      	ldr	r3, [pc, #56]	; (80062b4 <USBD_SetConfig+0x10c>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff fac7 	bl	8005812 <USBD_SetClassConfig>
 8006284:	4603      	mov	r3, r0
 8006286:	2b02      	cmp	r3, #2
 8006288:	d104      	bne.n	8006294 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f8ef 	bl	8006470 <USBD_CtlError>
          return;
 8006292:	e00c      	b.n	80062ae <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f9b5 	bl	8006604 <USBD_CtlSendStatus>
      break;
 800629a:	e008      	b.n	80062ae <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f9b1 	bl	8006604 <USBD_CtlSendStatus>
      break;
 80062a2:	e004      	b.n	80062ae <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 80062a4:	6839      	ldr	r1, [r7, #0]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f8e2 	bl	8006470 <USBD_CtlError>
      break;
 80062ac:	bf00      	nop
    }
  }
}
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	200001f1 	.word	0x200001f1

080062b8 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	88db      	ldrh	r3, [r3, #6]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d004      	beq.n	80062d4 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f8cf 	bl	8006470 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80062d2:	e01f      	b.n	8006314 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d002      	beq.n	80062e4 <USBD_GetConfig+0x2c>
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d00b      	beq.n	80062fa <USBD_GetConfig+0x42>
 80062e2:	e012      	b.n	800630a <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80062ee:	2201      	movs	r2, #1
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f928 	bl	8006548 <USBD_CtlSendData>
      break;
 80062f8:	e00c      	b.n	8006314 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80062fe:	2201      	movs	r2, #1
 8006300:	4619      	mov	r1, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f920 	bl	8006548 <USBD_CtlSendData>
      break;
 8006308:	e004      	b.n	8006314 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800630a:	6839      	ldr	r1, [r7, #0]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f8af 	bl	8006470 <USBD_CtlError>
      break;
 8006312:	bf00      	nop
}
 8006314:	bf00      	nop
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800632c:	3b02      	subs	r3, #2
 800632e:	2b01      	cmp	r3, #1
 8006330:	d815      	bhi.n	800635e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800633e:	2b00      	cmp	r3, #0
 8006340:	d005      	beq.n	800634e <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f043 0202 	orr.w	r2, r3, #2
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8006352:	2202      	movs	r2, #2
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f8f6 	bl	8006548 <USBD_CtlSendData>
                      2);
    break;
 800635c:	e004      	b.n	8006368 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f885 	bl	8006470 <USBD_CtlError>
    break;
 8006366:	bf00      	nop
  }
}
 8006368:	bf00      	nop
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	885b      	ldrh	r3, [r3, #2]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d10d      	bne.n	800639e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f933 	bl	8006604 <USBD_CtlSendStatus>
  }

}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80063b6:	3b02      	subs	r3, #2
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d812      	bhi.n	80063e2 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	885b      	ldrh	r3, [r3, #2]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d113      	bne.n	80063ec <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f912 	bl	8006604 <USBD_CtlSendStatus>
    }
    break;
 80063e0:	e004      	b.n	80063ec <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f843 	bl	8006470 <USBD_CtlError>
    break;
 80063ea:	e000      	b.n	80063ee <USBD_ClrFeature+0x48>
    break;
 80063ec:	bf00      	nop
  }
}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	785a      	ldrb	r2, [r3, #1]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	3302      	adds	r3, #2
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	b29a      	uxth	r2, r3
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	3303      	adds	r3, #3
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	b29b      	uxth	r3, r3
 8006424:	4413      	add	r3, r2
 8006426:	b29a      	uxth	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	3304      	adds	r3, #4
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	b29a      	uxth	r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	3305      	adds	r3, #5
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	b29b      	uxth	r3, r3
 8006440:	4413      	add	r3, r2
 8006442:	b29a      	uxth	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	3306      	adds	r3, #6
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	b29a      	uxth	r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	3307      	adds	r3, #7
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	b29b      	uxth	r3, r3
 800645c:	4413      	add	r3, r2
 800645e:	b29a      	uxth	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	80da      	strh	r2, [r3, #6]

}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800647a:	2180      	movs	r1, #128	; 0x80
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fcc9 	bl	8006e14 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8006482:	2100      	movs	r1, #0
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fcc5 	bl	8006e14 <USBD_LL_StallEP>
}
 800648a:	bf00      	nop
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b086      	sub	sp, #24
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 800649e:	2300      	movs	r3, #0
 80064a0:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d033      	beq.n	8006510 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f835 	bl	8006518 <USBD_GetLen>
 80064ae:	4603      	mov	r3, r0
 80064b0:	3301      	adds	r3, #1
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	75fa      	strb	r2, [r7, #23]
 80064c2:	461a      	mov	r2, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4413      	add	r3, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	8812      	ldrh	r2, [r2, #0]
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	75fa      	strb	r2, [r7, #23]
 80064d6:	461a      	mov	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4413      	add	r3, r2
 80064dc:	2203      	movs	r2, #3
 80064de:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80064e0:	e012      	b.n	8006508 <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	75fa      	strb	r2, [r7, #23]
 80064e8:	461a      	mov	r2, r3
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	441a      	add	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1c59      	adds	r1, r3, #1
 80064f2:	60f9      	str	r1, [r7, #12]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	75fa      	strb	r2, [r7, #23]
 80064fe:	461a      	mov	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4413      	add	r3, r2
 8006504:	2200      	movs	r2, #0
 8006506:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e8      	bne.n	80064e2 <USBD_GetString+0x50>
    }
  } 
}
 8006510:	bf00      	nop
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8006524:	e005      	b.n	8006532 <USBD_GetLen+0x1a>
    {
        len++;
 8006526:	7bfb      	ldrb	r3, [r7, #15]
 8006528:	3301      	adds	r3, #1
 800652a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3301      	adds	r3, #1
 8006530:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f5      	bne.n	8006526 <USBD_GetLen+0xe>
    }

    return len;
 800653a:	7bfb      	ldrb	r3, [r7, #15]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2202      	movs	r2, #2
 800655a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8006564:	88fa      	ldrh	r2, [r7, #6]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	2100      	movs	r1, #0
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 fd1d 	bl	8006fb0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	2100      	movs	r1, #0
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 fd0b 	bl	8006fb0 <USBD_LL_Transmit>
  
  return USBD_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	4613      	mov	r3, r2
 80065b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2203      	movs	r2, #3
 80065b6:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80065ba:	88fa      	ldrh	r2, [r7, #6]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80065c2:	88fa      	ldrh	r2, [r7, #6]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80065ca:	88fb      	ldrh	r3, [r7, #6]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	2100      	movs	r1, #0
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 fd27 	bl	8007024 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	2100      	movs	r1, #0
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 fd15 	bl	8007024 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2204      	movs	r2, #4
 8006610:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8006614:	2300      	movs	r3, #0
 8006616:	2200      	movs	r2, #0
 8006618:	2100      	movs	r1, #0
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fcc8 	bl	8006fb0 <USBD_LL_Transmit>
  
  return USBD_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2205      	movs	r2, #5
 8006636:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800663a:	2300      	movs	r3, #0
 800663c:	2200      	movs	r2, #0
 800663e:	2100      	movs	r1, #0
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fcef 	bl	8007024 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006656:	4a15      	ldr	r2, [pc, #84]	; (80066ac <MX_GPIO_Init+0x5c>)
 8006658:	4b14      	ldr	r3, [pc, #80]	; (80066ac <MX_GPIO_Init+0x5c>)
 800665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006660:	6313      	str	r3, [r2, #48]	; 0x30
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <MX_GPIO_Init+0x5c>)
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800666e:	4a0f      	ldr	r2, [pc, #60]	; (80066ac <MX_GPIO_Init+0x5c>)
 8006670:	4b0e      	ldr	r3, [pc, #56]	; (80066ac <MX_GPIO_Init+0x5c>)
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	f043 0301 	orr.w	r3, r3, #1
 8006678:	6313      	str	r3, [r2, #48]	; 0x30
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <MX_GPIO_Init+0x5c>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	60bb      	str	r3, [r7, #8]
 8006684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006686:	4a09      	ldr	r2, [pc, #36]	; (80066ac <MX_GPIO_Init+0x5c>)
 8006688:	4b08      	ldr	r3, [pc, #32]	; (80066ac <MX_GPIO_Init+0x5c>)
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	f043 0304 	orr.w	r3, r3, #4
 8006690:	6313      	str	r3, [r2, #48]	; 0x30
 8006692:	4b06      	ldr	r3, [pc, #24]	; (80066ac <MX_GPIO_Init+0x5c>)
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	f003 0304 	and.w	r3, r3, #4
 800669a:	607b      	str	r3, [r7, #4]
 800669c:	687b      	ldr	r3, [r7, #4]

}
 800669e:	bf00      	nop
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800

080066b0 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80066b4:	f7f9 ff48 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80066b8:	f000 f806 	bl	80066c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80066bc:	f7ff ffc8 	bl	8006650 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80066c0:	f000 f94e 	bl	8006960 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80066c4:	e7fe      	b.n	80066c4 <main+0x14>
	...

080066c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b0b8      	sub	sp, #224	; 0xe0
 80066cc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80066ce:	4a47      	ldr	r2, [pc, #284]	; (80067ec <SystemClock_Config+0x124>)
 80066d0:	4b46      	ldr	r3, [pc, #280]	; (80067ec <SystemClock_Config+0x124>)
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d8:	6413      	str	r3, [r2, #64]	; 0x40
 80066da:	4b44      	ldr	r3, [pc, #272]	; (80067ec <SystemClock_Config+0x124>)
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e2:	607b      	str	r3, [r7, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80066e6:	4a42      	ldr	r2, [pc, #264]	; (80067f0 <SystemClock_Config+0x128>)
 80066e8:	4b41      	ldr	r3, [pc, #260]	; (80067f0 <SystemClock_Config+0x128>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	4b3f      	ldr	r3, [pc, #252]	; (80067f0 <SystemClock_Config+0x128>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80066fe:	2301      	movs	r3, #1
 8006700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800670c:	2302      	movs	r3, #2
 800670e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 6;
 800671a:	2306      	movs	r3, #6
 800671c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8006720:	23d8      	movs	r3, #216	; 0xd8
 8006722:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006726:	2302      	movs	r3, #2
 8006728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800672c:	2309      	movs	r3, #9
 800672e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006732:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006736:	4618      	mov	r0, r3
 8006738:	f7fb fe4c 	bl	80023d4 <HAL_RCC_OscConfig>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006742:	219b      	movs	r1, #155	; 0x9b
 8006744:	482b      	ldr	r0, [pc, #172]	; (80067f4 <SystemClock_Config+0x12c>)
 8006746:	f000 f859 	bl	80067fc <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800674a:	f7fb fdf3 	bl	8002334 <HAL_PWREx_EnableOverDrive>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <SystemClock_Config+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006754:	21a2      	movs	r1, #162	; 0xa2
 8006756:	4827      	ldr	r0, [pc, #156]	; (80067f4 <SystemClock_Config+0x12c>)
 8006758:	f000 f850 	bl	80067fc <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800675c:	230f      	movs	r3, #15
 800675e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006762:	2302      	movs	r3, #2
 8006764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006768:	2300      	movs	r3, #0
 800676a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800676e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800677a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800677e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006782:	2107      	movs	r1, #7
 8006784:	4618      	mov	r0, r3
 8006786:	f7fc f95d 	bl	8002a44 <HAL_RCC_ClockConfig>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <SystemClock_Config+0xd0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006790:	21b0      	movs	r1, #176	; 0xb0
 8006792:	4818      	ldr	r0, [pc, #96]	; (80067f4 <SystemClock_Config+0x12c>)
 8006794:	f000 f832 	bl	80067fc <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006798:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800679c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800679e:	2300      	movs	r3, #0
 80067a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067a4:	f107 0308 	add.w	r3, r7, #8
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fc fbb1 	bl	8002f10 <HAL_RCCEx_PeriphCLKConfig>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <SystemClock_Config+0xf4>
  {
    _Error_Handler(__FILE__, __LINE__);
 80067b4:	21b7      	movs	r1, #183	; 0xb7
 80067b6:	480f      	ldr	r0, [pc, #60]	; (80067f4 <SystemClock_Config+0x12c>)
 80067b8:	f000 f820 	bl	80067fc <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80067bc:	f7fc fb9c 	bl	8002ef8 <HAL_RCC_GetHCLKFreq>
 80067c0:	4602      	mov	r2, r0
 80067c2:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <SystemClock_Config+0x130>)
 80067c4:	fba3 2302 	umull	r2, r3, r3, r2
 80067c8:	099b      	lsrs	r3, r3, #6
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fa f86a 	bl	80008a4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80067d0:	2004      	movs	r0, #4
 80067d2:	f7fa f873 	bl	80008bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80067d6:	2200      	movs	r2, #0
 80067d8:	2100      	movs	r1, #0
 80067da:	f04f 30ff 	mov.w	r0, #4294967295
 80067de:	f7fa f81d 	bl	800081c <HAL_NVIC_SetPriority>
}
 80067e2:	bf00      	nop
 80067e4:	37e0      	adds	r7, #224	; 0xe0
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	40023800 	.word	0x40023800
 80067f0:	40007000 	.word	0x40007000
 80067f4:	08007790 	.word	0x08007790
 80067f8:	10624dd3 	.word	0x10624dd3

080067fc <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8006806:	e7fe      	b.n	8006806 <_Error_Handler+0xa>

08006808 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006822:	2003      	movs	r0, #3
 8006824:	f7f9 ffda 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8006828:	2200      	movs	r2, #0
 800682a:	2100      	movs	r1, #0
 800682c:	f06f 000b 	mvn.w	r0, #11
 8006830:	f7f9 fff4 	bl	800081c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8006834:	2200      	movs	r2, #0
 8006836:	2100      	movs	r1, #0
 8006838:	f06f 000a 	mvn.w	r0, #10
 800683c:	f7f9 ffee 	bl	800081c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8006840:	2200      	movs	r2, #0
 8006842:	2100      	movs	r1, #0
 8006844:	f06f 0009 	mvn.w	r0, #9
 8006848:	f7f9 ffe8 	bl	800081c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800684c:	2200      	movs	r2, #0
 800684e:	2100      	movs	r1, #0
 8006850:	f06f 0004 	mvn.w	r0, #4
 8006854:	f7f9 ffe2 	bl	800081c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006858:	2200      	movs	r2, #0
 800685a:	2100      	movs	r1, #0
 800685c:	f06f 0003 	mvn.w	r0, #3
 8006860:	f7f9 ffdc 	bl	800081c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006864:	2200      	movs	r2, #0
 8006866:	2100      	movs	r1, #0
 8006868:	f06f 0001 	mvn.w	r0, #1
 800686c:	f7f9 ffd6 	bl	800081c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8006870:	2200      	movs	r2, #0
 8006872:	2100      	movs	r1, #0
 8006874:	f04f 30ff 	mov.w	r0, #4294967295
 8006878:	f7f9 ffd0 	bl	800081c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800687c:	bf00      	nop
 800687e:	bd80      	pop	{r7, pc}

08006880 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006884:	bf00      	nop
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800688e:	b480      	push	{r7}
 8006890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006892:	e7fe      	b.n	8006892 <HardFault_Handler+0x4>

08006894 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006898:	e7fe      	b.n	8006898 <MemManage_Handler+0x4>

0800689a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800689a:	b480      	push	{r7}
 800689c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800689e:	e7fe      	b.n	800689e <BusFault_Handler+0x4>

080068a0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068a4:	e7fe      	b.n	80068a4 <UsageFault_Handler+0x4>

080068a6 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80068a6:	b480      	push	{r7}
 80068a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068aa:	bf00      	nop
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80068c2:	b480      	push	{r7}
 80068c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068c6:	bf00      	nop
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068d4:	f7f9 fe76 	bl	80005c4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80068d8:	f7fa f818 	bl	800090c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068dc:	bf00      	nop
 80068de:	bd80      	pop	{r7, pc}

080068e0 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80068e4:	4802      	ldr	r0, [pc, #8]	; (80068f0 <OTG_FS_IRQHandler+0x10>)
 80068e6:	f7fa fce1 	bl	80012ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80068ea:	bf00      	nop
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000428 	.word	0x20000428

080068f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068f8:	4a15      	ldr	r2, [pc, #84]	; (8006950 <SystemInit+0x5c>)
 80068fa:	4b15      	ldr	r3, [pc, #84]	; (8006950 <SystemInit+0x5c>)
 80068fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006908:	4a12      	ldr	r2, [pc, #72]	; (8006954 <SystemInit+0x60>)
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <SystemInit+0x60>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006914:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <SystemInit+0x60>)
 8006916:	2200      	movs	r2, #0
 8006918:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800691a:	490e      	ldr	r1, [pc, #56]	; (8006954 <SystemInit+0x60>)
 800691c:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <SystemInit+0x60>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <SystemInit+0x64>)
 8006922:	4013      	ands	r3, r2
 8006924:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <SystemInit+0x60>)
 8006928:	4a0c      	ldr	r2, [pc, #48]	; (800695c <SystemInit+0x68>)
 800692a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800692c:	4a09      	ldr	r2, [pc, #36]	; (8006954 <SystemInit+0x60>)
 800692e:	4b09      	ldr	r3, [pc, #36]	; (8006954 <SystemInit+0x60>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006936:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006938:	4b06      	ldr	r3, [pc, #24]	; (8006954 <SystemInit+0x60>)
 800693a:	2200      	movs	r2, #0
 800693c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800693e:	4b04      	ldr	r3, [pc, #16]	; (8006950 <SystemInit+0x5c>)
 8006940:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006944:	609a      	str	r2, [r3, #8]
#endif
}
 8006946:	bf00      	nop
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	e000ed00 	.word	0xe000ed00
 8006954:	40023800 	.word	0x40023800
 8006958:	fef6ffff 	.word	0xfef6ffff
 800695c:	24003010 	.word	0x24003010

08006960 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8006964:	2200      	movs	r2, #0
 8006966:	4908      	ldr	r1, [pc, #32]	; (8006988 <MX_USB_DEVICE_Init+0x28>)
 8006968:	4808      	ldr	r0, [pc, #32]	; (800698c <MX_USB_DEVICE_Init+0x2c>)
 800696a:	f7fe fef6 	bl	800575a <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_UVC);
 800696e:	4908      	ldr	r1, [pc, #32]	; (8006990 <MX_USB_DEVICE_Init+0x30>)
 8006970:	4806      	ldr	r0, [pc, #24]	; (800698c <MX_USB_DEVICE_Init+0x2c>)
 8006972:	f7fe ff1d 	bl	80057b0 <USBD_RegisterClass>

  USBD_UVC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8006976:	4907      	ldr	r1, [pc, #28]	; (8006994 <MX_USB_DEVICE_Init+0x34>)
 8006978:	4804      	ldr	r0, [pc, #16]	; (800698c <MX_USB_DEVICE_Init+0x2c>)
 800697a:	f7fe fe7f 	bl	800567c <USBD_UVC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800697e:	4803      	ldr	r0, [pc, #12]	; (800698c <MX_USB_DEVICE_Init+0x2c>)
 8006980:	f7fe ff30 	bl	80057e4 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006984:	bf00      	nop
 8006986:	bd80      	pop	{r7, pc}
 8006988:	2000011c 	.word	0x2000011c
 800698c:	20000204 	.word	0x20000204
 8006990:	20000014 	.word	0x20000014
 8006994:	20000160 	.word	0x20000160

08006998 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08a      	sub	sp, #40	; 0x28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069a8:	d13d      	bne.n	8006a26 <HAL_PCD_MspInit+0x8e>
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069b8:	f107 0314 	add.w	r3, r7, #20
 80069bc:	4619      	mov	r1, r3
 80069be:	481c      	ldr	r0, [pc, #112]	; (8006a30 <HAL_PCD_MspInit+0x98>)
 80069c0:	f7f9 ffb2 	bl	8000928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80069c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80069c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ca:	2302      	movs	r3, #2
 80069cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069d2:	2303      	movs	r3, #3
 80069d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80069d6:	230a      	movs	r3, #10
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069da:	f107 0314 	add.w	r3, r7, #20
 80069de:	4619      	mov	r1, r3
 80069e0:	4813      	ldr	r0, [pc, #76]	; (8006a30 <HAL_PCD_MspInit+0x98>)
 80069e2:	f7f9 ffa1 	bl	8000928 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80069e6:	4a13      	ldr	r2, [pc, #76]	; (8006a34 <HAL_PCD_MspInit+0x9c>)
 80069e8:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <HAL_PCD_MspInit+0x9c>)
 80069ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f0:	6353      	str	r3, [r2, #52]	; 0x34
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <HAL_PCD_MspInit+0x9c>)
 80069f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fa:	613b      	str	r3, [r7, #16]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4a0d      	ldr	r2, [pc, #52]	; (8006a34 <HAL_PCD_MspInit+0x9c>)
 8006a00:	4b0c      	ldr	r3, [pc, #48]	; (8006a34 <HAL_PCD_MspInit+0x9c>)
 8006a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a08:	6453      	str	r3, [r2, #68]	; 0x44
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <HAL_PCD_MspInit+0x9c>)
 8006a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a16:	2200      	movs	r2, #0
 8006a18:	2100      	movs	r1, #0
 8006a1a:	2043      	movs	r0, #67	; 0x43
 8006a1c:	f7f9 fefe 	bl	800081c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a20:	2043      	movs	r0, #67	; 0x43
 8006a22:	f7f9 ff27 	bl	8000874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a26:	bf00      	nop
 8006a28:	3728      	adds	r7, #40	; 0x28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40020000 	.word	0x40020000
 8006a34:	40023800 	.word	0x40023800

08006a38 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4610      	mov	r0, r2
 8006a50:	f7fe ff11 	bl	8005876 <USBD_LL_SetupStage>
}
 8006a54:	bf00      	nop
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006a6e:	78fa      	ldrb	r2, [r7, #3]
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	78fb      	ldrb	r3, [r7, #3]
 8006a84:	4619      	mov	r1, r3
 8006a86:	f7fe ff40 	bl	800590a <USBD_LL_DataOutStage>
}
 8006a8a:	bf00      	nop
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006aa4:	78fa      	ldrb	r2, [r7, #3]
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	1a9b      	subs	r3, r3, r2
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	440b      	add	r3, r1
 8006ab2:	3344      	adds	r3, #68	; 0x44
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	78fb      	ldrb	r3, [r7, #3]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	f7fe ff81 	bl	80059c0 <USBD_LL_DataInStage>
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b082      	sub	sp, #8
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff f867 	bl	8005ba8 <USBD_LL_SOF>
}
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006aea:	2301      	movs	r3, #1
 8006aec:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <HAL_PCD_ResetCallback+0x1a>
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d003      	beq.n	8006b02 <HAL_PCD_ResetCallback+0x20>
 8006afa:	e005      	b.n	8006b08 <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8006afc:	2300      	movs	r3, #0
 8006afe:	73fb      	strb	r3, [r7, #15]
    break;
 8006b00:	e005      	b.n	8006b0e <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8006b02:	2301      	movs	r3, #1
 8006b04:	73fb      	strb	r3, [r7, #15]
    break;
 8006b06:	e002      	b.n	8006b0e <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	73fb      	strb	r3, [r7, #15]
    break;    
 8006b0c:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b14:	7bfa      	ldrb	r2, [r7, #15]
 8006b16:	4611      	mov	r1, r2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff f80f 	bl	8005b3c <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe ffda 	bl	8005ade <USBD_LL_Reset>
}
 8006b2a:	bf00      	nop
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7ff f80a 	bl	8005b5c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b50:	461a      	mov	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f043 0301 	orr.w	r3, r3, #1
 8006b60:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006b6a:	4a05      	ldr	r2, [pc, #20]	; (8006b80 <HAL_PCD_SuspendCallback+0x4c>)
 8006b6c:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <HAL_PCD_SuspendCallback+0x4c>)
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	f043 0306 	orr.w	r3, r3, #6
 8006b74:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006b76:	bf00      	nop
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	e000ed00 	.word	0xe000ed00

08006b84 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fff7 	bl	8005b86 <USBD_LL_Resume>
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bb2:	78fa      	ldrb	r2, [r7, #3]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff f81d 	bl	8005bf6 <USBD_LL_IsoOUTIncomplete>
}
 8006bbc:	bf00      	nop
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bd6:	78fa      	ldrb	r2, [r7, #3]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fffe 	bl	8005bdc <USBD_LL_IsoINIncomplete>
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff f80a 	bl	8005c10 <USBD_LL_DevConnected>
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff f807 	bl	8005c26 <USBD_LL_DevDisconnected>
}
 8006c18:	bf00      	nop
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d142      	bne.n	8006cb6 <USBD_LL_Init+0x96>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006c30:	4a23      	ldr	r2, [pc, #140]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a21      	ldr	r2, [pc, #132]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c3c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006c40:	4b1f      	ldr	r3, [pc, #124]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006c46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006c48:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c4a:	2206      	movs	r2, #6
 8006c4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006c4e:	4b1c      	ldr	r3, [pc, #112]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c50:	2202      	movs	r2, #2
 8006c52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006c54:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8006c5a:	4b19      	ldr	r3, [pc, #100]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006c60:	4b17      	ldr	r3, [pc, #92]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c62:	2202      	movs	r2, #2
 8006c64:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006c66:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006c6c:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006c72:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006c78:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006c7e:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006c84:	480e      	ldr	r0, [pc, #56]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c86:	f7fa f9cf 	bl	8001028 <HAL_PCD_Init>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006c90:	f240 1151 	movw	r1, #337	; 0x151
 8006c94:	480b      	ldr	r0, [pc, #44]	; (8006cc4 <USBD_LL_Init+0xa4>)
 8006c96:	f7ff fdb1 	bl	80067fc <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006c9a:	2180      	movs	r1, #128	; 0x80
 8006c9c:	4808      	ldr	r0, [pc, #32]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006c9e:	f7fb fb13 	bl	80022c8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006ca2:	2240      	movs	r2, #64	; 0x40
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4806      	ldr	r0, [pc, #24]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006ca8:	f7fb fac3 	bl	8002232 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006cac:	2280      	movs	r2, #128	; 0x80
 8006cae:	2101      	movs	r1, #1
 8006cb0:	4803      	ldr	r0, [pc, #12]	; (8006cc0 <USBD_LL_Init+0xa0>)
 8006cb2:	f7fb fabe 	bl	8002232 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20000428 	.word	0x20000428
 8006cc4:	080077a0 	.word	0x080077a0

08006cc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fa fac2 	bl	8001268 <HAL_PCD_Start>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d816      	bhi.n	8006d1c <USBD_LL_Start+0x54>
 8006cee:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <USBD_LL_Start+0x2c>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d05 	.word	0x08006d05
 8006cf8:	08006d0b 	.word	0x08006d0b
 8006cfc:	08006d11 	.word	0x08006d11
 8006d00:	08006d17 	.word	0x08006d17
    case HAL_OK :
      usb_status = USBD_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]
    break;
 8006d08:	e00b      	b.n	8006d22 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d0e:	e008      	b.n	8006d22 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d10:	2301      	movs	r3, #1
 8006d12:	73fb      	strb	r3, [r7, #15]
    break;
 8006d14:	e005      	b.n	8006d22 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d16:	2302      	movs	r3, #2
 8006d18:	73fb      	strb	r3, [r7, #15]
    break;
 8006d1a:	e002      	b.n	8006d22 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d20:	bf00      	nop
  }
  return usb_status;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	4608      	mov	r0, r1
 8006d36:	4611      	mov	r1, r2
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	70fb      	strb	r3, [r7, #3]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70bb      	strb	r3, [r7, #2]
 8006d42:	4613      	mov	r3, r2
 8006d44:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006d54:	78bb      	ldrb	r3, [r7, #2]
 8006d56:	883a      	ldrh	r2, [r7, #0]
 8006d58:	78f9      	ldrb	r1, [r7, #3]
 8006d5a:	f7fa ffcc 	bl	8001cf6 <HAL_PCD_EP_Open>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d817      	bhi.n	8006d98 <USBD_LL_OpenEP+0x6c>
 8006d68:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <USBD_LL_OpenEP+0x44>)
 8006d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6e:	bf00      	nop
 8006d70:	08006d81 	.word	0x08006d81
 8006d74:	08006d87 	.word	0x08006d87
 8006d78:	08006d8d 	.word	0x08006d8d
 8006d7c:	08006d93 	.word	0x08006d93
    case HAL_OK :
      usb_status = USBD_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	73fb      	strb	r3, [r7, #15]
    break;
 8006d84:	e00b      	b.n	8006d9e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d86:	2302      	movs	r3, #2
 8006d88:	73fb      	strb	r3, [r7, #15]
    break;
 8006d8a:	e008      	b.n	8006d9e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d90:	e005      	b.n	8006d9e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d92:	2302      	movs	r3, #2
 8006d94:	73fb      	strb	r3, [r7, #15]
    break;
 8006d96:	e002      	b.n	8006d9e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d9c:	bf00      	nop
  }
  return usb_status;
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006dc2:	78fa      	ldrb	r2, [r7, #3]
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fa fffd 	bl	8001dc6 <HAL_PCD_EP_Close>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d816      	bhi.n	8006e04 <USBD_LL_CloseEP+0x5c>
 8006dd6:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <USBD_LL_CloseEP+0x34>)
 8006dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006df3 	.word	0x08006df3
 8006de4:	08006df9 	.word	0x08006df9
 8006de8:	08006dff 	.word	0x08006dff
    case HAL_OK :
      usb_status = USBD_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
    break;
 8006df0:	e00b      	b.n	8006e0a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006df2:	2302      	movs	r3, #2
 8006df4:	73fb      	strb	r3, [r7, #15]
    break;
 8006df6:	e008      	b.n	8006e0a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8006dfc:	e005      	b.n	8006e0a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	73fb      	strb	r3, [r7, #15]
    break;
 8006e02:	e002      	b.n	8006e0a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006e04:	2302      	movs	r3, #2
 8006e06:	73fb      	strb	r3, [r7, #15]
    break;
 8006e08:	bf00      	nop
  }
  return usb_status;  
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006e2e:	78fa      	ldrb	r2, [r7, #3]
 8006e30:	4611      	mov	r1, r2
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fb f8bd 	bl	8001fb2 <HAL_PCD_EP_SetStall>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d816      	bhi.n	8006e70 <USBD_LL_StallEP+0x5c>
 8006e42:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <USBD_LL_StallEP+0x34>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e59 	.word	0x08006e59
 8006e4c:	08006e5f 	.word	0x08006e5f
 8006e50:	08006e65 	.word	0x08006e65
 8006e54:	08006e6b 	.word	0x08006e6b
    case HAL_OK :
      usb_status = USBD_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e5c:	e00b      	b.n	8006e76 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	73fb      	strb	r3, [r7, #15]
    break;
 8006e62:	e008      	b.n	8006e76 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e64:	2301      	movs	r3, #1
 8006e66:	73fb      	strb	r3, [r7, #15]
    break;
 8006e68:	e005      	b.n	8006e76 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e6e:	e002      	b.n	8006e76 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006e70:	2302      	movs	r3, #2
 8006e72:	73fb      	strb	r3, [r7, #15]
    break;
 8006e74:	bf00      	nop
  }
  return usb_status;  
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fb f8eb 	bl	800207a <HAL_PCD_EP_ClrStall>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d816      	bhi.n	8006edc <USBD_LL_ClearStallEP+0x5c>
 8006eae:	a201      	add	r2, pc, #4	; (adr r2, 8006eb4 <USBD_LL_ClearStallEP+0x34>)
 8006eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb4:	08006ec5 	.word	0x08006ec5
 8006eb8:	08006ecb 	.word	0x08006ecb
 8006ebc:	08006ed1 	.word	0x08006ed1
 8006ec0:	08006ed7 	.word	0x08006ed7
    case HAL_OK :
      usb_status = USBD_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec8:	e00b      	b.n	8006ee2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	73fb      	strb	r3, [r7, #15]
    break;
 8006ece:	e008      	b.n	8006ee2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ed4:	e005      	b.n	8006ee2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8006eda:	e002      	b.n	8006ee2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006edc:	2302      	movs	r3, #2
 8006ede:	73fb      	strb	r3, [r7, #15]
    break;
 8006ee0:	bf00      	nop
  }
  return usb_status; 
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006efe:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	da0b      	bge.n	8006f20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006f08:	78fb      	ldrb	r3, [r7, #3]
 8006f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f0e:	68f9      	ldr	r1, [r7, #12]
 8006f10:	4613      	mov	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	333a      	adds	r3, #58	; 0x3a
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	e00b      	b.n	8006f38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f26:	68f9      	ldr	r1, [r7, #12]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	1a9b      	subs	r3, r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8006f36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8006f5e:	78fa      	ldrb	r2, [r7, #3]
 8006f60:	4611      	mov	r1, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fa fea6 	bl	8001cb4 <HAL_PCD_SetAddress>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d816      	bhi.n	8006fa0 <USBD_LL_SetUSBAddress+0x5c>
 8006f72:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <USBD_LL_SetUSBAddress+0x34>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006f89 	.word	0x08006f89
 8006f7c:	08006f8f 	.word	0x08006f8f
 8006f80:	08006f95 	.word	0x08006f95
 8006f84:	08006f9b 	.word	0x08006f9b
    case HAL_OK :
      usb_status = USBD_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f8c:	e00b      	b.n	8006fa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	73fb      	strb	r3, [r7, #15]
    break;
 8006f92:	e008      	b.n	8006fa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f94:	2301      	movs	r3, #1
 8006f96:	73fb      	strb	r3, [r7, #15]
    break;
 8006f98:	e005      	b.n	8006fa6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f9e:	e002      	b.n	8006fa6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa4:	bf00      	nop
  }
  return usb_status;  
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	72fb      	strb	r3, [r7, #11]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8006fd2:	893b      	ldrh	r3, [r7, #8]
 8006fd4:	7af9      	ldrb	r1, [r7, #11]
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	f7fa ffa2 	bl	8001f20 <HAL_PCD_EP_Transmit>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8006fe0:	7dbb      	ldrb	r3, [r7, #22]
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d816      	bhi.n	8007014 <USBD_LL_Transmit+0x64>
 8006fe6:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <USBD_LL_Transmit+0x3c>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08006ffd 	.word	0x08006ffd
 8006ff0:	08007003 	.word	0x08007003
 8006ff4:	08007009 	.word	0x08007009
 8006ff8:	0800700f 	.word	0x0800700f
    case HAL_OK :
      usb_status = USBD_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	75fb      	strb	r3, [r7, #23]
    break;
 8007000:	e00b      	b.n	800701a <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007002:	2302      	movs	r3, #2
 8007004:	75fb      	strb	r3, [r7, #23]
    break;
 8007006:	e008      	b.n	800701a <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007008:	2301      	movs	r3, #1
 800700a:	75fb      	strb	r3, [r7, #23]
    break;
 800700c:	e005      	b.n	800701a <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800700e:	2302      	movs	r3, #2
 8007010:	75fb      	strb	r3, [r7, #23]
    break;
 8007012:	e002      	b.n	800701a <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007014:	2302      	movs	r3, #2
 8007016:	75fb      	strb	r3, [r7, #23]
    break;
 8007018:	bf00      	nop
  }
  return usb_status;    
 800701a:	7dfb      	ldrb	r3, [r7, #23]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	607a      	str	r2, [r7, #4]
 800702e:	461a      	mov	r2, r3
 8007030:	460b      	mov	r3, r1
 8007032:	72fb      	strb	r3, [r7, #11]
 8007034:	4613      	mov	r3, r2
 8007036:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007046:	893b      	ldrh	r3, [r7, #8]
 8007048:	7af9      	ldrb	r1, [r7, #11]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	f7fa ff05 	bl	8001e5a <HAL_PCD_EP_Receive>
 8007050:	4603      	mov	r3, r0
 8007052:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007054:	7dbb      	ldrb	r3, [r7, #22]
 8007056:	2b03      	cmp	r3, #3
 8007058:	d816      	bhi.n	8007088 <USBD_LL_PrepareReceive+0x64>
 800705a:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <USBD_LL_PrepareReceive+0x3c>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	08007071 	.word	0x08007071
 8007064:	08007077 	.word	0x08007077
 8007068:	0800707d 	.word	0x0800707d
 800706c:	08007083 	.word	0x08007083
    case HAL_OK :
      usb_status = USBD_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	75fb      	strb	r3, [r7, #23]
    break;
 8007074:	e00b      	b.n	800708e <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007076:	2302      	movs	r3, #2
 8007078:	75fb      	strb	r3, [r7, #23]
    break;
 800707a:	e008      	b.n	800708e <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800707c:	2301      	movs	r3, #1
 800707e:	75fb      	strb	r3, [r7, #23]
    break;
 8007080:	e005      	b.n	800708e <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007082:	2302      	movs	r3, #2
 8007084:	75fb      	strb	r3, [r7, #23]
    break;
 8007086:	e002      	b.n	800708e <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007088:	2302      	movs	r3, #2
 800708a:	75fb      	strb	r3, [r7, #23]
    break;
 800708c:	bf00      	nop
  }
  return usb_status; 
 800708e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80070aa:	78fa      	ldrb	r2, [r7, #3]
 80070ac:	4611      	mov	r1, r2
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fa ff1d 	bl	8001eee <HAL_PCD_EP_GetRxCount>
 80070b4:	4603      	mov	r3, r0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80070cc:	78fb      	ldrb	r3, [r7, #3]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_PCDEx_LPM_Callback+0x18>
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d020      	beq.n	8007118 <HAL_PCDEx_LPM_Callback+0x58>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 80070d6:	e03d      	b.n	8007154 <HAL_PCDEx_LPM_Callback+0x94>
    if (hpcd->Init.low_power_enable)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80070e0:	f7ff faf2 	bl	80066c8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070e4:	4a1d      	ldr	r2, [pc, #116]	; (800715c <HAL_PCDEx_LPM_Callback+0x9c>)
 80070e6:	4b1d      	ldr	r3, [pc, #116]	; (800715c <HAL_PCDEx_LPM_Callback+0x9c>)
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f023 0306 	bic.w	r3, r3, #6
 80070ee:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070f8:	461a      	mov	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f023 0301 	bic.w	r3, r3, #1
 8007108:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007110:	4618      	mov	r0, r3
 8007112:	f7fe fd38 	bl	8005b86 <USBD_LL_Resume>
    break;
 8007116:	e01d      	b.n	8007154 <HAL_PCDEx_LPM_Callback+0x94>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007120:	461a      	mov	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f043 0301 	orr.w	r3, r3, #1
 8007130:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8007138:	4618      	mov	r0, r3
 800713a:	f7fe fd0f 	bl	8005b5c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <HAL_PCDEx_LPM_Callback+0x92>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007146:	4a05      	ldr	r2, [pc, #20]	; (800715c <HAL_PCDEx_LPM_Callback+0x9c>)
 8007148:	4b04      	ldr	r3, [pc, #16]	; (800715c <HAL_PCDEx_LPM_Callback+0x9c>)
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f043 0306 	orr.w	r3, r3, #6
 8007150:	6113      	str	r3, [r2, #16]
    break;   
 8007152:	bf00      	nop
}
 8007154:	bf00      	nop
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	e000ed00 	.word	0xe000ed00

08007160 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	4603      	mov	r3, r0
 8007168:	6039      	str	r1, [r7, #0]
 800716a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2212      	movs	r2, #18
 8007170:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007172:	4b03      	ldr	r3, [pc, #12]	; (8007180 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007174:	4618      	mov	r0, r3
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	2000013c 	.word	0x2000013c

08007184 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2204      	movs	r2, #4
 8007194:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007196:	4b03      	ldr	r3, [pc, #12]	; (80071a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	2000015c 	.word	0x2000015c

080071a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	6039      	str	r1, [r7, #0]
 80071b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d105      	bne.n	80071c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	4907      	ldr	r1, [pc, #28]	; (80071dc <USBD_FS_ProductStrDescriptor+0x34>)
 80071be:	4808      	ldr	r0, [pc, #32]	; (80071e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80071c0:	f7ff f967 	bl	8006492 <USBD_GetString>
 80071c4:	e004      	b.n	80071d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	4904      	ldr	r1, [pc, #16]	; (80071dc <USBD_FS_ProductStrDescriptor+0x34>)
 80071ca:	4805      	ldr	r0, [pc, #20]	; (80071e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80071cc:	f7ff f961 	bl	8006492 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071d0:	4b02      	ldr	r3, [pc, #8]	; (80071dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000828 	.word	0x20000828
 80071e0:	080077b4 	.word	0x080077b4

080071e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	6039      	str	r1, [r7, #0]
 80071ee:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	4904      	ldr	r1, [pc, #16]	; (8007204 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071f4:	4804      	ldr	r0, [pc, #16]	; (8007208 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071f6:	f7ff f94c 	bl	8006492 <USBD_GetString>
  return USBD_StrDesc;
 80071fa:	4b02      	ldr	r3, [pc, #8]	; (8007204 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20000828 	.word	0x20000828
 8007208:	080077c8 	.word	0x080077c8

0800720c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	6039      	str	r1, [r7, #0]
 8007216:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007218:	79fb      	ldrb	r3, [r7, #7]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d105      	bne.n	800722a <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	4907      	ldr	r1, [pc, #28]	; (8007240 <USBD_FS_SerialStrDescriptor+0x34>)
 8007222:	4808      	ldr	r0, [pc, #32]	; (8007244 <USBD_FS_SerialStrDescriptor+0x38>)
 8007224:	f7ff f935 	bl	8006492 <USBD_GetString>
 8007228:	e004      	b.n	8007234 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4904      	ldr	r1, [pc, #16]	; (8007240 <USBD_FS_SerialStrDescriptor+0x34>)
 800722e:	4805      	ldr	r0, [pc, #20]	; (8007244 <USBD_FS_SerialStrDescriptor+0x38>)
 8007230:	f7ff f92f 	bl	8006492 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007234:	4b02      	ldr	r3, [pc, #8]	; (8007240 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20000828 	.word	0x20000828
 8007244:	080077dc 	.word	0x080077dc

08007248 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	4603      	mov	r3, r0
 8007250:	6039      	str	r1, [r7, #0]
 8007252:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d105      	bne.n	8007266 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	4907      	ldr	r1, [pc, #28]	; (800727c <USBD_FS_ConfigStrDescriptor+0x34>)
 800725e:	4808      	ldr	r0, [pc, #32]	; (8007280 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007260:	f7ff f917 	bl	8006492 <USBD_GetString>
 8007264:	e004      	b.n	8007270 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	4904      	ldr	r1, [pc, #16]	; (800727c <USBD_FS_ConfigStrDescriptor+0x34>)
 800726a:	4805      	ldr	r0, [pc, #20]	; (8007280 <USBD_FS_ConfigStrDescriptor+0x38>)
 800726c:	f7ff f911 	bl	8006492 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007270:	4b02      	ldr	r3, [pc, #8]	; (800727c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20000828 	.word	0x20000828
 8007280:	080077ec 	.word	0x080077ec

08007284 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	6039      	str	r1, [r7, #0]
 800728e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d105      	bne.n	80072a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	4907      	ldr	r1, [pc, #28]	; (80072b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800729a:	4808      	ldr	r0, [pc, #32]	; (80072bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800729c:	f7ff f8f9 	bl	8006492 <USBD_GetString>
 80072a0:	e004      	b.n	80072ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	4904      	ldr	r1, [pc, #16]	; (80072b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80072a6:	4805      	ldr	r0, [pc, #20]	; (80072bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80072a8:	f7ff f8f3 	bl	8006492 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000828 	.word	0x20000828
 80072bc:	080077f8 	.word	0x080077f8

080072c0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	6039      	str	r1, [r7, #0]
 80072ca:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_BOSDesc);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	220c      	movs	r2, #12
 80072d0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80072d2:	4b03      	ldr	r3, [pc, #12]	; (80072e0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	20000150 	.word	0x20000150

080072e4 <UVC_Init_FS>:
/**
  * @brief  Initializes the UVC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t UVC_Init_FS(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_UVC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80072e8:	2200      	movs	r2, #0
 80072ea:	4905      	ldr	r1, [pc, #20]	; (8007300 <UVC_Init_FS+0x1c>)
 80072ec:	4805      	ldr	r0, [pc, #20]	; (8007304 <UVC_Init_FS+0x20>)
 80072ee:	f7fe f9dc 	bl	80056aa <USBD_UVC_SetTxBuffer>
  USBD_UVC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80072f2:	4905      	ldr	r1, [pc, #20]	; (8007308 <UVC_Init_FS+0x24>)
 80072f4:	4803      	ldr	r0, [pc, #12]	; (8007304 <UVC_Init_FS+0x20>)
 80072f6:	f7fe f9f2 	bl	80056de <USBD_UVC_SetRxBuffer>
  return (USBD_OK);
 80072fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20001228 	.word	0x20001228
 8007304:	20000204 	.word	0x20000204
 8007308:	20000a28 	.word	0x20000a28

0800730c <UVC_DeInit_FS>:
/**
  * @brief  DeInitializes the UVC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t UVC_DeInit_FS(void)
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007310:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007312:	4618      	mov	r0, r3
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <UVC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t UVC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	4603      	mov	r3, r0
 8007324:	6039      	str	r1, [r7, #0]
 8007326:	71fb      	strb	r3, [r7, #7]
 8007328:	4613      	mov	r3, r2
 800732a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	2b23      	cmp	r3, #35	; 0x23
 8007330:	d84a      	bhi.n	80073c8 <UVC_Control_FS+0xac>
 8007332:	a201      	add	r2, pc, #4	; (adr r2, 8007338 <UVC_Control_FS+0x1c>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	080073c9 	.word	0x080073c9
 800733c:	080073c9 	.word	0x080073c9
 8007340:	080073c9 	.word	0x080073c9
 8007344:	080073c9 	.word	0x080073c9
 8007348:	080073c9 	.word	0x080073c9
 800734c:	080073c9 	.word	0x080073c9
 8007350:	080073c9 	.word	0x080073c9
 8007354:	080073c9 	.word	0x080073c9
 8007358:	080073c9 	.word	0x080073c9
 800735c:	080073c9 	.word	0x080073c9
 8007360:	080073c9 	.word	0x080073c9
 8007364:	080073c9 	.word	0x080073c9
 8007368:	080073c9 	.word	0x080073c9
 800736c:	080073c9 	.word	0x080073c9
 8007370:	080073c9 	.word	0x080073c9
 8007374:	080073c9 	.word	0x080073c9
 8007378:	080073c9 	.word	0x080073c9
 800737c:	080073c9 	.word	0x080073c9
 8007380:	080073c9 	.word	0x080073c9
 8007384:	080073c9 	.word	0x080073c9
 8007388:	080073c9 	.word	0x080073c9
 800738c:	080073c9 	.word	0x080073c9
 8007390:	080073c9 	.word	0x080073c9
 8007394:	080073c9 	.word	0x080073c9
 8007398:	080073c9 	.word	0x080073c9
 800739c:	080073c9 	.word	0x080073c9
 80073a0:	080073c9 	.word	0x080073c9
 80073a4:	080073c9 	.word	0x080073c9
 80073a8:	080073c9 	.word	0x080073c9
 80073ac:	080073c9 	.word	0x080073c9
 80073b0:	080073c9 	.word	0x080073c9
 80073b4:	080073c9 	.word	0x080073c9
 80073b8:	080073c9 	.word	0x080073c9
 80073bc:	080073c9 	.word	0x080073c9
 80073c0:	080073c9 	.word	0x080073c9
 80073c4:	080073c9 	.word	0x080073c9
    case UVC_SEND_BREAK:

    break;

  default:
    break;
 80073c8:	bf00      	nop
  }

  return (USBD_OK);
 80073ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <UVC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t UVC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_UVC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	4805      	ldr	r0, [pc, #20]	; (80073fc <UVC_Receive_FS+0x24>)
 80073e6:	f7fe f97a 	bl	80056de <USBD_UVC_SetRxBuffer>
  USBD_UVC_ReceivePacket(&hUsbDeviceFS);
 80073ea:	4804      	ldr	r0, [pc, #16]	; (80073fc <UVC_Receive_FS+0x24>)
 80073ec:	f7fe f98b 	bl	8005706 <USBD_UVC_ReceivePacket>
  return (USBD_OK);
 80073f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20000204 	.word	0x20000204

08007400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007438 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007404:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007406:	e003      	b.n	8007410 <LoopCopyDataInit>

08007408 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007408:	4b0c      	ldr	r3, [pc, #48]	; (800743c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800740a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800740c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800740e:	3104      	adds	r1, #4

08007410 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007410:	480b      	ldr	r0, [pc, #44]	; (8007440 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007412:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007414:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007416:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007418:	d3f6      	bcc.n	8007408 <CopyDataInit>
  ldr  r2, =_sbss
 800741a:	4a0b      	ldr	r2, [pc, #44]	; (8007448 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800741c:	e002      	b.n	8007424 <LoopFillZerobss>

0800741e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800741e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007420:	f842 3b04 	str.w	r3, [r2], #4

08007424 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007424:	4b09      	ldr	r3, [pc, #36]	; (800744c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007426:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007428:	d3f9      	bcc.n	800741e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800742a:	f7ff fa63 	bl	80068f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800742e:	f000 f811 	bl	8007454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007432:	f7ff f93d 	bl	80066b0 <main>
  bx  lr    
 8007436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007438:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800743c:	08007828 	.word	0x08007828
  ldr  r0, =_sdata
 8007440:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007444:	200001d4 	.word	0x200001d4
  ldr  r2, =_sbss
 8007448:	200001d4 	.word	0x200001d4
  ldr  r3, = _ebss
 800744c:	20001a2c 	.word	0x20001a2c

08007450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007450:	e7fe      	b.n	8007450 <ADC_IRQHandler>
	...

08007454 <__libc_init_array>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	4e0d      	ldr	r6, [pc, #52]	; (800748c <__libc_init_array+0x38>)
 8007458:	4c0d      	ldr	r4, [pc, #52]	; (8007490 <__libc_init_array+0x3c>)
 800745a:	1ba4      	subs	r4, r4, r6
 800745c:	10a4      	asrs	r4, r4, #2
 800745e:	2500      	movs	r5, #0
 8007460:	42a5      	cmp	r5, r4
 8007462:	d109      	bne.n	8007478 <__libc_init_array+0x24>
 8007464:	4e0b      	ldr	r6, [pc, #44]	; (8007494 <__libc_init_array+0x40>)
 8007466:	4c0c      	ldr	r4, [pc, #48]	; (8007498 <__libc_init_array+0x44>)
 8007468:	f000 f8f4 	bl	8007654 <_init>
 800746c:	1ba4      	subs	r4, r4, r6
 800746e:	10a4      	asrs	r4, r4, #2
 8007470:	2500      	movs	r5, #0
 8007472:	42a5      	cmp	r5, r4
 8007474:	d105      	bne.n	8007482 <__libc_init_array+0x2e>
 8007476:	bd70      	pop	{r4, r5, r6, pc}
 8007478:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800747c:	4798      	blx	r3
 800747e:	3501      	adds	r5, #1
 8007480:	e7ee      	b.n	8007460 <__libc_init_array+0xc>
 8007482:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007486:	4798      	blx	r3
 8007488:	3501      	adds	r5, #1
 800748a:	e7f2      	b.n	8007472 <__libc_init_array+0x1e>
 800748c:	08007820 	.word	0x08007820
 8007490:	08007820 	.word	0x08007820
 8007494:	08007820 	.word	0x08007820
 8007498:	08007824 	.word	0x08007824

0800749c <malloc>:
 800749c:	4b02      	ldr	r3, [pc, #8]	; (80074a8 <malloc+0xc>)
 800749e:	4601      	mov	r1, r0
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	f000 b859 	b.w	8007558 <_malloc_r>
 80074a6:	bf00      	nop
 80074a8:	20000170 	.word	0x20000170

080074ac <free>:
 80074ac:	4b02      	ldr	r3, [pc, #8]	; (80074b8 <free+0xc>)
 80074ae:	4601      	mov	r1, r0
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	f000 b803 	b.w	80074bc <_free_r>
 80074b6:	bf00      	nop
 80074b8:	20000170 	.word	0x20000170

080074bc <_free_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4605      	mov	r5, r0
 80074c0:	2900      	cmp	r1, #0
 80074c2:	d045      	beq.n	8007550 <_free_r+0x94>
 80074c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074c8:	1f0c      	subs	r4, r1, #4
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	bfb8      	it	lt
 80074ce:	18e4      	addlt	r4, r4, r3
 80074d0:	f000 f8b0 	bl	8007634 <__malloc_lock>
 80074d4:	4a1f      	ldr	r2, [pc, #124]	; (8007554 <_free_r+0x98>)
 80074d6:	6813      	ldr	r3, [r2, #0]
 80074d8:	4610      	mov	r0, r2
 80074da:	b933      	cbnz	r3, 80074ea <_free_r+0x2e>
 80074dc:	6063      	str	r3, [r4, #4]
 80074de:	6014      	str	r4, [r2, #0]
 80074e0:	4628      	mov	r0, r5
 80074e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074e6:	f000 b8a6 	b.w	8007636 <__malloc_unlock>
 80074ea:	42a3      	cmp	r3, r4
 80074ec:	d90c      	bls.n	8007508 <_free_r+0x4c>
 80074ee:	6821      	ldr	r1, [r4, #0]
 80074f0:	1862      	adds	r2, r4, r1
 80074f2:	4293      	cmp	r3, r2
 80074f4:	bf04      	itt	eq
 80074f6:	681a      	ldreq	r2, [r3, #0]
 80074f8:	685b      	ldreq	r3, [r3, #4]
 80074fa:	6063      	str	r3, [r4, #4]
 80074fc:	bf04      	itt	eq
 80074fe:	1852      	addeq	r2, r2, r1
 8007500:	6022      	streq	r2, [r4, #0]
 8007502:	6004      	str	r4, [r0, #0]
 8007504:	e7ec      	b.n	80074e0 <_free_r+0x24>
 8007506:	4613      	mov	r3, r2
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	b10a      	cbz	r2, 8007510 <_free_r+0x54>
 800750c:	42a2      	cmp	r2, r4
 800750e:	d9fa      	bls.n	8007506 <_free_r+0x4a>
 8007510:	6819      	ldr	r1, [r3, #0]
 8007512:	1858      	adds	r0, r3, r1
 8007514:	42a0      	cmp	r0, r4
 8007516:	d10b      	bne.n	8007530 <_free_r+0x74>
 8007518:	6820      	ldr	r0, [r4, #0]
 800751a:	4401      	add	r1, r0
 800751c:	1858      	adds	r0, r3, r1
 800751e:	4282      	cmp	r2, r0
 8007520:	6019      	str	r1, [r3, #0]
 8007522:	d1dd      	bne.n	80074e0 <_free_r+0x24>
 8007524:	6810      	ldr	r0, [r2, #0]
 8007526:	6852      	ldr	r2, [r2, #4]
 8007528:	605a      	str	r2, [r3, #4]
 800752a:	4401      	add	r1, r0
 800752c:	6019      	str	r1, [r3, #0]
 800752e:	e7d7      	b.n	80074e0 <_free_r+0x24>
 8007530:	d902      	bls.n	8007538 <_free_r+0x7c>
 8007532:	230c      	movs	r3, #12
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	e7d3      	b.n	80074e0 <_free_r+0x24>
 8007538:	6820      	ldr	r0, [r4, #0]
 800753a:	1821      	adds	r1, r4, r0
 800753c:	428a      	cmp	r2, r1
 800753e:	bf04      	itt	eq
 8007540:	6811      	ldreq	r1, [r2, #0]
 8007542:	6852      	ldreq	r2, [r2, #4]
 8007544:	6062      	str	r2, [r4, #4]
 8007546:	bf04      	itt	eq
 8007548:	1809      	addeq	r1, r1, r0
 800754a:	6021      	streq	r1, [r4, #0]
 800754c:	605c      	str	r4, [r3, #4]
 800754e:	e7c7      	b.n	80074e0 <_free_r+0x24>
 8007550:	bd38      	pop	{r3, r4, r5, pc}
 8007552:	bf00      	nop
 8007554:	200001f4 	.word	0x200001f4

08007558 <_malloc_r>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	1ccd      	adds	r5, r1, #3
 800755c:	f025 0503 	bic.w	r5, r5, #3
 8007560:	3508      	adds	r5, #8
 8007562:	2d0c      	cmp	r5, #12
 8007564:	bf38      	it	cc
 8007566:	250c      	movcc	r5, #12
 8007568:	2d00      	cmp	r5, #0
 800756a:	4606      	mov	r6, r0
 800756c:	db01      	blt.n	8007572 <_malloc_r+0x1a>
 800756e:	42a9      	cmp	r1, r5
 8007570:	d903      	bls.n	800757a <_malloc_r+0x22>
 8007572:	230c      	movs	r3, #12
 8007574:	6033      	str	r3, [r6, #0]
 8007576:	2000      	movs	r0, #0
 8007578:	bd70      	pop	{r4, r5, r6, pc}
 800757a:	f000 f85b 	bl	8007634 <__malloc_lock>
 800757e:	4a23      	ldr	r2, [pc, #140]	; (800760c <_malloc_r+0xb4>)
 8007580:	6814      	ldr	r4, [r2, #0]
 8007582:	4621      	mov	r1, r4
 8007584:	b991      	cbnz	r1, 80075ac <_malloc_r+0x54>
 8007586:	4c22      	ldr	r4, [pc, #136]	; (8007610 <_malloc_r+0xb8>)
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	b91b      	cbnz	r3, 8007594 <_malloc_r+0x3c>
 800758c:	4630      	mov	r0, r6
 800758e:	f000 f841 	bl	8007614 <_sbrk_r>
 8007592:	6020      	str	r0, [r4, #0]
 8007594:	4629      	mov	r1, r5
 8007596:	4630      	mov	r0, r6
 8007598:	f000 f83c 	bl	8007614 <_sbrk_r>
 800759c:	1c43      	adds	r3, r0, #1
 800759e:	d126      	bne.n	80075ee <_malloc_r+0x96>
 80075a0:	230c      	movs	r3, #12
 80075a2:	6033      	str	r3, [r6, #0]
 80075a4:	4630      	mov	r0, r6
 80075a6:	f000 f846 	bl	8007636 <__malloc_unlock>
 80075aa:	e7e4      	b.n	8007576 <_malloc_r+0x1e>
 80075ac:	680b      	ldr	r3, [r1, #0]
 80075ae:	1b5b      	subs	r3, r3, r5
 80075b0:	d41a      	bmi.n	80075e8 <_malloc_r+0x90>
 80075b2:	2b0b      	cmp	r3, #11
 80075b4:	d90f      	bls.n	80075d6 <_malloc_r+0x7e>
 80075b6:	600b      	str	r3, [r1, #0]
 80075b8:	50cd      	str	r5, [r1, r3]
 80075ba:	18cc      	adds	r4, r1, r3
 80075bc:	4630      	mov	r0, r6
 80075be:	f000 f83a 	bl	8007636 <__malloc_unlock>
 80075c2:	f104 000b 	add.w	r0, r4, #11
 80075c6:	1d23      	adds	r3, r4, #4
 80075c8:	f020 0007 	bic.w	r0, r0, #7
 80075cc:	1ac3      	subs	r3, r0, r3
 80075ce:	d01b      	beq.n	8007608 <_malloc_r+0xb0>
 80075d0:	425a      	negs	r2, r3
 80075d2:	50e2      	str	r2, [r4, r3]
 80075d4:	bd70      	pop	{r4, r5, r6, pc}
 80075d6:	428c      	cmp	r4, r1
 80075d8:	bf0d      	iteet	eq
 80075da:	6863      	ldreq	r3, [r4, #4]
 80075dc:	684b      	ldrne	r3, [r1, #4]
 80075de:	6063      	strne	r3, [r4, #4]
 80075e0:	6013      	streq	r3, [r2, #0]
 80075e2:	bf18      	it	ne
 80075e4:	460c      	movne	r4, r1
 80075e6:	e7e9      	b.n	80075bc <_malloc_r+0x64>
 80075e8:	460c      	mov	r4, r1
 80075ea:	6849      	ldr	r1, [r1, #4]
 80075ec:	e7ca      	b.n	8007584 <_malloc_r+0x2c>
 80075ee:	1cc4      	adds	r4, r0, #3
 80075f0:	f024 0403 	bic.w	r4, r4, #3
 80075f4:	42a0      	cmp	r0, r4
 80075f6:	d005      	beq.n	8007604 <_malloc_r+0xac>
 80075f8:	1a21      	subs	r1, r4, r0
 80075fa:	4630      	mov	r0, r6
 80075fc:	f000 f80a 	bl	8007614 <_sbrk_r>
 8007600:	3001      	adds	r0, #1
 8007602:	d0cd      	beq.n	80075a0 <_malloc_r+0x48>
 8007604:	6025      	str	r5, [r4, #0]
 8007606:	e7d9      	b.n	80075bc <_malloc_r+0x64>
 8007608:	bd70      	pop	{r4, r5, r6, pc}
 800760a:	bf00      	nop
 800760c:	200001f4 	.word	0x200001f4
 8007610:	200001f8 	.word	0x200001f8

08007614 <_sbrk_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4c06      	ldr	r4, [pc, #24]	; (8007630 <_sbrk_r+0x1c>)
 8007618:	2300      	movs	r3, #0
 800761a:	4605      	mov	r5, r0
 800761c:	4608      	mov	r0, r1
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	f000 f80a 	bl	8007638 <_sbrk>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d102      	bne.n	800762e <_sbrk_r+0x1a>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	b103      	cbz	r3, 800762e <_sbrk_r+0x1a>
 800762c:	602b      	str	r3, [r5, #0]
 800762e:	bd38      	pop	{r3, r4, r5, pc}
 8007630:	20001a28 	.word	0x20001a28

08007634 <__malloc_lock>:
 8007634:	4770      	bx	lr

08007636 <__malloc_unlock>:
 8007636:	4770      	bx	lr

08007638 <_sbrk>:
 8007638:	4b04      	ldr	r3, [pc, #16]	; (800764c <_sbrk+0x14>)
 800763a:	6819      	ldr	r1, [r3, #0]
 800763c:	4602      	mov	r2, r0
 800763e:	b909      	cbnz	r1, 8007644 <_sbrk+0xc>
 8007640:	4903      	ldr	r1, [pc, #12]	; (8007650 <_sbrk+0x18>)
 8007642:	6019      	str	r1, [r3, #0]
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	4402      	add	r2, r0
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	4770      	bx	lr
 800764c:	200001fc 	.word	0x200001fc
 8007650:	20001a2c 	.word	0x20001a2c

08007654 <_init>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	bf00      	nop
 8007658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	469e      	mov	lr, r3
 800765e:	4770      	bx	lr

08007660 <_fini>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	bf00      	nop
 8007664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007666:	bc08      	pop	{r3}
 8007668:	469e      	mov	lr, r3
 800766a:	4770      	bx	lr
